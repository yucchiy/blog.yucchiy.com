{"componentChunkName":"component---src-templates-post-tsx","path":"/2016/05/09/cg-rendering-pipeline/","result":{"data":{"markdownRemark":{"html":"<p>グラフィックスパイプラインは, データフローに着目した抽象的なパイプラインであり,\n実際のGPUハードウェア内での部品と必ずしも対応関係が取れているわけではない.</p>\n<p>現在のゲームアプリ市場は, OpenGL ES 2.0ベースであるため, OpenGL ES 2.0におけるパイプラインは基本型である.</p>\n<p>OpenGL ES 2.0のパイプラインは以下の要素からなる.</p>\n<ul>\n<li>CPUでのドローコール生成</li>\n<li>バーテックスシェーダ</li>\n<li>プリミティブアセンブリ</li>\n<li>ラスタライゼーション</li>\n<li>フラグメントシェーダ</li>\n<li>ROP処理</li>\n<li>フレームバッファ</li>\n</ul>\n<p>このうち, バーテックスシェーダとフラグメントシェーダはプログラマブルである.</p>\n<h2 id=\"cpuでのドローコール生成\" style=\"position:relative;\"><a href=\"#cpu%E3%81%A7%E3%81%AE%E3%83%89%E3%83%AD%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%AB%E7%94%9F%E6%88%90\" aria-label=\"cpuでのドローコール生成 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPUでのドローコール生成</h2>\n<p>ここは, ゲームエンジンがCPUを利用してメモリ上にあるシーングラフ情報をもとに, GPUに与えるデータをセットアップするステージである.\nシーングラフから描画対象のジオメトリやマテリアルを描画コマンドのバッファに入れ, グラフィックAPIを通じてドローコールを発行する.</p>\n<p>OpenGL ESが定義する, GPUへ送られるデータは, 主にポリゴンメッシュを構成する頂点情報と, また, 個々の頂点要素に</p>\n<ul>\n<li>座標</li>\n<li>法線ベクトル</li>\n<li>テクスチャ座標</li>\n<li>(テクスチャが適用されない場合は)頂点カラー情報</li>\n</ul>\n<p>などの頂点情報(vertex attribute)が付随する.</p>\n<p>テクスチャ座標とは, ある頂点に適用されるテクスチャ画像内の位置がどこかを示す座標である.\n0から1に正規化された二次元座標で, テクスチャ画像の左下を原点とする.</p>\n<p>Unityでいえば, Meshクラスのuvプロパティにあたる.</p>\n<h2 id=\"バーテックスシェーダ\" style=\"position:relative;\"><a href=\"#%E3%83%90%E3%83%BC%E3%83%86%E3%83%83%E3%82%AF%E3%82%B9%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80\" aria-label=\"バーテックスシェーダ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バーテックスシェーダ</h2>\n<p>このステージでは, ジオメトリデータの入力に, ユーザによって作成されるバーテックスシェーダプログラムを実行する.\nプログラムとして欠かせないのはモデル・ビュー・プロジェクション変換である.\n最も単純なバーテックスシェーダは, 座標変換のみを行って, 頂点情報を次のステージに引き渡すだけであるが, 他にも任意の処理を行うことができる.</p>\n<p>バーテックスシェーダでは, 頂点の生成・消滅を引き起こすことはできないが, 頂点情報を操作することは可能である.\n例えば, 元の頂点情報を書き換えて, 元のポリゴンの形状を変形したり, 頂点カラーを変更して照明効果を適用したりできる.\nテクスチャ座標もこのステージで変更できるので, テクスチャをスクロールさせたり, スプライトアニメーションを実装したりもできる.\nスプライトシートやテクスチャアトラスにテクスチャをまとめておけば, マテリアルやテクスチャの変更を減らすことができるため, オーバーヘッドを削減することができる.</p>\n<h2 id=\"プリミティブアセンブリ\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA\" aria-label=\"プリミティブアセンブリ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プリミティブアセンブリ</h2>\n<p>バーテックスシェーダの出力は, 描画順に頂点情報が入った配列である.\nこのステージでは, 最初にグラフィックAPIが呼び出された時に頂点の配列と一緒に渡される頂点インデックス(vertex indices)に,\nバーテックスシェーダから来た頂点配列内の頂点群を対応させ, プリミティブの構築を行う.</p>\n<p>プリミティブとは, 点や直線・三角形といった, 頂点からなる基本的な図形である.</p>\n<p>プリミティブが全て集まったら, クリッピング(Cliping)が行われる.\nクリッピングとは, プロジェクション変換で求めたクリップ座標系を用いて, クリップ空間の外側にあるプリミティブを破棄する処理である.\nもし一部がクリップ空間の外に出ているプリミティブの場合は, クリップ空間の境界に沿うように新しい頂点を生成し, 外側の頂点を破棄する.\nクリッピング後に透視除算とビューポート変換が行われる.</p>\n<p>このステージの最後には, 背面除去(back-face culling)が行われる. これは, 裏側を向いているプリミティブを破棄する処理である.</p>\n<p>ジオメトリパイプラインはここまでとなり, ここからは次のステージを挟んで, ピクセルパイプラインへとうつる.</p>\n<h2 id=\"ラスタライゼーション\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%A9%E3%82%A4%E3%82%BC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"ラスタライゼーション permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ラスタライゼーション</h2>\n<p>このステージでは, プリミティブをフラグメント(fragment)へ変換する.\nフラグメントとは, フレームバッファ1ピクセル分を描画するための</p>\n<ul>\n<li>スクリーン座標系での位置</li>\n<li>色</li>\n<li>テクスチャ座標</li>\n<li>深度情報</li>\n</ul>\n<p>などのデータからなる構造体を指す.</p>\n<p>ラスタライゼーションでは, バーテックスシェーダの出力として渡ってくるvarying変数がフラグメント間で補間される.\n例えば, 頂点カラーやテクスチャ座標をバーテックスシェーダ内で<code>varying</code>変数に入れておくと, 色情報や位置情報が頂点間で補間される.</p>\n<p>ラスタライゼーションは, プリミティブジオメトリを, ラスタデータに変換する処理である.</p>\n<p>一方で, ラスタライゼーションを行わない方式としてレイトレーシング(raytracing)というアルゴリズムがあり, 再帰的に反射する光線を計算してグラフィックスレンダリングを行う.\nレイトレーシングは, シーングラフへのランダムアクセスが起こり, また, ラスタライゼーションと比べると膨大な演算を発生させるために, 現時点での複雑なリアルタイムレンダリングには向かない.\nしかし, 写実性においてはラスタライゼーションとくらべ大きく優る.</p>\n<h2 id=\"フラグメントシェーダ\" style=\"position:relative;\"><a href=\"#%E3%83%95%E3%83%A9%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%88%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80\" aria-label=\"フラグメントシェーダ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>フラグメントシェーダ</h2>\n<p>このステージでは, フラグメントに対して, ユーザが用意したフラグメントシェーダの処理を適用する.</p>\n<p>フラグメントシェーダの入力は主に, フラグメントの座標のほかに, サンプラという, テクスチャデータを参照するための<code>uniform</code>変数がある.\nフラグメントシェーダの出力先は, フレームバッファのピクセルを表す色情報の<code>gl_FlagColor</code>組み込み変数で, RGBの3つの要素と, 透過度を表すアルファチャンネルの4次元ベクトルである.\n単に色を計算するよりは, バーテックスシェーダよりも複雑な陰影表現を実現するために使われる.</p>\n<h2 id=\"roprender-output-unit処理\" style=\"position:relative;\"><a href=\"#roprender-output-unit%E5%87%A6%E7%90%86\" aria-label=\"roprender output unit処理 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ROP(render output unit)処理</h2>\n<p>このステージでは, 各フラグメントごとに各種チェックを順次実行し, フレームバッファへ出力をおこなう.</p>\n<p>まず最初に行われるのがシザーテスト(scissor test)で, 全体のビューポート領域内のサブセットである句形部分(シザー領域)外のフラグメントを破棄する.</p>\n<p>次はステンシルテスト(stencil test)が行われる.\nあらかじめ描画前にステンシルバッファ(stencil buffer)という, フラグメントごとに整数値が入ったバッファを設定しておくと,\nステンシルテストの段階でビット演算を行い, テスト結果に応じてフラグメントの描画を制御をすることができるため, 内容次第で任意の形状にマスク処理ができる.\nUnityでは, ShaderLabの文法の, Passブロック内に, <code>Stencil</code>というブロックを記述する.</p>\n<p>最後のテストはデプステスト(depth test)で, Zバッファ(z-buffer)と呼ばれる, 各フラグメントごとに深度情報が保存されたバッファが利用される.\nZバッファには, ビューポート変換時のzの値が格納されているため, 視錐台の手前からどれだけ奥に位置しているかが保存されている.\nUnityでは, Passブロック内の<code>ZTest</code>ブロックで挙動を制御でき, Offsetパラーメータの<code>fator</code>と<code>units</code>で深度の値を設定できる.\nここで, 深度値は Zの最大の傾き * factor + 深度値の最小単位 * unitsで計算される.</p>\n<h3 id=\"zファイティングz-fighting\" style=\"position:relative;\"><a href=\"#z%E3%83%95%E3%82%A1%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0z-fighting\" aria-label=\"zファイティングz fighting permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zファイティング(z-fighting)</h3>\n<p>Zバッファ法を使った場合に, 板状のポリゴンがデプスバッファの浮動小数点での制度上, 同じとみなされる深度に存在すると,\nどちらかのポリゴンが手前にあるのかが短い頻度で切り替わり, 画面上でちらつく問題が発生する.</p>\n<p>Unityでは, 一方のオブジェクトのシェーダのOffsetを, -1, -1のように微妙にずらしておけば, この問題を回避できる.</p>\n<h3 id=\"早期デプステスト\" style=\"position:relative;\"><a href=\"#%E6%97%A9%E6%9C%9F%E3%83%87%E3%83%97%E3%82%B9%E3%83%86%E3%82%B9%E3%83%88\" aria-label=\"早期デプステスト permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>早期デプステスト</h3>\n<p>近年のGPUでは, フラグメントシェーダが<code>gl_FlagDepth</code>に格納されている震度情報を操作しないとうの条件をみたす場合に限り,\n早期デプステスト(early depth test)をフラグメントシェーダステージ前に実施し, (コストの高い)フラグメントシェーダプログラムが無駄に実行されないようしている.</p>\n<p>早期デプステストを効果的に行うには, 手前にあるオブジェクトの深度情報からテストされると,\n最終的に残る最も手前のフラグメントの震度情報が早い段階でデプスバッファにセットされやすくなるため, 無駄なオーバードローを最小限にできる.\nそこで, オブジェクトの描画順を制御するレンダーキュー(render queue)をビュー空間のシーングラフ内の手前のオブジェクトが前に来るようにソートしておく.</p>\n<p>しかし, フラグメントが透明である場合には上記の手法が適用できない. 後ろのオブジェクトがうっすらうつらないといけないため, さきに後ろのオブジェクトを描画する必要がある.</p>\n<p>そこで, 透明なオブジェクトについては, レンダーキューを深度が高い順にソートしておき深度が高いものから優先的に描画する必要がある.\nこの方法をZソート法や画家のアルゴリズムと呼ぶ.</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li>\n<p><a href=\"http://marina.sys.wakayama-u.ac.jp/~tokoi/?date=20120915\">床井研究室 - (5) パイプライン</a></p>\n</li>\n<li>\n<p><a href=\"http://marina.sys.wakayama-u.ac.jp/~tokoi/?date=20090821\">床井研究室 - 第１回 レンダリングパイプライン</a></p>\n</li>\n<li>\n<p><a href=\"http://d.hatena.ne.jp/nakamura001/20130320/1363780527\">Unity でのZファイティング(Z-Fighting)の対処法 - 強火で進め</a> <a href=\"http://d.hatena.ne.jp/nakamura001/20130320/1363780527\">Unity でのZファイティング(Z-Fighting)の対処法 - 強火で進め</a></p>\n</li>\n</ul>","excerpt":"グラフィックスパイプラインは, データフローに着目した抽象的なパイプラインであり,\n実際のGPUハードウェア内での部品と必ずしも対応関係が取れているわけではない. 現在のゲームアプリ市場は, OpenGL ES 2.0ベースであるため, OpenGL ES 2.0におけるパイプラインは基本型である. OpenGL ES 2.0のパイプラインは以下の要素からなる. CPUでのドローコール生成 バーテックスシェーダ プリミティブアセンブリ ラスタライゼーション フラグメントシェーダ ROP…","fields":{"slug":"/2016/05/09/cg-rendering-pipeline/"},"frontmatter":{"date":"May 09, 2016","type":null,"tags":["CG","Unity"],"title":"グラフィックスパイプラインについてのメモ","description":"最近Unityを触ることになったので, ゴールデンウィークをつかって グラフィックスについて勉強をしていた. せっかくなので勉強の成果として備忘録としてブログを書いた.","eyecatch":null}}},"pageContext":{"id":"fddf7a54-80cc-5407-81f4-c7d1669902d7"}},"staticQueryHashes":["1480509143","3159585216"]}