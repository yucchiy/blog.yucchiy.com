{"componentChunkName":"component---src-templates-post-tsx","path":"/2018/11/07/how-to-use-constant-buffer-in-slimdx/","result":{"data":{"markdownRemark":{"html":"<p>DirectXで、例えば以下の頂点シェーダーのようにその頂点の変換行列を渡して、シェーダー内で変換を行いたいとする。</p>\n<div class=\"gatsby-highlight\" data-language=\"hlsl\"><pre class=\"language-hlsl\"><code class=\"language-hlsl\"><span class=\"token keyword\">matrix</span> ModelViewProjection<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexPositionColor</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float4</span> Position <span class=\"token operator\">:</span> SV_Position<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float4</span> Color <span class=\"token operator\">:</span> COLOR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nVertexPositionColor <span class=\"token function\">VShader</span><span class=\"token punctuation\">(</span>VertexPositionColor input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tinput<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span> ModelViewProjection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DirectXの<a href=\"https://docs.microsoft.com/en-us/windows/desktop/direct3d11/d3d11-graphics-programming-guide-effects\">Effects</a>の場合、SlimDXでは<code>SlimDX.Direct3D11.Effect.GetVariableBy(Name|Index)</code>メソッドを経由して、<code>SlimDX.Direct3D11.EffectVariable</code>を取得でき、このインスタンスを経由して、変数を設定したりできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">effect<span class=\"token punctuation\">.</span><span class=\"token function\">GetVariableByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModelViewProjection\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AsMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetMatrix</span><span class=\"token punctuation\">(</span>modelMatrix <span class=\"token operator\">*</span> viewMatrix <span class=\"token operator\">*</span> projectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ただし、下記のように、各シェーダーを個々で生成し、DeviceContextにそれぞれのシェーダーを設定する方式をとっていたので、\nその場合に、どのように変数を渡せばいいかわからなかったので、調べてみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using (var bytecode = ShaderBytecode.CompileFromFile(\"triangle.fx\", \"VShader\", \"vs_4_0\", ShaderFlags.None, EffectFlags.None))\n    vertexShader = new VertexShader(device, bytecode);\n\n// load and compile the pixel shader\nusing (var bytecode = ShaderBytecode.CompileFromFile(\"triangle.fx\", \"PShader\", \"ps_4_0\", ShaderFlags.None, EffectFlags.None))\n    pixelShader = new PixelShader(device, bytecode);</code></pre></div>\n<h2 id=\"constantbuffer\" style=\"position:relative;\"><a href=\"#constantbuffer\" aria-label=\"constantbuffer permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ConstantBuffer</h2>\n<p>シェーダーに定数を渡してやるには、<code>ConstantBuffer</code>を利用してやるとよさそう。\n<code>ConstantBuffer</code>は名前の通り定数を渡してやるバッファで、シェーダーに定数を渡す用途に利用できます。</p>\n<h3 id=\"使い方\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"使い方 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h3>\n<p>基本は頂点バッファを作成するときと同じ要領で、まずはバッファに突っ込むデータ<code>SlimDX.DataStream</code>で用意します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// 64は`SlimDX.Matrix`のサイズ</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SlimDX<span class=\"token punctuation\">.</span>DataStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 事前に生成した、`SlimDX.Matrix`型の変数を渡す</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>ConstantBuffer</code>としてバッファを確保し、頂点シェーダーに渡してみます。Descriptionに、<code>ConstantBuffer</code>を作成することを指定してやります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SlimDX<span class=\"token punctuation\">.</span>Direct3D11<span class=\"token punctuation\">.</span>Buffer</span><span class=\"token punctuation\">(</span>\n    deviceContext<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 書き込み対象の`SlimDX.Direct3D11.DeviceContext`</span>\n    stream<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">64</span><span class=\"token punctuation\">,</span>\n    SlimDX<span class=\"token punctuation\">.</span>Direct3D11<span class=\"token punctuation\">.</span>ResourceUsage<span class=\"token punctuation\">.</span>Dynamic<span class=\"token punctuation\">,</span>\n    SlimDX<span class=\"token punctuation\">.</span>Direct3D11<span class=\"token punctuation\">.</span>BindFlags<span class=\"token punctuation\">.</span>ConstantBuffer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ConstantBufferであることを指定</span>\n    SlimDX<span class=\"token punctuation\">.</span>Direct3D11<span class=\"token punctuation\">.</span>CpuAccessFlags<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">,</span>\n    SlimDX<span class=\"token punctuation\">.</span>Direct3D11<span class=\"token punctuation\">.</span>ResourceOptionFlags<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    deviceContext<span class=\"token punctuation\">.</span>VertexShader<span class=\"token punctuation\">.</span><span class=\"token function\">SetConstantBuffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>頂点シェーダーは以下になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"hlsl\"><pre class=\"language-hlsl\"><code class=\"language-hlsl\"><span class=\"token keyword\">cbuffer</span> c0\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">matrix</span> ModelViewProjection<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexPositionColor</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float4</span> Position <span class=\"token operator\">:</span> SV_Position<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float4</span> Color <span class=\"token operator\">:</span> COLOR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nVertexPositionColor <span class=\"token function\">VShader</span><span class=\"token punctuation\">(</span>VertexPositionColor input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tinput<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span> ModelViewProjection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これで、頂点バッファに定数が渡せました。\n余談ですが、<code>cbuffer</code>はごっそり削除しても、<a href=\"https://qiita.com/ousttrue/items/a82bfe2135596fcda74b\">$Globalsという名前のConstantBufferとして認識されるよう</a>です。</p>\n<p>DirectX、まだまだ触り始めたばかりなので、間違っている箇所等、<a href=\"https://twitter.com/yucchiy_\">@yucchiy_</a>までご連絡いただけると幸いです。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"http://apparat-engine.blogspot.com/2012/11/setting-transformations-in-shader-with.html\">Apparat - Engineering a 3D Engine with C# and SlimDX</a></li>\n<li><a href=\"https://qiita.com/ousttrue/items/a82bfe2135596fcda74b\">DirectX(D3D11.1)再入門 ConstantBuffer</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-intro#vertex-buffer\">Introduction to Buffers in Direct3D 11</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/desktop/direct3dhlsl/dx-graphics-hlsl-constants\">Shader Constants</a></li>\n</ul>","excerpt":"DirectXで、例えば以下の頂点シェーダーのようにその頂点の変換行列を渡して、シェーダー内で変換を行いたいとする。 DirectXのEffectsの場合、SlimDXではSlimDX.Direct3D11.Effect.GetVariableBy(Name|Index)メソッドを経由して、SlimDX.Direct3D11.EffectVariableを取得でき、このインスタンスを経由して、変数を設定したりできます。 ただし、下記のように、各シェーダーを個々で生成し、DeviceContext…","fields":{"slug":"/2018/11/07/how-to-use-constant-buffer-in-slimdx/"},"frontmatter":{"date":"November 06, 2018","type":null,"tags":["SlimDX","C#","DirectX"],"title":"SlimDXでConstantBufferを使ってシェーダーに定数を渡す","description":null,"eyecatch":null}}},"pageContext":{"id":"3af356b2-af46-5a1f-ab33-96eba34010d9"}},"staticQueryHashes":["1480509143","3159585216"]}