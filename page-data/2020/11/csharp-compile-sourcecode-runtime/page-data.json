{"componentChunkName":"component---src-templates-post-tsx","path":"/2020/11/csharp-compile-sourcecode-runtime/","result":{"data":{"markdownRemark":{"html":"<p>C#で、ソースコードを実行中にコンパイルして、そのプログラム中でコンパイルしたクラスやメソッドを実行する方法を紹介します。</p>\n<h2 id=\"roslynとは\" style=\"position:relative;\"><a href=\"#roslyn%E3%81%A8%E3%81%AF\" aria-label=\"roslynとは permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Roslynとは</h2>\n<p>Roslynは.NETコンパイラプラットフォームの通称であり、C#やVisual Basic（、F#も？）のコンパイル・コード解析のためのAPIを提供します。</p>\n<p>具体的には今回紹介するような動的なコンパイルであったり、コード解析(<a href=\"https://github.com/dotnet/roslyn-analyzers\">Roslyn Analyzer</a>などと呼ばれている)、OmniSharpというIDEのための言語機能提供の<a href=\"https://github.com/OmniSharp/omnisharp-roslyn\">バックエンドもRoslyn実装が存在したり</a>、単にコンパイラというより、コンパイルに関する周辺機能を諸々APIで提供しています。</p>\n<p>最近ではC# 9から導入された<a href=\"https://devblogs.microsoft.com/dotnet/new-c-source-generator-samples/\">Source Generator</a>も、Roslynの1機能として提供されています。</p>\n<p>イメージとして<strong>C#コンパイラでできることが、だいたいC#でプログラムから呼び出せる</strong>、と思っても大きく違いはないのではと思ったりします。</p>\n<h2 id=\"環境構築\" style=\"position:relative;\"><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\" aria-label=\"環境構築 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>環境構築</h2>\n<p>今回はRoslynを利用します。利用するには<a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a>をインストールします。インストールするにはdotnetコマンドで下記を実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dotnet add package Microsoft.CodeAnalysis.CSharp --version 3.8.0</code></pre></div>\n<h2 id=\"コンパイルのための下準備\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E4%B8%8B%E6%BA%96%E5%82%99\" aria-label=\"コンパイルのための下準備 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンパイルのための下準備</h2>\n<p>下記の<code>TestClass</code>をランタイムでコンパイルして、コンパイル後に\u001b<code>TestClass.Add</code>を呼び出して結果を出力してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> SourceCode <span class=\"token operator\">=</span> <span class=\"token string\">@\"\n    public class TestClass\n    {\n        public static int Add(int a, int b)\n        {\n            return a + b;\n        }\n    }\n\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ソースコードを実行中にコンパイルする場合は下記のように<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpcompilation.create?view=roslyn-dotnet\"><code>CSharpCompilation.Create</code></a>を呼び出し、生成された<code>CSharpCompilation</code>インスタンス\bに対して<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.compilation.emit?view=roslyn-dotnet\"><code>Emit</code></a>を呼び出します。ここで引数にはそれぞれアセンブリ名・シンタックスツリー・メタリファレンス・コンパイルオプションを渡します。数が多いのでそれぞれ順を追って説明します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compilation <span class=\"token operator\">=</span> CSharpCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"TestClass.dll\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> syntaxTree <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    references<span class=\"token punctuation\">,</span>\n    compilationOptions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// MemoryStreamについては後述する</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここでコンパイル</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> emitResult <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span><span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>まずソースコードを<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpsyntaxtree?view=roslyn-dotnet\">シンタックスツリー</a>に変換するには<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpsyntaxtree.parsetext?view=roslyn-dotnet#Microsoft_CodeAnalysis_CSharp_CSharpSyntaxTree_ParseText_Microsoft_CodeAnalysis_Text_SourceText_Microsoft_CodeAnalysis_CSharp_CSharpParseOptions_System_String_System_Threading_CancellationToken_\"><code>CSharpSyntxTree.ParseText</code></a>メソッドを用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> CSharpParseOptions<span class=\"token punctuation\">.</span>Default\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithLanguageVersion</span><span class=\"token punctuation\">(</span>LanguageVersion<span class=\"token punctuation\">.</span>CSharp8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> syntaxTree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>\n    SourceCode<span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"TestClass.cs\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記では、第1引数にソースコードを表すテキストファイルを指定しています。また第3引数には、このソースコードのファイルパスを指定します。</p>\n<p>第2引数には、このソースコードのパースオプションを指定します。<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpparseoptions?view=roslyn-dotnet\"><code>CSharpParseOptions</code></a>のコンストラクタを呼び出して作成でもよいですが、<code>CSharpParseOptions.Default</code>をもとに、<code>With*</code>メソッドを呼び出してカスタマイズしたものを渡しても良いでしょう。上記の例では、デフォルトオプションに対して、C#のバージョンを指定したものを渡しています。</p>\n<p><code>CSharpParseOptions.Default</code>は<a href=\"https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Compilers/CSharp/Portable/CSharpParseOptions.cs#L21\">引数なしでコンストラクタを呼び出したものを保持していて</a>、具体的にそれぞれのパラメータには<a href=\"https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Compilers/CSharp/Portable/CSharpParseOptions.cs#L48\">こちら</a>パラメータが渡っているようです。</p>\n<p><code>LanguageVersion</code>は<a href=\"https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Compilers/CSharp/Portable/LanguageVersion.cs#L155\"><code>Default</code></a>でサポートされているもののうち最新のものが、<code>DocumentationMode</code>には<a href=\"https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Compilers/Core/Portable/DocumentationMode.cs#L25\"><code>Parse</code></a>が、<code>SourceCodeKind</code>には<a href=\"https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Compilers/Core/Portable/SourceCodeKind.cs#L19\"><code>Regular</code></a>が、<code>preprocessorSymbols</code>は<code>null\b</code>が渡され、プリプロセッサシンボルが設定されていない状態です。（ちゃんと調べてなくて<code>DocumentationMode</code>および<code>SourceCodeKind</code>が変わると何が変わるか把握できてなくて、もし知っておられる方がおられたら教えていただけると幸いです...。）</p>\n<p>次にメタリファレンスですが、こちらは参照するdllなどを指定するためのパラメータです。ちなみになにも指定しないと下記のようなエラーが発生します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Error, (TestClass.cs@Line2:26)] CS0518, 定義済みの型 'System.Object' は定義、またはインポートされていません\n[Error, (TestClass.cs@Line4:39)] CS0518, 定義済みの型 'System.Int32' は定義、またはインポートされていません\n[Error, (TestClass.cs@Line4:46)] CS0518, 定義済みの型 'System.Int32' は定義、またはインポートされていません\n[Error, (TestClass.cs@Line4:31)] CS0518, 定義済みの型 'System.Int32' は定義、またはインポートされていません\n[Error, (TestClass.cs@Line2:26)] CS1729, 'object' には、引数 0 を指定するコンストラクターは含まれていません</code></pre></div>\n<p>ちなみに上記のエラーは、コンパイル後に<code>EmitResult.Diagnostics</code>を表示することで確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token keyword\">in</span> emitResult<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pos <span class=\"token operator\">=</span> diagnostic<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">.</span><span class=\"token function\">GetLineSpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> location <span class=\"token operator\">=</span>\n        <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">+</span> <span class=\"token string\">\"@Line\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Line <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Character <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>\n        <span class=\"token interpolation-string\"><span class=\"token string\">$\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Severity</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">location</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>TestClass</code>で利用している<code>int</code>は内部的には<code>System.Int32</code>を利用しています。メタリファレンスは何も指定しないとこれらがインポートされていないため、コンパイルエラーとなります。</p>\n<p>これを回避するために、今回は<code>object</code>クラスが属するアセンブリをメタリファレンスに指定しておきます。具体的には下記のように指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> references <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MetadataReference<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token punctuation\">{</span>\n    MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">object</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>typeof(object).Assembly</code>でアセンブリを取得し、その<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.location?view=net-5.0\"><code>Location</code></a>を取得します。このプロパティにはdllのファイルパスが格納されています。</p>\n<p>ファイルパスから<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.metadatareference.createfromfile?view=roslyn-dotnet\"><code>MetadataReference.CreateFromFile</code></a>を通して取得できるインスタンスをリファレンスとして指定します。</p>\n<p>最後にコンパイルオプションですが、<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpcompilationoptions?view=roslyn-dotnet\"><code>CSharpCompilationOptions</code></a>を指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compilationOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CSharpCompilationOptions</span><span class=\"token punctuation\">(</span>\n    OutputKind<span class=\"token punctuation\">.</span>DynamicallyLinkedLibrary\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>必須パラメータは<code>OutputKind</code>で、コンパイル後のアセンブリの種類を指定します。dllにするか、コンソールアプリにするかなどを指定できますが、今回はコンパイル後にメソッドをリフレクションで呼び出すために、<code>DynamicallyLinkedLibrary</code>を指定しました。</p>\n<p>他にも、Unsafeを許可するかどうか、Nullableをどうするか、警告レベルをどうするかなど、C#で指定できるであろうコンパイルオプションをそれぞれ指定できます。どのようなオプションが指定できるかは、<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpcompilationoptions?view=roslyn-dotnet\">こちら</a>で確認できます。</p>\n<h2 id=\"コンパイル結果からアセンブリを取得する\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E7%B5%90%E6%9E%9C%E3%81%8B%E3%82%89%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"コンパイル結果からアセンブリを取得する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンパイル結果からアセンブリを取得する</h2>\n<p>前述はしましたが、上記で用意したパラメータから<code>Create</code>メソッドで<code>CSharpCompilation</code>を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compilation <span class=\"token operator\">=</span> CSharpCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"TestClass.dll\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> syntaxTree <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    references<span class=\"token punctuation\">,</span>\n    compilationOptions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>あとは<code>compilation.Emit</code>を呼び出すことでコンパイルを行います。<code>Emit</code>の引数には<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-5.0\"><code>Stream</code></a>を指定します。この<code>Stream</code>にコンパイル結果のアセンブリが書き出されます。また、コンパイル結果は戻り値の<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.emit.emitresult?view=roslyn-dotnet\"><code>EmitResult</code></a>に格納されています。この結果をもとに処理を切りかえることになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> emitResult <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span><span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emitResult<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// コンパイル成功</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// コンパイルエラーなどで失敗</span>\n        <span class=\"token comment\">// エラー処理を書く</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再掲ですが、コンパイル時のメッセージは<code>EmitResult.Diagnostics</code>に格納されています。ちょうどコーディング時に、エディターに表示されているような警告やコンパイルエラーなどが格納されていると考えるとわかりやすいかと思います。</p>\n<p>メッセージ一覧は例えば下記のように出力して確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token keyword\">in</span> emitResult<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pos <span class=\"token operator\">=</span> diagnostic<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">.</span><span class=\"token function\">GetLineSpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> location <span class=\"token operator\">=</span>\n        <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">+</span> <span class=\"token string\">\"@Line\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Line <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Character <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>\n        <span class=\"token interpolation-string\"><span class=\"token string\">$\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Severity</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">location</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>コンパイルが成功していれば、あとは出力されたアセンブリ\bをロードします。これには<code>AssemblyLoadContext</code>を用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> emitResult <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span><span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emitResult<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// コンパイルが成功していれば実行</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// これでコンパイル後のアセンブリが取得できた</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> AssemblyLoadContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">LoadFromStream</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>LoadFromStream</code>でストリームに書き込まれたアセンブリをロードします。ただしアセンブリ書き出し後にストリームの位置が先頭になっていないので、<code>Seek</code>で先頭にセットしなおしておきます。</p>\n<p>ちなみに<code>AssemblyLoadContext.Default</code>を使ってるので、このプログラムを実行しているコンテキストをそのまま使っています。場合によっては独自のローダーを実装したほうがいいかもしれません。（サンドボックス的にプログラムを実行する場合は、独自のローダーを実装するなど？ ちゃんと調べられてないので、もし詳しい方がおられたらおしえていただけると幸いです...。）</p>\n<h2 id=\"コンパイルしたクラスを呼び出す\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%97%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\" aria-label=\"コンパイルしたクラスを呼び出す permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンパイルしたクラスを呼び出す</h2>\n<p>上記でソースコードをコンパイルしたアセンブリを取得できたので、あとはメソッドを呼び出してみます。呼び出しにはリフレクションを用います。\n静的メソッドを呼び出す場合は下記のように呼び出せます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// 生成したアセンブリから、生成したクラス情報を名前で取得する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> testClassType <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// クラス情報からメソッド情報を取得する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> addMethod <span class=\"token operator\">=</span> testClassType<span class=\"token punctuation\">.</span><span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// メソッドを呼び出す</span>\n<span class=\"token comment\">// 第1引数をnullにすると静的メソッド呼び出しとなる</span>\n<span class=\"token comment\">// 第2引数でメソッドの引数を指定する</span>\n<span class=\"token comment\">// 戻り値もobjectなので適宜キャスト</span>\n<span class=\"token comment\">// var result = TestClass.Add(1, 2); を実行している</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>addMethod<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 実行結果を取得する</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"TestClass.Add(1, 2) = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// > TestClass.Add(1, 2) = 3</span></code></pre></div>\n<p>また、下記のようなクラスのインスタンスを生成し、メソッドやプロパティを呼び出すことも可能です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> SourceCodeTestClass2 <span class=\"token operator\">=</span> <span class=\"token string\">@\"\n    public class TestClass2\n    {\n        public string Name { get; }\n        public TestClass2(string name)\n        {\n            Name = name;\n        }\n\n        public string GetName()\n        {\n            return Name;\n        }\n    }\n\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>具体的には下記のように呼び出します。インスタンス化には<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.createinstance?view=net-5.0\"><code>Assembly.CreateInstance</code></a>または<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.activator?view=net-5.0\"><code>Activator.CreateInstance</code></a>を用います。今回は<code>Activator</code>を用いました。(やり方は他にもたくさんあるかもしれません。)</p>\n<p>便宜上、先程までのコンパイル処理を<code>Compile</code>メソッドに纏めています。戻り値としてコンパイル結果のアセンブリを返すこととします。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>SourceCodeTestClass2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TestClass2.cs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TestClass2.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> classType <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestClass2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Activatorを用いてTestClass2のコンストラクタを呼び出す</span>\n<span class=\"token comment\">// var instance = new TestClass2(\"Name1\"); を実行している</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> instance <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Name1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// プロパティ呼び出し</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> property <span class=\"token operator\">=</span> classType<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// var result = instance.Name;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>property<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"instance.Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// > instance.Name = Name1</span>\n\n<span class=\"token comment\">// メソッド呼び出し</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> method <span class=\"token operator\">=</span> classType<span class=\"token punctuation\">.</span><span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"instance.GetName() = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// > instance.GetName() = Name1</span></code></pre></div>\n<p>ただし、事前に型がコンパイルする側に定義されている場合は、インスタンス生成後のメソッドやプロパティ呼び出し処理にわざわざリフレクションを用いなくてもよいです。</p>\n<p>具体的な例として、ゲームの敵を表す<code>IEnemy</code>インターフェイスを用意し（<code>GetNextEnemyAction</code>は次の敵の行動を取得するメソッドだとします。）、その実装クラスをランタイムでコンパイルしてインスタンス化して、<code>IEnemy</code>として扱うなど行うことができます。</p>\n<p><code>IEnemy</code>や<code>EnemyAction</code>、<code>TestEnemy</code>のクラスは下記とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// 敵行動を表す列挙型</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnemyAction</span>\n<span class=\"token punctuation\">{</span>\n    TurnLeft<span class=\"token punctuation\">,</span>\n    TurnRight<span class=\"token punctuation\">,</span>\n    GoStraight<span class=\"token punctuation\">,</span>\n    Attack<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 敵インターフェイス</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEnemy</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">EnemyAction</span> <span class=\"token function\">GetEnemyNextAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// このソースコードをコンパイルして、IEnemyとして扱いたいとする</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> SourceCodeTestEnemy <span class=\"token operator\">=</span> <span class=\"token string\">@\"\n    using SampleCompilingSourceAtRuntime;\n    public class TestEnemy : IEnemy\n    {\n        public EnemyAction GetEnemyNextAction()\n        {\n            return EnemyAction.GoStraight;\n        }\n    }\n\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記の<code>TestEnemy</code>をランタイムでコンパイルして、\b<code>IEnemy</code>として扱います。もちろん<code>GetEnemyNextAction</code>を（リフレクションなしで）呼び出す事ができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>\n    SourceCodeTestEnemy<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"TestEnemy.cs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"TestEnemy.dll\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> classType <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestEnemy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TestEnemyクラスをインスタンス化し、</span>\n<span class=\"token comment\">// IEnemyにキャストして扱う（もちろんこれは問題なく動く）</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enemy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>IEnemy<span class=\"token punctuation\">)</span>Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 次の行動を取得する。リフレクションなしでメソッド呼び出しできる</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> action <span class=\"token operator\">=</span> enemy<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnemyNextAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -> next action = GoStraight</span>\nSystem<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"next action = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">action</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記はつまり、ランタイムでコンパイルしたコードを、<strong>事前にコンパイルしたコードと(インスタンス化を除いて)同様のパフォーマンスで扱うことができる</strong>ということです。</p>\n<p><code>TestEnemy</code>はとてもシンプルなのでイメージが湧きづらいかもしれませんが、より実用的な用途としては、ゲームのエディタは起動しつつ、ランタイムでAIのコードをコンパイルし、ロジックを差し替えるホットリロードなどの用途にも利用できるのかもしれません。ただし、上記だとアセンブリのアンロードが不足しているので、そのへんが必要になりそうです。具体的には<a href=\"https://www.ayumax.net/entry/2019/12/10/000000\">.NET Coreでアセンブリをアンロードする - AYU MAX</a>が参考になりそうです。（ちゃんと調べられてないのでまたの機会に...）</p>\n<p>また、CMS（別にCMSに限らないですが）サービスのプラグイン機構などにもそのまま応用が効きそうです。</p>\n<p>補足として、<code>TestEnemy</code>をコンパイルするには、(Enumなどを利用するために)メタリファレンスとして下記が追加で必要になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">\n<span class=\"token comment\">// .NET標準のアセンブリは、概ね同じフォルダに入っているので、</span>\n<span class=\"token comment\">// どれか1つのファイルパスからディレクトリパスを割り出しておく。</span>\n<span class=\"token comment\">// 具体的に、だいたい下記のようなフォルダに入っている</span>\n<span class=\"token comment\">// /usr/local/share/dotnet/shared/Microsoft.NETCore.App/5.0.0</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assemblyDirectoryPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectoryName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">object</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> references <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MetadataReference<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token punctuation\">{</span>\n    MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">assemblyDirectoryPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/mscorlib.dll\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">assemblyDirectoryPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/System.Runtime.dll\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">object</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// IEnemyおよびEnemyActionを利用するのに必要</span>\n    MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SampleCompilingSourceAtRuntime<span class=\"token punctuation\">.</span>IEnemy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これは<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.enum?view=net-5.0\">System.Enum</a>を利用するのに外部アセンブリとして、mscorlib.dllおよびSystem.Runtime.dllが必要なためです。</p>\n<p>そのクラスがどのアセンブリが必要かどうかは、公式ドキュメントの<code>Namespace</code>下の<code>Assemblies</code>に書いてあります。(上記の<code>System.Enum</code>を確認すると、「mscorlib.dll,System.Runtime.dll」と書いてあることが確認できるかと思います。</p>\n<p>また、上記で利用した<code>Compile</code>メソッドは下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Assembly</span> <span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceCode<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceCodePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> assemblyName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assemblyDirectoryPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectoryName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">object</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> references <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MetadataReference<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n    <span class=\"token punctuation\">{</span>\n        MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">assemblyDirectoryPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/mscorlib.dll\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">assemblyDirectoryPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/System.Runtime.dll\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">object</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        MetadataReference<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SampleCompilingSourceAtRuntime<span class=\"token punctuation\">.</span>IEnemy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parseOptions <span class=\"token operator\">=</span> CSharpParseOptions<span class=\"token punctuation\">.</span>Default\n        <span class=\"token punctuation\">.</span><span class=\"token function\">WithLanguageVersion</span><span class=\"token punctuation\">(</span>LanguageVersion<span class=\"token punctuation\">.</span>CSharp8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> syntaxTree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>\n        sourceCode<span class=\"token punctuation\">,</span>\n        parseOptions<span class=\"token punctuation\">,</span>\n        sourceCodePath\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compilationOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CSharpCompilationOptions</span><span class=\"token punctuation\">(</span>\n        OutputKind<span class=\"token punctuation\">.</span>DynamicallyLinkedLibrary\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compilation <span class=\"token operator\">=</span> CSharpCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n        assemblyName<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> syntaxTree <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        references<span class=\"token punctuation\">,</span>\n        compilationOptions\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> emitResult <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span><span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token keyword\">in</span> emitResult<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pos <span class=\"token operator\">=</span> diagnostic<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">.</span><span class=\"token function\">GetLineSpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> location <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">+</span> <span class=\"token string\">\"@Line\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Line <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>StartLinePosition<span class=\"token punctuation\">.</span>Character <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Severity</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">location</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">diagnostic<span class=\"token punctuation\">.</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>emitResult<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Compile error occured.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> AssemblyLoadContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">LoadFromStream</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Roslynを用いてソースコードをランタイムでコンパイルして、それを実行する方法について紹介しました。</p>\n<h3 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"https://www.slideshare.net/shibuki/2014-0830-life-with-roslyn\">2014 08-30 life with roslyn(slideshare)</a></li>\n<li><a href=\"https://ufcpp.net/study/csharp/misc_roslyn.html\">[雑記] .NET Compiler Platform - C# によるプログラミング入門 | ++C++; // 未確認飛行 C</a></li>\n<li><a href=\"http://www.tugberkugurlu.com/archive/compiling-c-sharp-code-into-memory-and-executing-it-with-roslyn\">Compiling C# Code Into Memory and Executing It with Roslyn | Tugberk @ the Heart of Software</a></li>\n</ul>","excerpt":"C#で、ソースコードを実行中にコンパイルして、そのプログラム中でコンパイルしたクラスやメソッドを実行する方法を紹介します。 Roslynとは Roslynは.NETコンパイラプラットフォームの通称であり、C#やVisual Basic（、F#も？）のコンパイル・コード解析のためのAPIを提供します。 具体的には今回紹介するような動的なコンパイルであったり、コード解析(Roslyn Analyzerなどと呼ばれている)、OmniSharpというIDEのための言語機能提供のバックエンドもRoslyn…","fields":{"slug":"/2020/11/csharp-compile-sourcecode-runtime/"},"frontmatter":{"date":"November 24, 2020","type":null,"tags":["C#",".NET","Roslyn"],"title":"C#でソースをランタイムでコンパイルし、実行する","description":null,"eyecatch":null}}},"pageContext":{"id":"0066225d-53fe-508d-99a0-1d0ff0956d2e"}},"staticQueryHashes":["1480509143","3159585216"]}