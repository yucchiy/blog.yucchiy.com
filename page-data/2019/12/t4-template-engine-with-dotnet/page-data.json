{"componentChunkName":"component---src-templates-post-tsx","path":"/2019/12/t4-template-engine-with-dotnet/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<ul>\n<li>.NET CoreでT4を利用して実行時テキスト生成を行う</li>\n<li>どのようにテンプレートエンジンが動作しているかを確認する</li>\n</ul>\n<h2 id=\"セットアップ\" style=\"position:relative;\"><a href=\"#%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-label=\"セットアップ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>セットアップ</h2>\n<p>T4をセットアップし、簡単なテンプレートによるテキスト生成を行ってみます。\n.NET Coreでは、<a href=\"https://github.com/mono/t4\">Mono.TextTemplating</a>を利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet new console\n$ dotnet add package Mono.TextTemplating</code></pre></div>\n<p>これで、T4テンプレートを利用できます。\n<code>SampleTemplating.tt</code>というテンプレートファイルを作成してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;#@ template language=\"C#\" #>\n&lt;#@ assembly name=\"System.Core\" #>\n&lt;#@ import namespace=\"System.Linq\" #>\n&lt;#@ import namespace=\"System.Text\" #>\n&lt;#@ import namespace=\"System.Collections.Generic\" #>\n\nHello t4 template!</code></pre></div>\n<p>また、ランタイム時テキスト生成のために、下記の設定を<code>.csprroj</code>に追加します。\n下記は、Visual Studio for Macが生成した設定を抜粋しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;ItemGroup>\n    &lt;Compile Update=\"SampleTemplating.cs\">\n      &lt;DependentUpon>SampleTemplating.tt&lt;/DependentUpon>\n    &lt;/Compile>\n  &lt;/ItemGroup>\n  &lt;ItemGroup>\n    &lt;None Update=\"SampleTemplating.tt\">\n      &lt;Generator>TextTemplatingFilePreprocessor&lt;/Generator>\n      &lt;LastGenOutput>SampleTemplating.cs&lt;/LastGenOutput>\n    &lt;/None>\n  &lt;/ItemGroup></code></pre></div>\n<p>この設定の場合は、Visual Studioのファイル保存のタイミングで実施されるようなので、\nもしVisual Studio以外で開発していたり、コマンドライン実行のタイミングなどでテンプレートを動的につくりたい場合は、dotnet-t4-project-tool](<a href=\"https://www.nuget.org/packages/dotnet-t4-project-tool/)%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%81%A8%E8%89%AF%E3%81%84%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%E3%80%82\">https://www.nuget.org/packages/dotnet-t4-project-tool/)を利用すると良いでしょう。</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;ItemGroup>\n    &lt;DotNetCliToolReference Include=\"dotnet-t4-project-tool\" Version=\"2.0.5\" />\n  &lt;/ItemGroup></code></pre></div>\n<p><code>DotNetCliToolReference</code>を追加すると、dotnetのサブコマンドとして<code>t4</code>が生えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet restore\n$ dotnet t4 --help\nT4 text template processor version 2.0.5+gb7c3b777e4\nUsage: dotnet-t4 [options] input-file\n\nOptions:\n\n  -o, --out=&lt;file>           Name or path of the output &lt;file>. Defaults to\n                               the input filename with its extension changed to\n                               `.txt'. Use `-' to output to stdout.\n  -r=&lt;assembly>              Name or path of an &lt;assembly> reference.\n                               Assemblies will be resolved from the framework\n                               and the include folders\n  -u, --using=&lt;namespace>    Import a &lt;namespace>' statement with a `using\n  -I=&lt;directory>             Search &lt;directory> when resolving file includes\n  -P=&lt;directory>             Search &lt;directory> when resolving assembly\n                               references\n  -c, --class=&lt;name>         Preprocess the template into class &lt;name>\n  -p[=VALUE1=VALUE2]         Add a &lt;name>=&lt;value> key-value pair to the\n                               template's `Session' dictionary. These can also\n                               be accessed using strongly typed properties\n                               declared with `&lt;#@ parameter name=\"&lt;name>\"\n                               type=\"&lt;type>\" #> directives.\n      --debug                Generate debug symbols and keep temp files\n  -v, --verbose              Generate debug symbols and keep temp files\n  -h, -?, --help             Show help\n\nTextTransform.exe compatibility options (deprecated):\n\n      --dp=VALUE             Directive processor (name!class!assembly)\n  -a=VALUE                   Parameters (name=value) or\n                               ([processorName!][directiveName!]name!value)</code></pre></div>\n<p>ビルド前にT4のテンプレート生成を行っておくと便利です。<code>.csproj</code>を下記のように編集します。　</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;ItemGroup>\n    &lt;DotNetCliToolReference Include=\"dotnet-t4-project-tool\" Version=\"2.0.5\" />\n    &lt;PackageReference Include=\"Mono.TextTemplating\" Version=\"2.0.5\" />\n\n    &lt;TextTemplate Include=\"**\\*.tt\" />\n    &lt;Generated Include=\"**\\*.Generated.cs\" />\n  &lt;/ItemGroup>\n\n  &lt;Target Name=\"TextTemplateTransform\" BeforeTargets=\"BeforeBuild\">\n    &lt;Exec WorkingDirectory=\"$(ProjectDir)\" Command=\"dotnet t4 %(TextTemplate.Identity) -c $(RootNameSpace).%(TextTemplate.Filename) -o %(TextTemplate.Filename).Generated.cs\" />\n  &lt;/Target></code></pre></div>\n<p>最後に<code>Program.cs</code>で、テンプレートから生成したテキストを表示してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SampleTemplating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">TransformText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行すると、下記のようになり、テキストが生成できていることが確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet run\nHello T4 Template!</code></pre></div>\n<h2 id=\"生成されたクラスを追ってみる\" style=\"position:relative;\"><a href=\"#%E7%94%9F%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"生成されたクラスを追ってみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成されたクラスを追ってみる</h2>\n<p>T4がどのように動作しているか追ってみます。まずは、<code>SampleTemplating.tt</code>により生成されたクラスの一部を抜粋します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n    \n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleTemplating</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">SampleTemplatingBase</span></span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">TransformText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>GenerationEnvironment <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> 6 </span><span class=\"token string\">\"SampleTemplating.tt\"</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello T4 Template!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> default</span>\n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> hidden</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>GenerationEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>GenerationEnvironment</code>は<code>System.Text.StringBuilder</code>で、テンプレート内の文字列を連結して、文字列を生成しているようです。</p>\n<h3 id=\"変数を埋め込む\" style=\"position:relative;\"><a href=\"#%E5%A4%89%E6%95%B0%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80\" aria-label=\"変数を埋め込む permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>変数を埋め込む</h3>\n<p>では、テンプレートに対して、そとから与えらた変数を埋め込む場合はどうするのでしょうか。\n具体的にはテンプレートを下記のように修正します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;#@ template language=\"C#\" #>\n&lt;#@ assembly name=\"System.Core\" #>\n&lt;#@ import namespace=\"System.Linq\" #>\n&lt;#@ import namespace=\"System.Text\" #>\n&lt;#@ import namespace=\"System.Collections.Generic\" #>\n\nHello t4 template!\n\nAssigned value is &lt;#= {Value} =>.</code></pre></div>\n<p>生成されるクラスの<code>TransformText</code>メソッドは以下のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        public virtual string TransformText() {\n            this.GenerationEnvironment = null;\n\n            #line 6 \"SampleTemplating.tt\"\n            this.Write(\"Hello T4 Template!\\n\\nAssigned value is \");\n\n            #line default\n            #line hidden\n\n            #line 8 \"SampleTemplating.tt\"\n            this.Write(this.ToStringHelper.ToStringWithCulture( Value ));\n\n            #line default\n            #line hidden\n\n            #line 8 \"SampleTemplating.tt\"\n            this.Write(\"\\n\");\n\n            #line default\n            #line hidden\n            return this.GenerationEnvironment.ToString();\n        }</code></pre></div>\n<p>テンプレート変数として定義した<code>Value</code>を<code>SampleTemplating</code>クラスのプロパティとして展開しています。\nまた、テンプレートから生成されたクラスは、partialで定義されているため、<code>SampleTemplating.cs</code>を下記のように定義することで、\n変数を外から渡すことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleTemplating</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SampleTemplating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            template<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">TransformText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>dotnet run</code>を実行することで、外から渡した<code>\"Hoge\"</code>が埋め込まれていることが確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet run\nHello T4 Template!\n\nAssigned value is Hoge</code></pre></div>\n<h3 id=\"制御構文を使ってみる\" style=\"position:relative;\"><a href=\"#%E5%88%B6%E5%BE%A1%E6%A7%8B%E6%96%87%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"制御構文を使ってみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>制御構文を使ってみる</h3>\n<p>ここまでくると、だいたい想像がつくかと思いますが、<code>foreach</code>を利用してみて、制御構文がどう展開されているか確認してみます。\n<code>SampleTemplating.tt</code>に下記のようなテンプレートを記載します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;#\nforeach (var val in Ary)\n{\n#>\n\n&lt;#= val #>\n\n&lt;#\n}\n#></code></pre></div>\n<p><code>SampleTemplating.Generated.cs</code>の<code>foreach</code>部は以下のように展開されていました。\nわりとそのままテンプレート部が展開されているのが分ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> 10 </span><span class=\"token string\">\"SampleTemplating.tt\"</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token keyword\">in</span> Ary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> default</span>\n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> hidden</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> 14 </span><span class=\"token string\">\"SampleTemplating.tt\"</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> default</span>\n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> hidden</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> 15 </span><span class=\"token string\">\"SampleTemplating.tt\"</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ToStringHelper<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringWithCulture</span><span class=\"token punctuation\">(</span> val <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">line</span> default</span></code></pre></div>\n<p><code>SampleTemplating.cs</code>と<code>Program.cs</code>を下記のように修正し、実行することで、繰り返し構文の動作が確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">\n<span class=\"token comment\">// SampleTemplating.cs</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleTemplating</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Ary <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Program.cs</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">T4RuntimeTextGeneration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SampleTemplating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            template<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">;</span>\n            template<span class=\"token punctuation\">.</span>Ary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"third\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">TransformText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet run\nHello T4 Template!\n\nAssigned value is Hoge\n\n\nfirst\n\n\nsecond\n\n\nthird</code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>テンプレートエンジンであるT4を.NET Coreで動かし、ランタイム時テキスト生成を試しました。\nまた、生成されるクラスの中を読み解き、テンプレートエンジンの動作を確認しました。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/visualstudio/modeling/run-time-text-generation-with-t4-text-templates?view=vs-2019\">T4 テキスト テンプレートを使用した実行時テキスト生成</a></li>\n<li><a href=\"https://qiita.com/nogic1008/items/2c4049d43a11e83df15b\">.NET Core+VS CodeでもT4 テンプレートエンジンでコード生成したい！</a></li>\n<li><a href=\"http://neue.cc/2019/12/06_585.html\">.NET Core時代のT4によるC#のテキストテンプレート術</a></li>\n</ul>","excerpt":"概要 .NET CoreでT4を利用して実行時テキスト生成を行う どのようにテンプレートエンジンが動作しているかを確認する セットアップ T4をセットアップし、簡単なテンプレートによるテキスト生成を行ってみます。\n.NET Coreでは、Mono.TextTemplatingを利用します。 これで、T4テンプレートを利用できます。\nSampleTemplating.ttというテンプレートファイルを作成してみます。 また、ランタイム時テキスト生成のために、下記の設定を.csprroj…","fields":{"slug":"/2019/12/t4-template-engine-with-dotnet/"},"frontmatter":{"date":"December 07, 2019","type":null,"tags":["Tips","C#",".NET Core","Template Engine"],"title":".NET CoreでのT4の利用と、実行時テキスト生成の挙動を追ってみる","description":null,"eyecatch":null}}},"pageContext":{"id":"5c3b74f5-b968-550a-82a8-3f0f704c563f"}},"staticQueryHashes":["1480509143","3159585216"]}