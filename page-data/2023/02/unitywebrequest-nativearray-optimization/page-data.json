{"componentChunkName":"component---src-templates-post-tsx","path":"/2023/02/unitywebrequest-nativearray-optimization/","result":{"data":{"markdownRemark":{"html":"<p>去年のC#アドベントカレンダーで、<a href=\"https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/\">System.Text.Jsonのソース生成をUnityで試す | Yucchiy's Note</a>という記事を書きました。</p>\n<p>この記事中で、<code>DownloadHandler.nativeData</code>を用いてJSONシリアライズ時のコピー回避による最適化について触れていましたが、こちらについてもう少し詳しく触れておきたいと思います。</p>\n<p>記事中の実装は、Unity 2021.3.16f1で検証しています。</p>\n<h2 id=\"downloadhandlerでのデータの取り扱いについて\" style=\"position:relative;\"><a href=\"#downloadhandler%E3%81%A7%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"downloadhandlerでのデータの取り扱いについて permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DownloadHandlerでのデータの取り扱いについて</h2>\n<p>UnityでHTTP通信を行うための<a href=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Networking.UnityWebRequest.html\">UnityWebRequest</a>では、実際にダウンロードされたデータを<code>DownloadHandler</code>クラスを経由して扱うことができます。</p>\n<p><code>DownloadHandler</code>ダウンロードしたデータを取得するためのAPIが<code>text</code>・<code>data</code>・<code>nativeData</code>と、3つあります。</p>\n<p><code>text</code>はダウンロードしたデータをUTF8文字列として返却します。2021.3時点では、<code>text</code>プロパティは内部的に<code>GetText</code>メソッドを呼び出していますが、このメソッドは下記のような実装になっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">unsafe</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">NativeArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span> nativeData <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetNativeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> nativeData<span class=\"token punctuation\">.</span>IsCreated <span class=\"token operator\">&amp;&amp;</span> nativeData<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span>\n        <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">sbyte</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> nativeData<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetUnsafeReadOnlyPtr</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nativeData<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetTextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>unsafeなどがあって若干ややこしいですが、元データ（<code>this.GetNativeData()</code>で取得した<code>NativeArray&#x3C;byte></code>）からstringを生成して返却しています。</p>\n<p><code>data</code>はデータのバイナリデータを<code>byte[]</code>として返却します。<code>data</code>プロパティは<code>GetData</code>メソッドを呼び出していますが、このメソッドは内部的に<code>InternalGetByteArray</code>を呼び出しています。下記がその実装です。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">InternalGetByteArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DownloadHandler</span> dh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">NativeArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span> nativeData <span class=\"token operator\">=</span> dh<span class=\"token punctuation\">.</span><span class=\"token function\">GetNativeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token return-type class-name\">nativeData<span class=\"token punctuation\">.</span>IsCreated <span class=\"token punctuation\">?</span></span>\n        nativeData<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>ToArray()</code>は<code>NativeArray&#x3C;T></code>の内部で保持しているデータをコピーして配列として返却します。下記の実装になっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    NativeArray<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一方で、<code>nativeData</code>も<code>data</code>と同様にバイナリデータを返却します。では<code>data</code>との違いは？というと、<code>data</code>は<code>byte[]</code>を返すのですが<code>nativeData</code>は元データを<code>NativeArray&#x3C;byte>.ReadOnly</code>として返却します。</p>\n<p>このとき<code>nativeData</code>は、<a href=\"https://docs.unity3d.com/ja/2021.2/ScriptReference/Networking.DownloadHandler-nativeData.html\">ドキュメントにある通り</a>をアロケーションフリーで元データを返却します。</p>\n<p>エンジン側で確保された<code>byte</code>配列なのですが、その領域を直接指し示す<code>NativeArray&#x3C;byte>.RaadOnly</code>を返却します。C#側で安全に扱える元データのポインターを返す、といったイメージでしょうか。</p>\n<p>長々と説明しましたが、まとめると<code>data</code>や<code>text</code>は元データを<strong>コピーして返却する</strong>のに対して、<code>nativeData</code>は元データの参照を<code>NativeArray&#x3C;T>.ReadOnly</code>を返すことで、<strong>元データのコピーを回避できます</strong>。</p>\n<h2 id=\"nativearraytからspantへの変換\" style=\"position:relative;\"><a href=\"#nativearrayt%E3%81%8B%E3%82%89spant%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B\" aria-label=\"nativearraytからspantへの変換 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>NativeArray&#x3C;T></code>から<code>Span&#x3C;T></code>への変換</h2>\n<p><code>NativeArray&#x3C;T></code>は文字通り配列のため、下記のような処理で<code>Span&#x3C;T></code>として扱えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">unsafe</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> uwr<span class=\"token punctuation\">.</span>nativeData<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span> span <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">GetUnsafeReadOnlyPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Unity 2022.2以降では、<code>NativeArray&#x3C;T></code>に<code>AsSpan</code>メソッドが用意されました。このメソッドはunsafeでないため、下記のようにunsafe外でも普通に利用できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> uwr<span class=\"token punctuation\">.</span>nativeData<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span> span <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">AsReadOnlySpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>参考: <a href=\"https://www.hanachiru-blog.com/entry/2022/12/19/120000\">【Unity】NativeArray<T>からSpan<T>へ変換する方法(2022.2以前はunsafe, 2022.2以降はAsSpan) - はなちるのマイノート</a>\n参考: <a href=\"https://qiita.com/Gaku_Ishii/items/23d85defb8339fe3e9c0#spant1\">Unity 2021.2 から新しく使えるようになったC#のクラスを眺める - Qiita</a></p>\n<h2 id=\"spantを経由したシリアライザーのコピー回避\" style=\"position:relative;\"><a href=\"#spant%E3%82%92%E7%B5%8C%E7%94%B1%E3%81%97%E3%81%9F%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%B6%E3%83%BC%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC%E5%9B%9E%E9%81%BF\" aria-label=\"spantを経由したシリアライザーのコピー回避 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Span&#x3C;T></code>を経由した、シリアライザーのコピー回避</h2>\n<p>UnityWebRequestでダウンロードしたデータを、<code>nativeData</code>を用いてコピーフリーでアクセスでき、さらに<code>NativeArray&#x3C;T></code>を<code>Span&#x3C;T></code>に変換することで、<code>Span&#x3C;T></code>として引き回せることがわかりました。</p>\n<p>では、これでなにが嬉しいのかというと、JSONやMessagePackなどのシリアライザーが<code>Span&#x3C;T></code>を受け取る口さえあれば、<strong>UnityWebRequestが確保した元データをコピー無しで直接渡すことができる点</strong>です。</p>\n<p>たとえばSystem.Text.Jsonパッケージの<code>JsonSerializer</code>のデシリアライズメソッドは、<code>ReadOnlySpan&#x3C;byte></code>を<a href=\"https://learn.microsoft.com/ja-jp/dotnet/api/system.text.json.jsonserializer.deserialize?view=net-7.0#system-text-json-jsonserializer-deserialize(system-readonlyspan((system-byte))-system-type-system-text-json-jsonserializeroptions)\">受け取るメソッド</a>があります。このメソッドに、下記のように<code>nativeData</code>を渡すことで、<code>data</code>と比べて配列コピーのアロケーションコストを抑えることができます。</p>\n<p>System.Text.Jsonなどの利用方法については、<a href=\"https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/#serializetoutf8bytes%E3%81%AB%E3%82%88%E3%82%8Butf-8%E3%83%90%E3%82%A4%E3%83%88%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA\">こちらの記事</a>にて詳細を確認ください。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// handlerはDownloadHandlerとする</span>\n\n<span class=\"token comment\">// UTF-8バイト配列をデシリアライズ</span>\n<span class=\"token comment\">// JSONの場合はUTF-8という前提で</span>\nProfiler<span class=\"token punctuation\">.</span><span class=\"token function\">BeginSample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From UTF-8 Bytes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> utf8Bytes <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    utf8Bytes<span class=\"token punctuation\">,</span>\n    ProductJsonContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nProfiler<span class=\"token punctuation\">.</span><span class=\"token function\">EndSample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// UTF-8バイト配列を、元のデータを直接参照してデシリアライズ</span>\n<span class=\"token comment\">// このとき元配列をコピーしないので、その分アロケーションコストが抑えられる</span>\nProfiler<span class=\"token punctuation\">.</span><span class=\"token function\">BeginSample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From UTF-8 Bytes With Native Array\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsafe</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> utf8BytesSpan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n        handler<span class=\"token punctuation\">.</span>nativeData<span class=\"token punctuation\">.</span><span class=\"token function\">GetUnsafeReadOnlyPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        handler<span class=\"token punctuation\">.</span>nativeData<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n        utf8BytesSpan<span class=\"token punctuation\">,</span> ProductJsonContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nProfiler<span class=\"token punctuation\">.</span><span class=\"token function\">EndSample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://blog.yucchiy.com/static/d6e86e797a3aa87538638513c21a79d6/66caf/ED3DEAB5B24E6396C6D5ECE01FB5237B.png\" alt=\"「From UTF-8 Bytes」より「From UTF-8 Bytes With Native Array」のほうがGC Allocを抑えられていることが確認できる\"></p>\n<p>当然ですが、他のシリアライザーでも、<code>Span&#x3C;byte></code>を渡すAPIさえあればこのテクニックは利用できます。たとえば、C#向けのシリアライザーである<a href=\"https://github.com/cysharp/memorypack\">MemoryPack</a>では下記のように実装できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// 下記クラスがあるとして...</span>\n<span class=\"token punctuation\">[</span>MemoryPackable<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// APIからMemoryPackバイナリがふってきているとする</span>\n<span class=\"token comment\">// 2022.2からはAsSpanを用いて、とてもシンプルに扱える</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span>nativeData<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>UnityWebRequestの<code>DownloadHandler.nativeData</code>について<code>data</code>との違いを説明しつつ、その実用例として、コピーコストを抑える最適化事例を紹介しました。\n2022.2では、<code>NativeArray&#x3C;T>.AsSpan()</code>が入ることによって、<code>NativeArray&#x3C;T></code>と<code>Span&#x3C;T></code>の変換も簡単になることも説明しました。</p>","excerpt":"去年のC#アドベントカレンダーで、System.Text.Jsonのソース生成をUnityで試す | Yucchiy's Noteという記事を書きました。 この記事中で、DownloadHandler.nativeDataを用いてJSONシリアライズ時のコピー回避による最適化について触れていましたが、こちらについてもう少し詳しく触れておきたいと思います。 記事中の実装は、Unity 2021.3.16f1で検証しています。 DownloadHandlerでのデータの取り扱いについて Unity…","fields":{"slug":"/2023/02/unitywebrequest-nativearray-optimization/"},"frontmatter":{"date":"February 22, 2023","type":"tech","tags":["Unity","UnityWebRequest","最適化"],"title":"UnityWebRequestのDownloadHandler.nativeDataを用いたコピーの回避による最適化について","description":"UnityWebRequestのDownloadHandler.nativeDataについてとNativeArray<T>からSpan<T>への変換、それらを用いたコピー回避の最適化について紹介します。","eyecatch":null}}},"pageContext":{"id":"a4b94247-ef71-5cef-b9d4-c68211022cc7"}},"staticQueryHashes":["1480509143","3159585216"]}