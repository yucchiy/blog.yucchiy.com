{"componentChunkName":"component---src-templates-post-tsx","path":"/2023/04/awaitable-api-asyncoperationawaitableextensions/","result":{"data":{"markdownRemark":{"html":"<p>keijiroさんの<a href=\"https://github.com/keijiro/AsyncAwaitTest\">AsyncAwaitTest</a>レポジトリをのぞいていると、下記のようにUnityWebRequestのHTTPリクエストなどの非同期処理がawait可能なことに気づきました。</p>\n<p><a href=\"https://github.com/keijiro/AsyncAwaitTest/blob/main/Assets/WebRequestSample.cs\">AsyncAwaitTest/WebRequestSample.cs at main · keijiro/AsyncAwaitTest · GitHub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">UnityWebRequest</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">UnityEngine<span class=\"token punctuation\">.</span>Networking<span class=\"token punctuation\">.</span>UnityWebRequest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebRequestSample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _uri <span class=\"token operator\">=</span> <span class=\"token string\">\"https://unity.com\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> req <span class=\"token operator\">=</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>_uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">req<span class=\"token punctuation\">.</span>result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">req<span class=\"token punctuation\">.</span>downloadedBytes</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> bytes\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>標準でかなりスッキリとasync/awaitの処理がかけるようになったんだと思いつつ、これがどう実装されているんだろうと気になり、その動作原理（というほどたいそうなものではないけど）を調べてみました。</p>\n<h2 id=\"unityの非同期処理とasyncoperation\" style=\"position:relative;\"><a href=\"#unity%E3%81%AE%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%A8asyncoperation\" aria-label=\"unityの非同期処理とasyncoperation permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unityの非同期処理とAsyncOperation</h2>\n<p>Unityで非同期処理を行うメソッドの多くは<code>AsyncOperation</code>か、それを継承した型の戻り値を返します。\n処理は非同期で行われますが、この型の<code>isDone</code>というプロパティを監視し続けることで、処理の終了タイミングがわかります。</p>\n<p>たとえばコルーチンを用いてUnityWebRequestのリクエストを非同期で行うには、下記のように記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> request <span class=\"token operator\">=</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>_uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AsyncOperation</span> operation <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>operation<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 処理実行中</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 処理完了</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">request<span class=\"token punctuation\">.</span>result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">request<span class=\"token punctuation\">.</span>downloadedBytes</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> bytes\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ただし、<strong><code>AsyncOperation</code>はawaitできません</strong>。</p>\n<h2 id=\"awaitableとasyncoperationawaitableextensions\" style=\"position:relative;\"><a href=\"#awaitable%E3%81%A8asyncoperationawaitableextensions\" aria-label=\"awaitableとasyncoperationawaitableextensions permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AwaitableとAsyncOperationAwaitableExtensions</h2>\n<p>では、はじめに紹介したUnityWebRequestのawaitはどのように実現しているのかというと、下記のようなUnity 2023.1には<code>AsyncOperationAwaitableExtensions.GetAwaiter</code>という<code>AsyncOperation</code>に対する拡張メソッドが<code>UnityEngine</code>名前空間内に実装されているためです。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">UnityEngine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncOperationAwaitableExtensions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ExcludeFromDocs</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MethodImpl</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>MethodImplOptions<span class=\"token punctuation\">.</span>AggressiveInlining<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Awaitable<span class=\"token punctuation\">.</span>Awaiter</span> <span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">AsyncOperation</span> op<span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">=></span> Awaitable<span class=\"token punctuation\">.</span><span class=\"token function\">FromAsyncOperation</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この拡張メソッドでは<code>AsyncOperation</code>を<code>Awaitable</code>型に変換しています。\n<code>Awaitable</code>はUnity 2023.1で実装された、メインスレッド上で非同期処理を行うためのAPIですが、この型が<code>GetAwaiter</code>メソッドを実装しているためawait可能です。（参考: <a href=\"https://ufcpp.net/study/csharp/sp5_awaitable.html\">非同期メソッドの内部実装 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C</a>）</p>\n<p>これにより、間接的に**<code>AsyncOperation</code>がawait可能になったということです**。</p>\n<p>先述の通りUnityの非同期処理の多くは<code>AsyncOperation</code>か、それを基底にした型を返す（UnityWebRequestなら<code>UnityWebRequestAsyncOperation</code>を、<code>SceneManager.LoadSceneAsync</code>は直接<code>AsyncOperation</code>を返す）ので、標準APIの非同期処理の多くはawait可能になったといえます。</p>\n<p>ちなみに余談ですが、GPU処理を非同期に実行する<code>AsyncGPUReadback</code>は、下記のように<code>Awaitable&#x3C;AsyncGPUReadbackRequest></code>を返却する<code>RequestAsync</code>メソッドが新設されているようです。</p>\n<ul>\n<li><a href=\"https://docs.unity.cn/ja/2023.2/ScriptReference/Rendering.AsyncGPUReadback.RequestAsync.html\">Rendering.AsyncGPUReadback-RequestAsync - Unity スクリプトリファレンス</a></li>\n<li><a href=\"https://github.com/keijiro/AsyncAwaitTest/blob/main/Assets/AsyncReadbackSample.cs#L24\">AsyncAwaitTest/AsyncReadbackSample.cs at main · keijiro/AsyncAwaitTest · GitHub</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> frameCount <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>frameCount<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> AsyncGPUReadback<span class=\"token punctuation\">.</span><span class=\"token function\">RequestAsync</span><span class=\"token punctuation\">(</span>_texture<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>frameCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetData</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Color32<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この実装から、今後実装されるUnityの非同期処理については<code>Awaitable</code>を直接返却するAPIも合わせて提供される可能性がありそうです。</p>\n<h2 id=\"asyncoperationにcancellationtokenを渡す\" style=\"position:relative;\"><a href=\"#asyncoperation%E3%81%ABcancellationtoken%E3%82%92%E6%B8%A1%E3%81%99\" aria-label=\"asyncoperationにcancellationtokenを渡す permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncOperationにCancellationTokenを渡す</h2>\n<p><code>AsyncOperationAwaitableExtensions</code>経由で<code>AsyncOperation</code>を直感的にawaitできることがわかりましたが、注意点としては<code>CancellationToken</code>を渡すことができていない点です。</p>\n<p>これは、<code>AsyncOperationAwaitableExtensions.GetAwaiter(this AsyncOperation op)</code>が内部で呼び出している<code>Awaitable.FromAsyncOperation</code>が下記のように第2引数で<code>CancellationToken</code>を受け取るため、こちらを直接呼び出すことで実現できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">///   &lt;para>Creates an Awaitable from an existing AsyncOperation object.&lt;/para></span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token comment\">/// &lt;param name=\"op\">Async operation object.&lt;/param></span>\n<span class=\"token comment\">/// &lt;param name=\"cancellationToken\">Optional cancellation token.&lt;/param></span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">MethodImpl</span><span class=\"token punctuation\">(</span>MethodImplOptions<span class=\"token punctuation\">.</span>AggressiveInlining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Awaitable</span> <span class=\"token function\">FromAsyncOperation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">AsyncOperation</span> op<span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">CancellationToken</span> cancellationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CancellationToken</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cancellationToken<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfCancellationRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Awaitable<span class=\"token punctuation\">.</span><span class=\"token function\">FromNativeAwaitableHandle</span><span class=\"token punctuation\">(</span>Awaitable<span class=\"token punctuation\">.</span><span class=\"token function\">FromAsyncOperationInternal</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>m_Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>具体的には下記のように記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> request <span class=\"token operator\">=</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://unity.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// たとえばゲームオブジェクトのライフサイクルに紐付いたCancellationTokenを渡す</span>\n    <span class=\"token keyword\">await</span> Awaitable<span class=\"token punctuation\">.</span><span class=\"token function\">FromAsyncOperation</span><span class=\"token punctuation\">(</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> destroyCancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"余談-unitaskでのgetawaiter\" style=\"position:relative;\"><a href=\"#%E4%BD%99%E8%AB%87-unitask%E3%81%A7%E3%81%AEgetawaiter\" aria-label=\"余談 unitaskでのgetawaiter permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>余談: UniTaskでのGetAwaiter</h2>\n<p>UniTaskでもUnityWebRequestを下記のようにawaitできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> txt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>downloadHandler<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span></code></pre></div>\n<p>これもAwaitable APIと同様、下記の<code>UnityAsyncExtensions.GetAwaiter</code>という拡張メソッドが用意されています。これにより<code>AsyncOperation</code>から<code>UniTask</code>への変換が行われます。</p>\n<p><a href=\"https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/UnityAsyncExtensions.cs#L21\">UniTask/UnityAsyncExtensions.cs at master · Cysharp/UniTask · GitHub</a></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Cysharp<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnityAsyncExtensions</span>\n    <span class=\"token punctuation\">{</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> !UNITY_2023_1_OR_NEWER</span>\n        <span class=\"token comment\">// from Unity2023.1.0a15, AsyncOperationAwaitableExtensions.GetAwaiter is defined in UnityEngine.</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">AsyncOperationAwaiter</span> <span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">AsyncOperation</span> asyncOperation<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Error<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowArgumentNullException</span><span class=\"token punctuation\">(</span>asyncOperation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>asyncOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AsyncOperationAwaiter</span><span class=\"token punctuation\">(</span>asyncOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>（つまりUnity 2023.1以降は、本来<code>UniTask</code>に変換される箇所が<code>Awaitable</code>に変換されるので地味に困る場所がある？）</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code>AsyncOperation</code>を<code>Awaitable</code>に変換することでawait可能にする<code>AsyncOperationAwaitableExtensions.GetAwaiter</code>メソッドの紹介と、その動作について解説しました。</p>","excerpt":"keijiroさんのAsyncAwaitTestレポジトリをのぞいていると、下記のようにUnityWebRequestのHTTPリクエストなどの非同期処理がawait可能なことに気づきました。 AsyncAwaitTest/WebRequestSample.cs at main · keijiro/AsyncAwaitTest · GitHub 標準でかなりスッキリとasync/await…","fields":{"slug":"/2023/04/awaitable-api-asyncoperationawaitableextensions/"},"frontmatter":{"date":"April 10, 2023","type":"tech","tags":["Unity","Awaitable API","Unity 2023"],"title":"AsyncOperationAwaitableExtensionsで、AsyncOperationをawaitableにする","description":"AsyncOperationは標準でawaitできませんが、Unity 2023ではAsyncOperationAwaitableExtensionsによってAsyncOperationがAwaitableに変換され、これによりawaitできるようになります。これについてその動作原理を説明します。","eyecatch":null}}},"pageContext":{"id":"75c73850-c0a3-545c-99a9-b697cc2fdb8e"}},"staticQueryHashes":["1480509143","3159585216"]}