{"componentChunkName":"component---src-templates-post-tsx","path":"/2023/01/memorypack-custom-serialize-deserialize/","result":{"data":{"markdownRemark":{"html":"<p>あけましておめでとうございます。2023年1記事はMemoryPackの小ネタです。</p>\n<p>MemoryPackで、独自型のシリアライズやデシリアライズをカスタマイズする方法をいくつか紹介します。</p>\n<h2 id=\"シリアライズデシリアライズをカスタマイズしたいとき\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E3%83%87%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D\" aria-label=\"シリアライズデシリアライズをカスタマイズしたいとき permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ・デシリアライズをカスタマイズしたいとき</h2>\n<p>そのまま保存する場合はフォーマッターを自作する必要はありません。たとえば下記のような<code>Player</code>クラスを考えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span> Weapons <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Weapon</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Power <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// その他ゲームに関する様々なパラメータがあるとする</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>Player</code>が装備している武器は<code>Weapons</code>変数が所持しています。ここで<code>Weapon</code>はゲームのマスターデータなどのデータベースから取得できるとします。その時のキーとして<code>Id</code>が利用できるとします。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// たとえばこういうデータベースクラスがあるとする</span>\n<span class=\"token comment\">// 簡単のためにstaticで定義した。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeaponDatabase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Weapon</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ナイフ\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"短剣\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"長剣\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// こんな感じでとれるとする</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> weapon <span class=\"token operator\">=</span> WeaponDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>このような状況では、 <code>Player</code>側で<code>Weapons</code>の内容をすべて保存する必要はなく、 <code>Player</code>クラスのシリアライズ・デシリアライズは下記のように行えるのが良いでしょう。</p>\n<ol>\n<li><code>Weapons</code>に入っているそれぞれのIDの一覧をシリアライズしておく</li>\n<li>デシリアライズ時に1.で保存したIDの一覧から<code>Weapons</code>を復元する</li>\n</ol>\n<p>このような要件に対して、MemoryPackではいくつか思いつく対応方法を紹介します。</p>\n<h3 id=\"シリアライズデシリアライズ時のコールバックを利用する\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E3%83%87%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E6%99%82%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\" aria-label=\"シリアライズデシリアライズ時のコールバックを利用する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ・デシリアライズ時のコールバックを利用する</h3>\n<p>MemoryPackではシリアライズ・デシリアライズの前後のタイミングをフックして、独自の処理を差し込むことができます。具体的には<code>MemoryPackable</code>なクラスの静的メソッドに<code>MemoryPackOnSerializing</code>や<code>MemoryPackOnDeserialized</code>などの属性をつけることで、そのメソッドが呼び出されるようになります。</p>\n<p>詳細については、MemoryPackドキュメントの「<a href=\"https://github.com/Cysharp/MemoryPack#serialization-callbacks\">Serialization callbacks</a>」が参考になりますが、簡単にまとめると下記の順番で呼び出されます。</p>\n<ul>\n<li>シリアライズ\n<ol>\n<li><code>MemoryPackOnSerializing</code> がついたメソッド</li>\n<li>MemoryPackのシリアライズ</li>\n<li><code>MemoryPackOnSerialized</code> がついたメソッド</li>\n</ol>\n</li>\n<li>デシリアライズ\n<ol>\n<li><code>MemoryPackOnDeserializing</code> がついたメソッド</li>\n<li>MemoryPackのデシリアライズ</li>\n<li><code>MemoryPackOnDeserialized</code> がついたメソッド</li>\n</ol>\n</li>\n</ul>\n<p><code>~ing</code> がついたメソッドが前処理として、 <code>~ed</code> がついたメソッドが後処理として呼ばれると理解しておくと良いでしょう。</p>\n<p>また静的メソッドは <code>ref reader/writer</code> および <code>ref T? value</code> を引数に取れます。</p>\n<h3 id=\"シリアライズ用のプロパティフィールドを用意して対応\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E7%94%A8%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E7%94%A8%E6%84%8F%E3%81%97%E3%81%A6%E5%AF%BE%E5%BF%9C\" aria-label=\"シリアライズ用のプロパティフィールドを用意して対応 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ用のプロパティ・フィールドを用意して対応</h3>\n<p>これを利用して、下記のようなコードを記述することで<code>Weapons</code>の<code>Id</code>一覧をシリアライズし、デシリアライズ時に<code>Id</code>一覧から<code>Weapons</code>を復元できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">MemoryPack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Weaponsそのものはシリアライズしない</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackIgnore</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span> Weapons <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 代わりにId一覧をシリアライズする</span>\n    <span class=\"token comment\">// こっちは外から参照されなくていいのでprivateで定義</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackInclude</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> WeaponIds <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// MemoryPackのシリアライズが行われる前に呼び出される</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">voidOnSerializing</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player1<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// WeaponsからId配列を作成する</span>\n        <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>WeaponIds <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Weapons\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">=></span> w<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// このメソッド呼び出し後に、MemoryPackの実際のシリアライズが行われる</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// MemoryPackのデシリアライズが行われた後に呼び出される</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserialized</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">voidOnDeserialized</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player1<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Id配列からWeaponsを復元</span>\n        <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>WeaponIds<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>WeaponDatabase<span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>Weapons</code>はシリアライズ対象に含めないので<code>MemoryPackIgnore</code> を、<code>WeaponIds</code>は<code>Weapons</code>のID一覧をシリアライズするためのプロパティとして定義して<code>MemoryPackInclude</code>を入れています。</p>\n<p><code>MemoryPackOnSerializing</code>をフックして<code>WeaponIds</code>へIDの詰め込みを行っています。ポイントとしては<code>MemoryPackOnSerializing</code>で<strong>シリアライズ手前</strong>をフックしている点です。</p>\n<p><code>MemoryPackOnSerialized</code>だとシリアライズが終わっているためここでIDを詰め込んでも正しくシリアライズが行われません。逆にデシリアライズ時は後処理で<code>Weapons</code>を復元します。デシリアライズ手前ではまだ <code>WeaponIds</code> が復元されてないためです（というかこの時点では<code>value</code>自体も空）。</p>\n<p>このように、シリアライズ用のプロパティなどを用意して、そちらにシリアライズ時に詰め替えを行うといった手法で要件を満たせます。</p>\n<h3 id=\"シリアライズデシリアライズ時に独自のバイナリを書き出し読み出して対応\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E3%83%87%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E6%99%82%E3%81%AB%E7%8B%AC%E8%87%AA%E3%81%AE%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%92%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%97%E8%AA%AD%E3%81%BF%E5%87%BA%E3%81%97%E3%81%A6%E5%AF%BE%E5%BF%9C\" aria-label=\"シリアライズデシリアライズ時に独自のバイナリを書き出し読み出して対応 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ・デシリアライズ時に独自のバイナリを書き出し・読み出して対応</h3>\n<p>Player側にシリアライズ用のプロパティやフィールドをわざわざ用意するのもなー、という場合は、MemoryPackのシリアライズ時に独自のバイナリを追記してやるという方法も使えそうです。</p>\n<p>具体的には下記の手順で対応します。</p>\n<ol>\n<li>シリアライズ時に<code>MemoryPackOnSerialized</code>をフックして、 <code>Weapons</code>からID配列を生成してそれを追記する</li>\n<li>デシリアライズ時に<code>MemoryPackOnDeserialized</code>をフックして、1.で書き出したバイナリからID配列をデシリアライズして、そこから<code>Weapons</code>を復元する</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">MemoryPack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 今回もこちらはシリアライズしないので</span>\n    <span class=\"token comment\">// MemoryPackIgnore</span>\n    <span class=\"token punctuation\">[</span>MemoryPackIgnore<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span> Weapons <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerialized</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSerialized</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player2<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ID配列を直接MemoryPackWriterで配列として追記する</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteArray</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">=></span> w<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserialized</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeserialized</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player2<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 追記しておいたID配列を読み込み</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ids <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// そこからWeaponsを復元</span>\n        <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>\n            ids<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>WeaponDatabase<span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>シリアライズでは<code>MemoryPackOnSerialized</code>時に<code>MemoryPackWriter</code>を介して独自のバイナリを書き出しておき、デシリアライズでは<code>MemoryPackOnDeserialized</code>時に<code>MemoryPackReader</code>を介してそのバイナリを読みます。</p>\n<p>このようにMemoryPackでは独自のバイナリを付与したり読み込んだりが比較的簡単にできますが、独自のバイナリ書き込みはMemoryPackの枠組みを超えた処理となるため要注意です。順番を間違えたり、読み込みと書き込みの数やフィールド数が不一致するとシリアライズやデシリアライズに失敗するためです。</p>\n<p>MemoryPackはこの複雑な低レベルな処理を、SourceGeneratorで自動化することで安全に扱えるようにしているため、特別なことがない限りは先述したシリアライズ用のプロパティやフィールドを用意するなどの対応が良さそうではあります。</p>\n<h2 id=\"シリアライズ対象はシンプルなクラスとして扱いたい問題\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E5%AF%BE%E8%B1%A1%E3%81%AF%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A8%E3%81%97%E3%81%A6%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84%E5%95%8F%E9%A1%8C\" aria-label=\"シリアライズ対象はシンプルなクラスとして扱いたい問題 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ対象はシンプルなクラスとして扱いたい問題</h2>\n<p>設計思想によっては、シリアライズ対象はシリアライズロジックに依存したくないという話はあると思います。</p>\n<p>たとえば上記の<code>Player</code>自身に<code>MemoryPackable</code>や<code>MemoryPackIgnore</code>とかつけたくないとか、そもそもID配列だけシリアライズしてみたいなロジックは知りたくないというか。</p>\n<p>さらにいうと今回staticに定義した<code>WeaponDatabase</code>はデータベースに関する処理で、 <code>Player</code>や<code>Weapon</code>とは別アセンブリで定義したい、<code>Player</code>は<code>WeaponDatabase</code>を知りたくない、というのは普通にありそうな話です。</p>\n<p>その場合は、シリアライズ用の型を用意することで対応できます。</p>\n<h3 id=\"シリアライズ用の型を用意して対応するパターン\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA%E7%94%A8%E3%81%AE%E5%9E%8B%E3%82%92%E7%94%A8%E6%84%8F%E3%81%97%E3%81%A6%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"シリアライズ用の型を用意して対応するパターン permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シリアライズ用の型を用意して対応するパターン</h3>\n<p>シリアライズしたい<code>Player</code>に対してシリアライズ用の型を用意して、そちらをシリアライズすることで対応するというパターンが考えられると思います。</p>\n<p>これは公式ドキュメントの「<a href=\"https://github.com/Cysharp/MemoryPack#serialize-external-types\">Serialize external types</a>」で取り上げられている方法をそのまま利用するかたちとなります。つまりUnityの既存型やライブラリで追加した型など、すでに存在していて手がいれられないもの、MemoryPackとしてシリアライズするためのテクニックです。</p>\n<p>下記の<code>Player</code>クラスに対してシリアライズするための<code>PlayerSerializable</code>クラスを用意します。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">MemoryPack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// シリアライズしたいクラス</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span> Weapons <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span> weapons<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        Weapons <span class=\"token operator\">=</span> weapons<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Playerシリアライズ用の型</span>\n<span class=\"token comment\">// こっちはPlayerクラスと別アセンブリとかにしても問題なし</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayerSerializable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackIgnore</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Player</span> Player<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// シリアライズ対象のプロパティを定義して</span>\n    <span class=\"token comment\">// そのまま元のPlayerのプロパティを参照する</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackInclude</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token operator\">=></span> Player<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// WeaponsはIDとしてシリアライズする</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackInclude</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> WeaponIds\n        <span class=\"token operator\">=></span> Player<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">=></span> w<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// デシリアライズ時にMemoryPackが呼び出すコンストラクタ</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackConstructor</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PlayerSerializable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> WeaponIds<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ここで Playerを復元する</span>\n        Player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span>\n            Name<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// ID配列からWeapons配列を復元</span>\n            WeaponIds<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>WeaponDatabase<span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// こっちのコンストラクタはシリアライズ時に使う</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PlayerSerializable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> player<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Player <span class=\"token operator\">=</span> player<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>シリアライズとデシリアライズは、下記のように行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Taro\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">{</span>\n    WeaponDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    WeaponDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// PlayerSerializableを介する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bin <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PlayerSerializable</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PlayerSerializable<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Player<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Name = Taro</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// WeaponCount = 2</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"WeaponCount = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span>Count</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[0].Id = 1</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[0].Id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[0].Name = ナイフ</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[0].Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[1].Id = 3</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[1].Id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[1].Name = 長剣</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[1].Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記は、都度<code>PlayerSerializable</code>を介していて呼び出しが結構面倒です。これは下記のようなカスタムフォーマッターを用意することで呼び出しを簡略化できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Playerのカスタムフォーマッター</span>\n<span class=\"token comment\">// シリアライズ・デシリアライズ自体は全部</span>\n<span class=\"token comment\">// PlayerSerializableに委譲する</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayerFormatter</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MemoryPackFormatter<span class=\"token punctuation\">&lt;</span>Player<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteNullObjectHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PlayerSerializable経由でシリアライズ</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WritePackable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PlayerSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">PeekIsNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PlayerSerializable経由でデシリアライズ</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> wrapped <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadPackable</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PlayerSerializable<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> wrapped<span class=\"token punctuation\">.</span>Player<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のフォーマッターを用いて、シリアライズとデシリアライズを下記のように記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// これをアプリケーションの初期化で１度呼ぶ</span>\nMemoryPackFormatterProvider<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PlayerFormatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Taro\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Weapon<span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">{</span>\n    WeaponDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    WeaponDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Playerクラスを直接シリアライズしてる風</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bin <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Playerクラスとして直接デシリアライズしてる風</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Player<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Name = Taro</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// WeaponCount = 2</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"WeaponCount = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">.</span>Count</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[0].Id = 1</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[0].Id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[0].Name = ナイフ</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[0].Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[1].Id = 3</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[1].Id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Weapon[1].Name = 長剣</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Weapon[1].Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Weapons<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>かなり直感的な呼び出しでシリアライズとデシリアライズができるようになりました。この手法を利用する場合はセットでやっておきたいですね。</p>\n<p>ちなみにカスタムフォーマッターを用意する場合、もちろんreader/writerで独自バイナリとして全部書き出すといったことも可能なのですが、前述のとおり低レイヤーな処理を手で書くのは結構大変なのであまりやらないほうがいい気がします。</p>\n<p>（それをやらないためにMemoryPackはSourceGeneratorで自動化する術を提供しているわけで）</p>\n<p>このように<code>Player</code>クラスからMemoryPackやシリアライズの依存を消すことができました。が、まぁ当然ですがシリアライズ型のメンテナンスが大変という問題が別途ついてきます。<code>Player</code>を編集すると、セットでシリアライズしたいプロパティを<code>PlayerSerializable</code>に追記する必要があります。</p>\n<p>この辺はトレードオフで、どこまで設計として厳密さをとって、どこまで利便性を求めるか、というところを決めていく必要があるのかもしれません。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>MemoryPackで、シリアライズやデシリアライズをカスタマイズする方法をいくつか紹介しました。</p>\n<p>シリアライズ対象の型とシリアライズ処理の依存を切りたい問題と、シリアライズ処理のメンテナンスどうするか問題は、設計次第なところがあり難しい問題ですが、この記事を参考にしつつうまく組み合わせていただけると幸いです。</p>","excerpt":"あけましておめでとうございます。2023年1記事はMemoryPackの小ネタです。 MemoryPackで、独自型のシリアライズやデシリアライズをカスタマイズする方法をいくつか紹介します。 シリアライズ・デシリアライズをカスタマイズしたいとき そのまま保存する場合はフォーマッターを自作する必要はありません。たとえば下記のようなPlayerクラスを考えます。 Playerが装備している武器はWeapons変数が所持しています。ここでWeapon…","fields":{"slug":"/2023/01/memorypack-custom-serialize-deserialize/"},"frontmatter":{"date":"January 01, 2023","type":"tech","tags":["Unity","MemoryPack"],"title":"MemoryPackでシリアライズ・デシリアライズをカスタマイズするいくつかの方法","description":"MemoryPackで、独自型のシリアライズやデシリアライズをカスタマイズする方法をいくつか紹介します。","eyecatch":null}}},"pageContext":{"id":"60b4c6a9-361b-5452-9bf4-339d285a2bcd"}},"staticQueryHashes":["1480509143","3159585216"]}