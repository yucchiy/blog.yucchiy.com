{"componentChunkName":"component---src-templates-post-tsx","path":"/2023/01/memorypack-custom-versioning/","result":{"data":{"markdownRemark":{"html":"<p>MemoryPackは標準で<a href=\"https://github.com/Cysharp/MemoryPack#version-tolerant\">Version tolerant</a>によるバージョニングをサポートしています。</p>\n<p>しかし、たとえば一時的なデータをアプリケーションに保存するが、アプリケーションの変更によって一時的データが利用できない場合など、独自のバージョニングを行いたいケースがあるかもしれません。</p>\n<p>この記事では、MemoryPackでシリアライズ対象のクラスにバージョンを定義せず、MemoryPackのバイナリに独自データを埋め込むことで、独自のバージョニングを行う方法について紹介します。</p>\n<h2 id=\"memorypackのバイナリに独自データを埋め込む読み込む\" style=\"position:relative;\"><a href=\"#memorypack%E3%81%AE%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%81%AB%E7%8B%AC%E8%87%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-label=\"memorypackのバイナリに独自データを埋め込む読み込む permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MemoryPackのバイナリに独自データを埋め込む・読み込む</h2>\n<p>MemoryPackでは、シリアライズ・デシリアライズ前後にこちらの定義したコールバックを呼び出すことができます。これにより独自の処理を差し込むことができます。</p>\n<p><a href=\"https://github.com/Cysharp/MemoryPack#serialization-callbacks\">Serialization callbacks</a></p>\n<p>具体的には、下記のように静的メソッドに対して属性を設定することで、コールバックメソッドとして呼び出されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodCallSample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSerializing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>OnSerializing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerialized</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSerialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>OnSerialized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeserializing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>OnDeserializing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserialized</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeserialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>OnDeserialized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>コールバックメソッドの呼び出しとMemoryPackの処理は、それぞれ下記の順番で行われます。</p>\n<ul>\n<li>シリアライズ\n<ol>\n<li><code>MemoryPackOnSerializing</code>が指定されたメソッド</li>\n<li>MemoryPackのシリアライズ</li>\n<li><code>MemoryPackOnSerialized</code>が指定されたメソッド</li>\n</ol>\n</li>\n<li>デシリアライズ\n<ol>\n<li><code>MemoryPackOnDeserializing</code>が指定されたメソッド</li>\n<li>MemoryPackのデシリアライズ</li>\n<li><code>MemoryPackOnDeserialized</code>が指定されたメソッド</li>\n</ol>\n</li>\n</ul>\n<p>また、これらのコールバックメソッドでは<code>ref reader/writer, ref T value</code>を受け取れます。\nこれによって、下記のようにMemoryPackでシリアライズされたバイナリの前後に独自のデータを読み書きできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomHeader</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSerializing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">CustomHeader<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// シリアライズ前をフックできる</span>\n        <span class=\"token comment\">// ここでデータを書くと、MemoryPackのバイナリの前にヘッダー的な感じでデータを埋め込める</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeserializing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">CustomHeader<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// デシリアライズ前をフックできる</span>\n        <span class=\"token comment\">// 独自に書いたデータを読み込む</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadUnmanaged</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 10</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"独自に埋め込んだデータを用いて独自のバージョニングを行う\" style=\"position:relative;\"><a href=\"#%E7%8B%AC%E8%87%AA%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%93%E3%81%A0%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6%E7%8B%AC%E8%87%AA%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86\" aria-label=\"独自に埋め込んだデータを用いて独自のバージョニングを行う permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>独自に埋め込んだデータを用いて独自のバージョニングを行う</h2>\n<p>上記の埋め込みを用いて独自のバージョニングを行ってみます。</p>\n<ol>\n<li>シリアライズ時にバージョンを埋め込む</li>\n<li>デシリアライズ時にバージョンを読み込んで、バージョンが違う場合例外を投げる</li>\n</ol>\n<p>下記に例を示します。（といっても、前述のデータ埋め込みとほとんどコードは変わりません。）</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// なにか適当なところからバージョンをとってくるとする</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Version <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Snapshot</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Hp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Mp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Snapshot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hp<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Hp <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">;</span>\n        Mp <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnSerializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSerializing</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Snapshot<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteUnmanaged</span><span class=\"token punctuation\">(</span>MyApplication<span class=\"token punctuation\">.</span>Version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryPackOnDeserializing</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeserializing</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Snapshot</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> version <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadUnmanaged</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MyApplication<span class=\"token punctuation\">.</span>Version <span class=\"token operator\">!=</span> version<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApplicationVersionException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Embed version = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">version</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記を用いて、下記のようにバージョン変更を検知できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// とあるアプリバージョンで実行</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Snapshot</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bin <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 適当な場所に保存</span>\nFile<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Application<span class=\"token punctuation\">.</span>persistentPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/temp-save.bin\"</span></span><span class=\"token punctuation\">,</span> bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上記実行からアプリバージョンがあがったとして下記を実行</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bin <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Application<span class=\"token punctuation\">.</span>persistentPath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/temp-save.bin\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Snapshot<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ここを通るということは保存したデータは問題なく利用できる、はず</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationVersionException</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// バージョンが変わっているのでここでエラー処理をする</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"カスタムフォーマッターを利用してバージョンを埋め込む\" style=\"position:relative;\"><a href=\"#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80\" aria-label=\"カスタムフォーマッターを利用してバージョンを埋め込む permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>カスタムフォーマッターを利用してバージョンを埋め込む</h2>\n<p>上記の実装の場合、<code>Snapshot</code>にバージョンの埋め込み処理などを行う必要があります。\n設計思想によっては、データ型そのものにバージョニングに関するロジックを実装したくないかもしれません。</p>\n<p>この処理をカスタムフォーマッター側で実装することで、データ型そのものはバージョニングの処理に依存しない、といった実装も可能です。</p>\n<p>具体的にさきほどの<code>Snapshot</code>に対して、独自のバージョニングを行うフォーマッターの実装は下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// このクラス自体はシンプルなデータを保持するだけのクラス</span>\n<span class=\"token punctuation\">[</span>MemoryPackable<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Snapshot2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Hp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Mp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Snapshot2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hp<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> mp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Hp <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">;</span>\n        Mp <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// シリアライズ処理＋バージョニングを行うフォーマッター</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SnapshotWithVersioningFormatter</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MemoryPackFormatter<span class=\"token punctuation\">&lt;</span>Snapshot2<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackWriter</span> writer<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Snapshot2<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteNullObjectHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// バージョン埋め込み</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteUnmanaged</span><span class=\"token punctuation\">(</span>MyApplication<span class=\"token punctuation\">.</span>Version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Snapshot2のシリアライズ</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">WritePackable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">MemoryPackReader</span> reader<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Snapshot2<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">PeekIsNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// バージョンチェック</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> version <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadUnmanaged</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">!=</span> MyApplication<span class=\"token punctuation\">.</span>Version<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApplicationVersionException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// TemporarySavedata2のデシリアライズ</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadPackable</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Snapshot2<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下記のようにシリアライズ・デシリアライズおよびバージョンチェックを行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// アプリの初期化時などで一度だけ呼び出す</span>\nMemoryPackFormatterProvider<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SnapshotWithVersioningFormatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Snapshot2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bin <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// バージョンが変わったとする</span>\nMyApplication<span class=\"token punctuation\">.</span>Version <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    val <span class=\"token operator\">=</span> MemoryPackSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Snapshot2<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Hp</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val<span class=\"token punctuation\">.</span>Mp</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationVersionException</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"MemoryPackは標準でVersion tolerantによるバージョニングをサポートしています。 しかし、たとえば一時的なデータをアプリケーションに保存するが、アプリケーションの変更によって一時的データが利用できない場合など、独自のバージョニングを行いたいケースがあるかもしれません。 この記事では、MemoryPackでシリアライズ対象のクラスにバージョンを定義せず、MemoryPack…","fields":{"slug":"/2023/01/memorypack-custom-versioning/"},"frontmatter":{"date":"January 21, 2023","type":"tech","tags":["Unity","MemoryPack"],"title":"MemoryPackで独自のバージョニングを行う","description":"MemoryPackのバイナリに独自のバージョンタグを埋め込むことで、バージョニングを行う方法について紹介します。","eyecatch":null}}},"pageContext":{"id":"00020068-afa9-54ce-8ad0-acc2df5afd7f"}},"staticQueryHashes":["1480509143","3159585216"]}