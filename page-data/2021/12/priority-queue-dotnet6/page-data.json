{"componentChunkName":"component---src-templates-post-tsx","path":"/2021/12/priority-queue-dotnet6/","result":{"data":{"markdownRemark":{"html":"<p>この記事は、<a href=\"https://qiita.com/advent-calendar/2021/csharplang\">C# Advent Calendar 2021</a>の22日目の記事です。\r\n昨日は<a href=\"https://qiita.com/WiZLite\">WiZLite</a>さんによる<a href=\"https://qiita.com/WiZLite/items/6448185e5156efa348e2\">自作UIフレームワークExprazorの紹介と仮想DOMの実装方法 - Qiita</a>でした。</p>\n<p>.NET 6 Preview 2に PriorityQueueの実装が追加されました。いままでC#には標準で優先度付きキューの実装はなかったのですが、.NET 6から標準でこのデータ構造がサポートされました。</p>\n<p><a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-2/#priorityqueue\">Announcing .NET 6 Preview 2 | .NET Blog</a></p>\n<p><a href=\"https://github.com/dotnet/runtime/pull/46009/files\">Add PriorityQueue to System.Collections.Generic (#43957) by pgolebiowski · Pull Request #46009 · dotnet/runtime</a></p>\n<p>本記事では、PriorityQueueの基本的な利用方法を紹介と、優先度付きキューを用いたアルゴリズムとしてポピュラーなダイクストラ法を実装して、簡単な重み付きグラフに対しての最短経路問題を解いてみようと思います。</p>\n<h2 id=\"優先度付きキューとは\" style=\"position:relative;\"><a href=\"#%E5%84%AA%E5%85%88%E5%BA%A6%E4%BB%98%E3%81%8D%E3%82%AD%E3%83%A5%E3%83%BC%E3%81%A8%E3%81%AF\" aria-label=\"優先度付きキューとは permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>優先度付きキューとは？</h2>\n<p>簡単にですが、今回紹介するPriorityQueue、優先度付きキューのデータ構造について簡単に触れておきます。</p>\n<p>通常のキューはFIFO（First-In First-Out）、つまりキューに入れたものは、それを入れた順番に取り出されます。</p>\n<p>実際のコードをみつつ、挙動を見てみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// この順番にデータを入れる</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// データが取り出される順番を確認</span>\r\n<span class=\"token comment\">// TryDequeueは、キューが空ならfalse</span>\r\n<span class=\"token comment\">// 空でなくて取り出せる状態なら、trueを返して</span>\r\n<span class=\"token comment\">// 引数に取り出した要素が代入されている</span>\r\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Popped Item : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この結果は下記となります。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Popped</span> Item <span class=\"token punctuation\">:</span> Item A\r\n<span class=\"token class-name\">Popped</span> Item <span class=\"token punctuation\">:</span> Item B\r\n<span class=\"token class-name\">Popped</span> Item <span class=\"token punctuation\">:</span> Item C\r\n<span class=\"token class-name\">Popped</span> Item <span class=\"token punctuation\">:</span> Item D</code></pre></div>\n<p>キューに入れた（Enqueueした）順番に、データが取り出せている（Dequeueできている）ことが確認できます。</p>\n<p>では優先度付きキューと通常のキューの違いなのですが、通常のキューに対して優先度をつけてデータを取り出せるデータ構造になります（そのままですが...）。つまりキューの中身が優先度によって常にソートされているようなデータ構造、という感じでしょうか（ただし内部実装によるので常にそうなってるとは限らないですが）。</p>\n<p>実際にPriorityQueueを使いつつ挙動を確かめてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> priorityQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PriorityQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\npriorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\npriorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item B\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\npriorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item C\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\npriorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item D\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Popped Item : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">. Priority Was : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">priority</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>PriorityQueueは２つの型をテンプレートのパラメータとして取ります。１つ目が要素（先程のキューで扱ったデータそのもの）、２つ目が優先度になります。このコードの実行結果は下記のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Popped Item : Item A. Priority Was : 0\r\nPopped Item : Item D. Priority Was : 1\r\nPopped Item : Item C. Priority Was : 2\r\nPopped Item : Item B. Priority Was : 60\r\n</code></pre></div>\n<p>このように、優先度の値が小さい順に値が取り出されていることが確認できます。</p>\n<h2 id=\"基本的なpriorityqueueの操作\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AApriorityqueue%E3%81%AE%E6%93%8D%E4%BD%9C\" aria-label=\"基本的なpriorityqueueの操作 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本的なPriorityQueueの操作</h2>\n<h3 id=\"enqueue\" style=\"position:relative;\"><a href=\"#enqueue\" aria-label=\"enqueue permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enqueue</h3>\n<p>PriorityQueueに要素を挿入したい場合は<code>Enqueue</code>を利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">queue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>ちなみに<code>EnqueueRange</code>という要素を範囲で一括で挿入するメソッドも用意されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// 下記と一緒</span>\r\n<span class=\"token comment\">// queue.Enqueue(\"Item A\", 0);</span>\r\n<span class=\"token comment\">// queue.Enqueue(\"Item B\", 60);</span>\r\n<span class=\"token comment\">// queue.Enqueue(\"Item C\", 10);</span>\r\n<span class=\"token comment\">// queue.Enqueue(\"Item D\", 3);</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueueRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Item B\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Item C\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Item D\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// すべての要素に同じ優先度をつけてEnqueue</span>\r\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueueRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"Item B\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"Item C\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"Item D\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<h3 id=\"dequeue--peek\" style=\"position:relative;\"><a href=\"#dequeue--peek\" aria-label=\"dequeue  peek permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dequeue / Peek</h3>\n<p>要素を取り出すには<code>Dequeue</code>を利用します。先述したとおりキューに挿入されたもののうち、最も優先度の小さいものが取り出されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>ただしキューが空の場合は<code>InvalidOperationException</code>を吐きます（実装をみたら現状キューが空の場合のみ例外を吐いていましたが、何かしらの理由で要素が取得できない場合は例外を吐く挙動をします）。\r\nこの挙動が不便な場合<code>TryDequeue</code>という要素取得の成功可否を返却するメソッドも合わせて用意されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// 第１引数に要素、第２引数に優先度を返す。</span>\r\n<span class=\"token comment\">// 戻り値がtrueの場合のみ有効な値が入っている。</span>\r\n<span class=\"token comment\">// falseの場合は要素が取れなかった場合。</span>\r\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// キューが空になるまで要素を取得して、表示する</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Popped: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, priority = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">priority</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<p>要素を取得したいが、キューから取り除きたくない場合は<code>Peek</code>が利用できます。<code>Dequeue</code>と同様にキューが空の場合などで例外を吐くので<code>TryPeek</code>もあわせて用意されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Peek。戻り値は要素。こちらは例外を吐く可能性がある。</span>\r\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ret <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// TryPeekは例外を吐かず戻り値に取得成功可否を返す</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">TryPeek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// ここでは要素のPeekに成功している</span>\r\n    <span class=\"token comment\">// elementおよびpriorityには有効な値が入る</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Peek: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, priority = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">priority</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<h3 id=\"custom-comparator\" style=\"position:relative;\"><a href=\"#custom-comparator\" aria-label=\"custom comparator permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Comparator</h3>\n<p>今までの例では優先度が整数のもののみ紹介しましたが、PriorityQueueのコンストラクタ呼び出し時に、 <code>IComparer&#x3C;T></code> を実装したクラスを渡すことで、任意の優先度をつけることができます。</p>\n<p>アプリケーションによっては、優先度の算出が複雑になってしまう場合があると思うので、必要に応じて利用すると良いかもしれません。</p>\n<p>独自に定義した型 <code>NantokaPriority</code> をPriorityQueueの優先度として渡して、 <code>NantokaComparer</code> によって優先度を算出する例を下記に示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nantokaQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PriorityQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> NantokaPriority<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaComparer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item A\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item B\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item C\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item D\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item E\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Item C</span>\r\n<span class=\"token comment\">// Item A</span>\r\n<span class=\"token comment\">// Item B</span>\r\n<span class=\"token comment\">// Item E</span>\r\n<span class=\"token comment\">// Item D</span>\r\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nantokaQueue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NantokaPriority</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> B<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NantokaPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        A <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\r\n        B <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NantokaComparer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IComparer<span class=\"token punctuation\">&lt;</span>NantokaPriority<span class=\"token punctuation\">></span></span></span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NantokaPriority<span class=\"token punctuation\">?</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NantokaPriority<span class=\"token punctuation\">?</span></span> y<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// Aで優先度をつけて、同じだったらBで優先度をつける例</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>A <span class=\"token operator\">==</span> y<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>B <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>B <span class=\"token operator\">==</span> y<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">else</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">else</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>A <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">else</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"ダイクストラ法を実装してみる\" style=\"position:relative;\"><a href=\"#%E3%83%80%E3%82%A4%E3%82%AF%E3%82%B9%E3%83%88%E3%83%A9%E6%B3%95%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"ダイクストラ法を実装してみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ダイクストラ法を実装してみる</h2>\n<p>ここまでで、PriorityQueueの基本的な利用方法について紹介したので、最後に優先度付きキューを用いたアルゴリズムの一つであるダイクストラ法と、このアルゴリズムを用いて、単一始点の、重み付きグラフに対しての最短経路問題を解いてみます。</p>\n<p><a href=\"https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_12_C&#x26;lang=jp\">Single Source Shortest Path II</a></p>\n<p>上記の問題のサンプルを例に解くべき問題を説明すると、</p>\n<p><img src=\"https://user-images.githubusercontent.com/325819/146997589-0aa2de92-ac41-4351-8a28-806f9ebafa33.jpeg\" alt=\"上記サンプルを図示した様子\"></p>\n<p>このようなグラフがあったときに、開始地点を0として、開始地点以外のノード（図中の丸）に行き着く最短コストを求める問題となっています。ちなみに矢印がそのノードから矢印が向いているノードに移動できることを表し、矢印の上についている値がコストで、移動するとそのコストがかかることを表しています。ちなみにコストは非負の整数であることが保証されます。（移動したらコストが減る、ということはない）</p>\n<p>この場合、0から1までが2（0 →1）、2までが2（0 → 3 → 2）、3までが1（0 → 3）、4までが3（0 → 3 → 2 → 4）が答えになります。</p>\n<p>この問題は、ダイクストラ法を用いると解くことができます。</p>\n<p>ダイクストラ法は、昔自分が大学時代に講義を受けていたときにきいた利用用途としては、たとえばカーナビでの目的地などを算出、みたいなことを聞きました（いまは多分もっと複雑なきもしますが）。</p>\n<p>移動コストがすべて同じ値であれば、通常のキューを用いた幅優先探索によって最短経路が求まるのですが、この問題ではノード間の移動コストがそれぞれ違う値になっています（それゆえに重み付きグラフの最短経路問題となります）。</p>\n<p>重みが付いたグラフの場合は、優先度付きキューを用いて幅優先探索を行うことで最短経路が求まります。これがダイクストラ法になります。</p>\n<p>この方法で、上記の問題を解いてみます。いきなり全行貼ると長いので、解法のメインとなるコードを下記に示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token comment\">// ここからダイクストラ法で重み付きの有向グラフに対して</span>\r\n    <span class=\"token comment\">// 最短経路を出す</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> priorityQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PriorityQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// スタート位置初期化（スタートは0から）</span>\r\n    priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// スタート位置となる頂点から、</span>\r\n    <span class=\"token comment\">// それぞれの頂点に対しての最短経路</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> costs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">bool</span></span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// でかい値で初期化しとく</span>\r\n        costs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">;</span>\r\n        visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 探索開始</span>\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nodeIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 探索候補をポップ。なくなったらこのループを抜ける</span>\r\n\r\n        <span class=\"token comment\">// すでに訪問済みの場合は最短経路が見つかっている</span>\r\n        <span class=\"token comment\">// その先を探索しても最短経路が見つからないので</span>\r\n        <span class=\"token comment\">// ここで打ち切り</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token comment\">// その頂点への最短経路のコストを更新</span>\r\n        costs<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> currentCost<span class=\"token punctuation\">;</span>\r\n        visited<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// 今いる頂点から、</span>\r\n        <span class=\"token comment\">// 隣接リストを元に次の探索候補を</span>\r\n        <span class=\"token comment\">// PriorityQueueに追加</span>\r\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> edge <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span><span class=\"token function\">GetEdgesFrom</span><span class=\"token punctuation\">(</span>nodeIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// 次の探索候補のコストは、現在のコスト+ そのエッジのコスト</span>\r\n            priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>To<span class=\"token punctuation\">,</span> currentCost <span class=\"token operator\">+</span> edge<span class=\"token punctuation\">.</span>Cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>解法自体はかなりシンプルで、前述の通り、幅優先探索に使うキューを移動コストを優先度にした優先度付きキューを用いて探索候補を出している、という感じになります。</p>\n<p>一応これでサンプル入力に対しての出力が正しいことは確認できました。（が、上記AOJが.NET 6対応していないので、上記のコードは通らずで。新しいのでしょうがない！）</p>\n<p>最後に上記の問題を解くコードの全容を記載しておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">OpenStandardOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> AutoFlush <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">SetOut</span><span class=\"token punctuation\">(</span>streamWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">Solve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Scanner</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>In<span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// 確実に標準出力へ出力するために手動でフラッシュ</span>\r\nConsole<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Solve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> scanner<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 入力を受け取ってグラフを構築する</span>\r\n\r\n    <span class=\"token comment\">// n（グラフの頂点数）</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> n <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 頂点</span>\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> u <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 隣接リストの数（出次数）</span>\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> k <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 隣接リストの一覧を入力として、</span>\r\n\r\n        <span class=\"token comment\">// グラフのエッジを構築</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// 到着先の頂点</span>\r\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">// エッジのコスト</span>\r\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> c <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">// グラフにエッジ追加</span>\r\n            graph<span class=\"token punctuation\">.</span><span class=\"token function\">AddEdge</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// ここからダイクストラ法で重み付きの有向グラフに対して</span>\r\n    <span class=\"token comment\">// 最短経路を出す</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> priorityQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PriorityQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// スタート位置初期化（スタートは0から）</span>\r\n    priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// スタート位置となる頂点から、</span>\r\n    <span class=\"token comment\">// それぞれの頂点に対しての最短経路</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> costs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">bool</span></span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>NodeCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// でかい値で初期化しとく</span>\r\n        costs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">;</span>\r\n        visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 探索開始</span>\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nodeIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 探索候補をポップ。なくなったらこのループを抜ける</span>\r\n\r\n        <span class=\"token comment\">// すでに訪問済みの場合は最短経路が見つかっている</span>\r\n        <span class=\"token comment\">// その先を探索しても最短経路が見つからないので</span>\r\n        <span class=\"token comment\">// ここで打ち切り</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token comment\">// その頂点への最短経路のコストを更新</span>\r\n        costs<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> currentCost<span class=\"token punctuation\">;</span>\r\n        visited<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// 今いる頂点から、</span>\r\n        <span class=\"token comment\">// 隣接リストを元に次の探索候補を</span>\r\n        <span class=\"token comment\">// PriorityQueueに追加</span>\r\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> edge <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span><span class=\"token function\">GetEdgesFrom</span><span class=\"token punctuation\">(</span>nodeIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>To<span class=\"token punctuation\">,</span> currentCost <span class=\"token operator\">+</span> edge<span class=\"token punctuation\">.</span>Cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 結果出力</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> costs<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">index</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">cost</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Edge</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> From<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> To<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Cost<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Edge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> to<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> cost<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        From <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span>\r\n        To <span class=\"token operator\">=</span> to<span class=\"token punctuation\">;</span>\r\n        Cost <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> NodeCount<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Edge<span class=\"token punctuation\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Edges<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nodeCount<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        NodeCount <span class=\"token operator\">=</span> nodeCount<span class=\"token punctuation\">;</span>\r\n        Edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Edge<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>NodeCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NodeCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            Edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Edge<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddEdge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> to<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> cost<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        Edges<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Edge</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Edge<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEdgesFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Edges<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scanner</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TextReader</span> Reader<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> Separator<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Queue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> Buffer<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> separator <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        Reader <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">;</span>\r\n        Separator <span class=\"token operator\">=</span> separator<span class=\"token punctuation\">;</span>\r\n        Buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Queue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">/// &lt;summary></span>\r\n    <span class=\"token comment\">/// &lt;c>Reader&lt;/c>からの入力を、&lt;c>Separator&lt;/c>で区切った１要素を返す</span>\r\n    <span class=\"token comment\">/// &lt;/summary></span>\r\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> line <span class=\"token operator\">=</span> Reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// この例外、どこでも処理してないけど、</span>\r\n            <span class=\"token comment\">// 基本入力が正しく入ってくると仮定して</span>\r\n            <span class=\"token comment\">// このプログラム内では何も行わない</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reader is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parsedElements <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>Separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parsedElement <span class=\"token keyword\">in</span> parsedElements<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>parsedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">/// &lt;summary></span>\r\n    <span class=\"token comment\">/// &lt;c>Read&lt;/c>で受け取った要素を更にintとしてパースして返す</span>\r\n    <span class=\"token comment\">/// &lt;/summary></span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"この記事は、C# Advent Calendar 2021の22日目の記事です。\r\n昨日はWiZLiteさんによる自作UIフレームワークExprazorの紹介と仮想DOMの実装方法 - Qiitaでした。 .NET 6 Preview 2に PriorityQueueの実装が追加されました。いままでC#には標準で優先度付きキューの実装はなかったのですが、.NET 6から標準でこのデータ構造がサポートされました。 Announcing .NET 6 Preview 2 | .NET Blog…","fields":{"slug":"/2021/12/priority-queue-dotnet6/"},"frontmatter":{"date":"December 22, 2021","type":null,"tags":[".NET","C#"],"title":".NET 6に入ったPriorityQueueの紹介と、ダイクストラ法を書いてみる","description":null,"eyecatch":null}}},"pageContext":{"id":"c14a5435-5855-5dd7-99b7-f9703d065c33"}},"staticQueryHashes":["1480509143","3159585216"]}