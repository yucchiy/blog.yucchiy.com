{"componentChunkName":"component---src-templates-post-tsx","path":"/2021/03/system-diagnostic-process-for-exectuing-command/","result":{"data":{"markdownRemark":{"html":"<p><code>System.Diagnostics.Process</code>を利用するとプロセスを新たに実行したり、すでに実行中のプロセスに対してなにか処理を行うことができます。</p>\n<p>例として<code>git pull</code>をC#プログラム上から実行してみます。</p>\n<p>まずはプロセスを実行する準備を行います。<code>System.Diagnostics.Process</code>をnewして<code>Process.StartInfo</code>に情報を埋めていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> process <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 作業ディレクトリの指定。指定しないとEnvironment.CurrentDirectoryになる</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>WorkingDirectory <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/git-repository\"</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>FileName <span class=\"token operator\">=</span> <span class=\"token string\">\"git\"</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>Arguments <span class=\"token operator\">=</span> <span class=\"token string\">\"pull\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OSのシェルを利用するかどうか</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>UseShellExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Windowを生成しない</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>CreateNoWindow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 上記をfalseにした場合標準入力、標準出力、標準エラー出力</span>\n<span class=\"token comment\">// をストリームにリダイレクトすることができる</span>\n<span class=\"token comment\">// こちらは用途に応じて</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardInput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardOutput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>StartInfo.WorkingDirectory</code>はそのプロセスを実行するディレクトリになります。\n指定しない場合は<code>Environment.CurrentDirectory</code>になります。\nこの<code>CurrentDirectory</code>はプログラムを実行する状況によって異なる可能性があるため、場合によっては明示的に指定するほうが良いです。</p>\n<p><code>StartInfo.UseShellExecute</code>はOSのシェルを経由してプロセスを実行するかを指定します。外部プロセスでコマンドを実行したい場合はこれを<code>false</code>にします。\n大抵のコマンドラインアプリケーションの場合はウインドウを生成することはないので念の為<code>StartInfo.CreateNoWindow</code>もあわせて指定しておきます。（もちろんウインドウアプリケーションを起動する場合は別です。）</p>\n<p><code>StartInfo.FileName</code>は実行するプログラムのファイルパス、<code>StartInfo.Arguments</code>はそのコマンドラインの引数です。</p>\n<p><code>StartInfo.RedirectStandardOutput</code>は、通常そのまま標準出力に出力される文字列を<code>Process.StandardOutput</code>へリダイレクトします。\n主に標準出力をプログラムで扱いたい場合や、標準出力へ出力したくない場合などに利用できるでしょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// 現在標準出力にリダイレクトされてる文字列を最後まで取得する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stdOut <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> process<span class=\"token punctuation\">.</span>StandardOutput<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEndAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ちなみに<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.username?view=net-5.0\">ユーザー名</a>や<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.password?view=net-5.0\">パスワード</a>を指定するプロパティも存在します。適宜利用しましょう。</p>\n<p><code>StartInfo</code>に実行情報を埋めたらいよいよプロセスを実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// プロセスのスタート</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// プロセスの実行完了待ち</span>\n<span class=\"token keyword\">await</span> _process<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForExitAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>Process.Start()</code>を呼び出すとプロセスが実行されます。そのままプロセスの終了を待ちたい場合は、<code>Process.WaitForExit</code>を実行し終了を待ちます。ちなみに非同期版の<code>Process.WaitForExitAsync</code>も存在します。</p>\n<p>実行後にそのプロセスの終了コードを取得したい場合は<code>Process.ExitCode</code>で取得できます。</p>\n<p>最後に、自作のメモ管理コマンドの<a href=\"https://github.com/yucchiy/memo-cli/\">memo-cli</a>で利用したGitコマンドを実行するクラスを示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IDisposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> SuccessExitCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GitCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommandConfig</span> config<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _process <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>WorkingDirectory <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>HomeDirectory<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>FileName <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>GitPath<span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>Arguments <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>CreateNoWindow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>UseShellExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardInput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardOutput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        _process<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _process<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> _process<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForExitAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _process<span class=\"token punctuation\">.</span>ExitCode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">CollectStandardError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> _process<span class=\"token punctuation\">.</span>StandardError<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEndAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _process<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span> _process <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このクラスを用いてpullを実行する例を示します。（ちなみに<code>UseColor</code>は独自のコマンドライン装飾クラスです）</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Pull</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> git <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GitCommand</span><span class=\"token punctuation\">(</span>CommandConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pull\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> git<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> GitCommand<span class=\"token punctuation\">.</span>SuccessExitCode<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UseColor</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>ConsoleColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> Output<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to execute pull command following reason.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UseColor</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>ConsoleColor<span class=\"token punctuation\">.</span>Yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> Output<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> git<span class=\"token punctuation\">.</span><span class=\"token function\">CollectStandardError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=net-5.0\">Process Class (System.Diagnostics) | Microsoft Docs</a></li>\n</ul>","excerpt":"System.Diagnostics.Processを利用するとプロセスを新たに実行したり、すでに実行中のプロセスに対してなにか処理を行うことができます。 例としてgit pullをC#プログラム上から実行してみます。 まずはプロセスを実行する準備を行います。System.Diagnostics.ProcessをnewしてProcess.StartInfoに情報を埋めていきます。 StartInfo.WorkingDirectory…","fields":{"slug":"/2021/03/system-diagnostic-process-for-exectuing-command/"},"frontmatter":{"date":"March 29, 2021","type":null,"tags":["C#"],"title":"System.Diagnostics.Processを用いてコマンドラインを実行する","description":null,"eyecatch":null}}},"pageContext":{"id":"bec797be-2281-5c2c-890b-d64ee3f91306"}},"staticQueryHashes":["1480509143","3159585216"]}