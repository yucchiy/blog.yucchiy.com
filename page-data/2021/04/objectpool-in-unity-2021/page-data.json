{"componentChunkName":"component---src-templates-post-tsx","path":"/2021/04/objectpool-in-unity-2021/","result":{"data":{"markdownRemark":{"html":"<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">へぇ、Unity 2021.1から、ObjectPoolって標準で実装されるのね。 <a href=\"https://t.co/MTG08LitSY\">https://t.co/MTG08LitSY</a></p>&mdash; ゆっち〜 (Yuichiro MUKAI) (@yucchiy_) <a href=\"https://twitter.com/yucchiy_/status/1378202750089981956?ref_src=twsrc%5Etfw\">April 3, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>先日Unity Weeklyの仕込みで記事を漁っていたら、たまたま<a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.html\">Unity標準のObjectPool</a>実装が2021.1以降利用できることを知ったのでつぶやいてみたら、思った以上に反響がありました。せっかくなので簡単に触ってみたので記事を書きました。</p>\n<p>検証には2021.2.0a6を用いました。</p>\n<p>アルファ版なためこの記事で取り扱っている内容についても今後変更される可能性がある点に注意していただければと思います。</p>\n<h2 id=\"そもそもオブジェクトプールがなぜ必要なのか\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%97%E3%83%BC%E3%83%AB%E3%81%8C%E3%81%AA%E3%81%9C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B\" aria-label=\"そもそもオブジェクトプールがなぜ必要なのか permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>そもそもオブジェクトプールがなぜ必要なのか</h2>\n<p>銃の弾丸やパーティクルなど、ゲーム中で頻繁に登場と退場を繰り返す要素を大量に扱いたい場合に、その要素を愚直に、都度オブジェクトの生成と破棄を繰り返すような実装をすると、\nGarbage Collectionの呼び出しによりスパイクが発生したり、またメモリのフラグメントによりゲームのパフォーマンスの低下を招き、ゲーム体験を低下させる可能性があります。</p>\n<p>そのような問題を解決する手法の１つとして、<strong>オブジェクトの生成自体は初期化中にまとめて行い、そのオブジェクトを使い回す</strong>オブジェクトプールという手法がよく利用されます。</p>\n<p>オブジェクトプールはUnity標準で用意されていないため、各々独自で実装していました。実装方法やサードパーティ製のツールについては下記のようなものがあります。</p>\n<ul>\n<li><a href=\"https://catlikecoding.com/unity/tutorials/object-management/reusing-objects/\">Reusing Objects | Catlike Coding</a></li>\n<li><a href=\"https://booth.pm/ja/items/1040804\">Unityマニアックス - fuji0k0 - BOOTH</a></li>\n<li><a href=\"https://assetstore.unity.com/packages/tools/pooling-toolkit-23177?aid=1011l9AKa&#x26;utm_source=aff\">Pooling Toolkit | Tools | Unity Asset Store</a></li>\n</ul>\n<h3 id=\"unityenginepoolの登場\" style=\"position:relative;\"><a href=\"#unityenginepool%E3%81%AE%E7%99%BB%E5%A0%B4\" aria-label=\"unityenginepoolの登場 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UnityEngine.Poolの登場</h3>\n<p>オブジェクトプールはパフォーマンスを最適化をしていく上でよく利用されるテクニックなので、要望も多かったのか2021.1以降では<code>UnityEngine.Pool</code>という名前空間下でプール関係のクラスが実装されたようです。</p>\n<ul>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.html\">Unity - Scripting API: ObjectPool<T0></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.LinkedPool_1.html\">Unity - Scripting API: LinkedPool<T0></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.CollectionPool_2.html\">Unity - Scripting API: CollectionPool&#x3C;T0,T1></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.GenericPool_1.html\">Unity - Scripting API: GenericPool<T0></a></li>\n</ul>\n<h2 id=\"objectpoolを使ってみる\" style=\"position:relative;\"><a href=\"#objectpool%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"objectpoolを使ってみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObjectPoolを使ってみる</h2>\n<p>まずは手を動かしながら<a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.html\">ObjectPool</a>の動作を追っていきます。</p>\n<p><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.html\">こちら</a>に乗っているサンプル実装を一部改変しつつ動作を検証します。コード全文はそれぞれ下記で確認できます。</p>\n<ul>\n<li><a href=\"https://github.com/yucchiy/unity-sandbox/blob/main/Assets/ObjectPoolCheck/Scripts/ObjectPoolExample.cs\">unity-sandbox/ObjectPoolExample.cs at main · yucchiy/unity-sandbox</a></li>\n<li><a href=\"https://github.com/yucchiy/unity-sandbox/blob/main/Assets/ObjectPoolCheck/Scripts/ReturnToPool.cs\">unity-sandbox/ReturnToPool.cs at main · yucchiy/unity-sandbox</a></li>\n</ul>\n<p>サンプルに登場するコンポーネントはそれぞれ下記を行います。</p>\n<ul>\n<li><code>ObjectPoolExample</code>はオブジェクトプールの管理と、オブジェクトプールからパーティクルを取得しパーティクルを再生する。再生するパーティクルには<code>ReturnToPool</code>をアタッチする。</li>\n<li><code>ReturnToPool</code>は自身が保持するパーティクルの終了を検知して、そのタイミングでパーティクルをオブジェクトプールに返却する。</li>\n</ul>\n<p>下記にエディタでサンプルを再生する様子を示します。</p>\n<p><img src=\"/58ed636187dc64e30de6e8d5ebed2e15/object-pool-example.gif\" alt=\"\"></p>\n<p>このように再生後のパーティクルが使い回されていることが確認できます。（パーティクルがピンクなのはテクスチャを貼り付けてないからです...）</p>\n<p>それではこのサンプルのコードを追っていきます。</p>\n<h3 id=\"objectpoolの生成\" style=\"position:relative;\"><a href=\"#objectpool%E3%81%AE%E7%94%9F%E6%88%90\" aria-label=\"objectpoolの生成 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObjectPoolの生成</h3>\n<p>まずObjectPoolの初期化は下記のように行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">_pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectPool<span class=\"token punctuation\">&lt;</span>ParticleSystem<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n    OnCreatePoolObject<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// createFunc</span>\n    OnTakeFromPool<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// actionOnGet</span>\n    OnReturnedToPool<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// actionOnRelease</span>\n    OnDestroyPoolObject<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// actionOnDestroy</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// collectionCheck</span>\n    DefaultCapacity<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// defaultCapacity</span>\n    MaxSize               <span class=\"token comment\">// maxSize</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1-ctor.html\">Unity - Scripting API: Pool.ObjectPool_1.ObjectPool<T0></a></p>\n<p>コンストラクタの型パラメータはプールするオブジェクトの型を指定します。（上記の場合は<code>ParticleSystem</code>を指定しています。）</p>\n<p>コンストラクタは引数が多いので順に説明していきます。まずはじめの４つの引数はオブジェクトプールでオブジェクトを扱う際にそれぞれのフェーズで呼び出されるコールバックメソッドを指定します。\n引数順にそれぞれオブジェクト生成時（<code>createFunc</code>）、取得時（<code>actionOnGet</code>）、解放時（<code>actionOnRelease</code>）、破棄時（<code>actionOnDestroy</code>）に呼び出されます。</p>\n<ol>\n<li>プールから非アクティブな利用可能なオブジェクトを検索する。<code>createFunc</code>を用いてオブジェクトの生成を行う。\n<ul>\n<li>サンプルでは<code>OnCreatePoolObject</code>を指定しています</li>\n</ul>\n</li>\n<li>オブジェクトをプールから貸出状態に変更する。このとき<code>actionOnGet</code>が呼び出される。（2.は、1.で生成したか、プールから取得したかは関わらずに実施される）\n<ul>\n<li>サンプルでは<code>OnTakeFromPool</code>を指定しています</li>\n</ul>\n</li>\n<li>オブジェクトが不要になったらプールに返却する。このとき<code>actionOnRelease</code>が呼び出される。\n<ul>\n<li>サンプルでは<code>OnReturnedToPool</code>を指定しています</li>\n</ul>\n</li>\n<li>このときプールが最大量を超えていた場合（詳細は後述）、<code>actionOnDestroy</code>が呼び出されてオブジェクトが破棄される。\n<ul>\n<li>サンプルでは<code>OnDestroyPoolObject</code>を指定しています</li>\n</ul>\n</li>\n<li>プールを破棄する場合、プールされたオブジェクトもセットで、すべてのオブジェクトに対して<code>actionOnDestroy</code>を呼び出して破棄される。</li>\n</ol>\n<p><code>defaultCapacity</code>はプールで利用するコレクションの初期容量です。<code>maxSize</code>と合わせるで大きく問題にはならなそうです。</p>\n<p><code>collectionCheck</code>は<code>Release</code>時の二重解放のチェックを行うかどうか、<code>maxSize</code>はプールオブジェクトの最大保持数です。こちらは後述します。</p>\n<p>それではサンプルでの実装を追っていきます。</p>\n<h4 id=\"oncreatepoolobject\" style=\"position:relative;\"><a href=\"#oncreatepoolobject\" aria-label=\"oncreatepoolobject permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OnCreatePoolObject</h4>\n<p>プールで利用するオブジェクトを生成するときに呼び出されます。戻り値として生成したオブジェクトを返却します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\">ParticleSystem</span> <span class=\"token function\">OnCreatePoolObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// プールするパーティクルシステムの作成</span>\n    <span class=\"token comment\">// _nextIdはオブジェクト名をユニークにするために</span>\n    <span class=\"token comment\">// インクリメンタルなIDを保持している</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> go <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Pooled Particle System: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_nextId<span class=\"token operator\">++</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ps <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ParticleSystem<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// パーティクルの終了挙動をエミッター停止 &amp; エミッションのクリアとする</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> ParticleSystemStopBehavior<span class=\"token punctuation\">.</span>StopEmittingAndClear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// パーティクルを1秒のワンショット再生とする</span>\n    <span class=\"token comment\">// (ので約1秒後にパーティクルは停止する)</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> main <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">;</span>\n    main<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">;</span>\n    main<span class=\"token punctuation\">.</span>startLifetime <span class=\"token operator\">=</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">;</span>\n    main<span class=\"token punctuation\">.</span>loop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// パーティクルが終了したらプールに返却するための</span>\n    <span class=\"token comment\">// 挙動を実装したコンポーネントをアタッチ</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> returnToPool <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ReturnToPool<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    returnToPool<span class=\"token punctuation\">.</span>Pool <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>パーティクルシステム用のゲームオブジェクトを生成してそのオブジェクトに<code>ParticleSystem</code>コンポーネントをアタッチし、設定を行った後に戻り値として返却しています。</p>\n<p>サンプルでは簡単のために、パーティクルシステムをワンショット再生として設定しています（ループ再生を行わない場合<code>duration</code>期間後に再生が終了する）。\nまた、再生終了後に自動的にプールに戻すために、<code>ReturnToPool</code>（後述）コンポーネントをアタッチし、戻り先のプールとして自身の保持しているオブジェクトプールの参照を渡します。</p>\n<h4 id=\"ontakefrompool\" style=\"position:relative;\"><a href=\"#ontakefrompool\" aria-label=\"ontakefrompool permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OnTakeFromPool</h4>\n<p>プールからオブジェクトを取り出すときに呼び出されます。取り出す際になにかオブジェクトに対して共通の処理を行うことができるので、オブジェクトに対してセットアップ処理などを差し込むなどで利用できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnTakeFromPool</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParticleSystem</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// プールからパーティクルシステムを借りるときに</span>\n    <span class=\"token comment\">// そのオブジェクトのアクティブをONにする</span>\n    ps<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>サンプルでは上記のようにゲームオブジェクトのアクティブをONにしています。（プールに入っているときにはアクティブをOFFにする実装のため。）</p>\n<h4 id=\"onreturnedtopool\" style=\"position:relative;\"><a href=\"#onreturnedtopool\" aria-label=\"onreturnedtopool permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OnReturnedToPool</h4>\n<p>プールにオブジェクトを返却するときに呼び出されます。こちらも<code>OnTakeFromPool</code>と同様に解放時にオブジェクトに対して共通の処理を行うことができます。オブジェクトのリセット処理などを差し込むなどで利用できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnReturnedToPool</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParticleSystem</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 逆にプールにパーティクルシステムを返却するときに</span>\n   <span class=\"token comment\">// そのオブジェクトのアクティブをOFFにする</span>\n   ps<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>サンプルではゲームオブジェクトのアクティブをOFFにしています。</p>\n<h4 id=\"ondestroypoolobject\" style=\"position:relative;\"><a href=\"#ondestroypoolobject\" aria-label=\"ondestroypoolobject permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OnDestroyPoolObject</h4>\n<p>プールのオブジェクトを破棄するために呼び出されます。基本的に<code>OnCreatePoolObject</code>で生成したものを破棄する処理を書きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDestroyPoolObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParticleSystem</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// プールされたパーティクルの削除が要求されているので、</span>\n    <span class=\"token comment\">// オブジェクトを破棄する。</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// OnCreatePoolObjectでオブジェクトを生成しているので</span>\n    <span class=\"token comment\">// ここで破棄する責務があるという解釈</span>\n    <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>サンプルではゲームオブジェクトそのものを<code>GameObject.Destroy</code>で破棄しています。このゲームオブジェクトにアタッチしたコンポーネントは<code>GameObject.Destroy</code>中にまとめて破棄されるのでコンポーネントごとには破棄を書いていません。</p>\n<h3 id=\"オブジェクトの取得\" style=\"position:relative;\"><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%8F%96%E5%BE%97\" aria-label=\"オブジェクトの取得 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>オブジェクトの取得</h3>\n<p>プールからオブジェクトを取得するには<code>Get</code>を利用します。</p>\n<p><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.Get.html\">Unity - Scripting API: Pool.ObjectPool_1.Get</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// OnGUI中</span>\n\n<span class=\"token comment\">// ボタンを押したらパーティクルを再生する</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create Particles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// プールからいくつかパーティクルを取得して再生する。</span>\n    <span class=\"token comment\">// パーティクルはReturnToPoolコンポーネントにより</span>\n    <span class=\"token comment\">// 再生終了後に自動的にプールへ返却される</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> amount <span class=\"token operator\">=</span> Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> amount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// プールからオブジェクトを取得</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ps <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 適当な位置に移動させて</span>\n        ps<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Random<span class=\"token punctuation\">.</span>insideUnitSphere <span class=\"token operator\">*</span> <span class=\"token number\">10f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// パーティクルを再生</span>\n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>サンプルでは<code>var ps = Pool.Get();</code>によりプールからオブジェクトを取得しています。このとき<strong>未貸し出しの利用可能なオブジェクトがプールに存在しない場合</strong>、プールによりオブジェクトの生成が行われます。</p>\n<p>ちなみにオブジェクトの取得には<code>public PooledObject&#x3C;T> Get(out T v);</code>という<code>PooledObject</code>構造体を返却する<code>Get</code>メソッドも存在します。<code>PooledObject</code>は<code>System.IDisposable</code>を実装していて、<code>Dispose</code>メソッド内でオブジェクトの返却が呼び出される実装になっています。そのためusing statementと組み合わせるとスコープを抜けたら自動でオブジェクトをプールに返却できます（参考: <a href=\"https://blog.yucchiy.com/2021/03/using-declaration-in-chsarp-8.0/\">C#のUsing Statementと、C# 8.0で導入されたUsing Declarationについて | Yucchiy's Note</a>）。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// StringBuilderのプール</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">ObjectPool<span class=\"token punctuation\">&lt;</span>StringBuilder<span class=\"token punctuation\">></span></span> stringBuilderPool\n    <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectPool<span class=\"token punctuation\">&lt;</span>StringBuilder<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// StringBuilderをプールから借りる</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>stringBuilderPool<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ここではプールから借りたStringBuilderが</span>\n    <span class=\"token comment\">// 自動的に返却される</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記は<a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.Get.html\">こちらの公式ドキュメント</a>から引用した実装で、<code>StringBuilder</code>をプールから取得することで、毎フレーム<code>StringBuilder</code>をアロケーションすることを防いでいます。</p>\n<h3 id=\"オブジェクトの解放\" style=\"position:relative;\"><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E8%A7%A3%E6%94%BE\" aria-label=\"オブジェクトの解放 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>オブジェクトの解放</h3>\n<p>プールから借りたオブジェクトを解放するには<code>Release</code>を利用します。</p>\n<p><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.Release.html\">Unity - Scripting API: Pool.ObjectPool_1.Release</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// ReturnToPoolの実装から</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnParticleSystemStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// パーティクルシステムが停止したときにここが呼び出される</span>\n\n    <span class=\"token comment\">// プールから借りていたパーティクルを解放(返却)する</span>\n    Pool<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>Particle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記は<a href=\"https://github.com/yucchiy/unity-sandbox/blob/main/Assets/ObjectPoolCheck/Scripts/ReturnToPool.cs\">ReturnToPool</a>のオブジェクト解放箇所を抜粋したものになります。\n<code>ParticleSystem</code>は<code>main.stopAction</code>に<code>ParticleSystemStopAction.Callback</code>を指定すると、再生終了時に<code>OnParticleSystemStopped</code>が呼び出されるようになります。</p>\n<p>サンプルではパーティクルシステム再生完了後にオブジェクトを返却したいため、<code>OnParticleSystemStopped</code>内で<code>Release</code>を呼び出しています。</p>\n<p><code>Release</code>を呼び出したときに<strong>プールの最大数（コンストラクタの<code>maxSize</code>）を超えていた場合</strong>、プールによってオブジェクトが破棄されます。このとき<code>OnDestroyPoolObject</code>を介して破棄が実施されます。</p>\n<p>１点注意としてコンストラクタで<code>collectionCheck</code>に<code>true</code>を指定すると、すでに返却されたオブジェクトに対して<code>Release</code>を呼び出した場合に例外を吐きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// ReturnToPoolの実装から</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnParticleSystemStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// パーティクルシステムが停止したときにここが呼び出される</span>\n\n    <span class=\"token comment\">// プールから借りていたパーティクルを解放(返却)する</span>\n    Pool<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>Particle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 二度解放すると例外を吐く</span>\n    Pool<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>Particle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// InvalidOperationException:</span>\n    <span class=\"token comment\">// Trying to release an object that has already been released to the pool.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>二重解放は場合によっては危険な処理の可能性があるためでしょうか。もし例外を吐きたくない場合は<code>collectionCheck</code>を<code>false</code>にします。\nただし、当然ですが<code>OnReturnedToPool</code>は都度呼び出されます。</p>\n<h3 id=\"プールの破棄\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%BC%E3%83%AB%E3%81%AE%E7%A0%B4%E6%A3%84\" aria-label=\"プールの破棄 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プールの破棄</h3>\n<p>プールを破棄したい場合は<code>Clear</code>を呼び出します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clear Pool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// プールを破棄する</span>\n    Pool<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>プール内に存在するオブジェクトはそれぞれに対して<code>OnDestroyPoolObject</code>が呼び出されて破棄されます。</p>\n<h3 id=\"count-property\" style=\"position:relative;\"><a href=\"#count-property\" aria-label=\"count property permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Count Property</h3>\n<p>プール内のアクティブなオブジェクト数、非アクティブなオブジェクト数、トータルオブジェクト数を知りたい場合は、それぞれプロパティが用意されています。</p>\n<ul>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.CountActive.html\">Unity - Scripting API: Pool.ObjectPool_1.CountActive</a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.CountInactive.html\">Unity - Scripting API: Pool.ObjectPool_1.CountInactive</a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.CountAll.html\">Unity - Scripting API: Pool.ObjectPool_1.CountAll</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"All = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Pool<span class=\"token punctuation\">.</span>CountAll</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Inactive = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Pool<span class=\"token punctuation\">.</span>CountInactive</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Active = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Pool<span class=\"token punctuation\">.</span>CountActive</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>この中でも<code>CountInactive</code>が特に利用頻度が多いかもしれません。</p>\n<h3 id=\"iobjectpoolとobjectpoollistpool\" style=\"position:relative;\"><a href=\"#iobjectpool%E3%81%A8objectpoollistpool\" aria-label=\"iobjectpoolとobjectpoollistpool permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IObjectPoolとObjectPool、ListPool</h3>\n<p>紹介した<code>ObjectPool</code>以外にも<code>LinkedPool</code>というクラスが存在します。どちらのクラスも<code>IObjectPool</code>を実装しています。</p>\n<p>違いはプールの内部のデータ構造です。<code>ObjectPool</code>はスタックで、<code>ListPool</code>は連結リストでプールが実装されています。</p>\n<ul>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ObjectPool_1.html\">Unity - Scripting API: ObjectPool<T0></a>\n<blockquote>\n<p>The ObjectPool uses a stack to hold a collection of object instances for reuse and is not thread-safe.</p>\n</blockquote>\n</li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.LinkedPool_1.html\">Unity - Scripting API: LinkedPool<T0></a>\n<blockquote>\n<p>The LinkedPool uses a linked list to hold a collection of object instances for reuse. Note this is not thread-safe.</p>\n</blockquote>\n</li>\n</ul>\n<p>データ構造の違いにより<code>Get</code>や<code>Release</code>での参照や要素の追加の速度に影響がでそうです（未検証ですすいません。）。</p>\n<p>ただしどちらも<code>IObjectPool</code>を実装しているので、参照は<code>IObjectPool</code>で持つような実装にしておけば、<strong>実装を変更することなく、内部のデータ構造を入れ替えることが可能</strong>です。</p>\n<h2 id=\"collectionpool\" style=\"position:relative;\"><a href=\"#collectionpool\" aria-label=\"collectionpool permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CollectionPool</h2>\n<p>オブジェクトプール以外にも、配列や辞書、ハッシュをプールするためのAPIも合わせて実装されました。</p>\n<ul>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.CollectionPool_2.html\">Unity - Scripting API: CollectionPool&#x3C;T0,T1></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.DictionaryPool_2.html\">Unity - Scripting API: DictionaryPool&#x3C;T0,T1></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.HashSetPool_1.html\">Unity - Scripting API: HashSetPool<T0></a></li>\n<li><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.ListPool_1.html\">Unity - Scripting API: ListPool<T0></a></li>\n</ul>\n<p>利用シーンとして平均や合計を計算するための一時キャッシュなど、一時的にリストを用いてなにか計算したいケースがある場合などです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// vecを用いてなにか計算する（たとえば平均など）</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ただし、例えば上記のように<code>Update</code>で毎フレーム利用したい場合に毎フレームリストを確保するとアロケーションが毎フレーム発生して、GCによるパフォーマンス低下の原因となります。</p>\n<p>そこでプロパティとして事前にリストを確保してそれを使い回す実装を行うことで、この問題を回避することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> _vec <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    _vec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// _vecを用いて計算する</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>わざわざ一時的な計算のためにプロパティを持つと可読性が悪くなったりするため、このような場合にプールを使うとアロケーションなしでリストが利用できるので便利かもしれません。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>CollectionPool<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// プールから借りたリストを利用して計算する</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ここではvecがプールに解放される</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記では<code>CollectionPool</code>を用いましたが、利用するコレクションが決まっていれば<code>DictionaryPool</code>や<code>HashSetPool</code>、<code>ListPool</code>をそれぞれ用いるのが良さそうです。</p>\n<h2 id=\"genericpool\" style=\"position:relative;\"><a href=\"#genericpool\" aria-label=\"genericpool permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GenericPool</h2>\n<p>コレクションではなく通常のクラスのインスタンスをプールしたい場合は、<code>GenericPool</code>が利用できます。</p>\n<p><a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.GenericPool_1.html\">Unity - Scripting API: GenericPool<T0></a></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Pool</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericPoolExample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> someValue<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> someString<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// プールから取得</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> instance <span class=\"token operator\">=</span> GenericPool<span class=\"token operator\">&lt;</span>MyClass<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// instanceを用いてなにか処理</span>\n\n        <span class=\"token comment\">// オブジェクトの解放</span>\n        GenericPool<span class=\"token operator\">&lt;</span>MyClass<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>似たような実装に<a href=\"https://docs.unity3d.com/2021.1/Documentation/ScriptReference/Pool.UnsafeGenericPool_1.html\">UnsafeGenericPool</a>がありますが、違いとして二重解放時に例外を吐くかどうかです。\n具体的にはObjectPoolで紹介した<code>collectionCheck</code>で型が違い、<code>true</code>の場合の挙動を利用したい場合は場合は<code>GenericPool</code>を利用しう、<code>false</code>の挙動を利用したい場合は<code>UnsafeGenericPool</code>を利用すると良いでしょう。</p>\n<h2 id=\"気になった点\" style=\"position:relative;\"><a href=\"#%E6%B0%97%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E7%82%B9\" aria-label=\"気になった点 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>気になった点</h2>\n<p>ここまででObjectPoolの利用方法について簡単に説明しましたが、触っていていくつか気になった点を挙げておきます。</p>\n<ul>\n<li>プールされているオブジェクトが足りないときにはじめてオブジェクトをインスタンス化する挙動\n<ul>\n<li>ゲームでは初期化でまとめてオブジェクトをインスタンス化してプールして、<code>Get</code>では原則アロケーションしない実装のほうが好ましい。</li>\n<li>初期化フェーズで必要個数<code>Get</code>して、すぐに<code>Release</code>することで事前プールは可能なので問題ないか。</li>\n<li>オブジェクトが足りない場合にインスタンス化したいのをやめたい場合は、取得前に<code>CountInactive</code>を確認する実装に倒せば良さそう。\n<ul>\n<li>そもそもオブジェクトが足りない場合は仕様を見直したほうがよさそう。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>maxSize</code>を超えたオブジェクト生成を行った場合に、アクティブな要素数と<code>CountActive</code>が合わないケースがある\n<ul>\n<li>バグ？</li>\n<li>サンプルで <code>Create Particles</code>ボタンを叩きまくると再現する。</li>\n</ul>\n</li>\n<li>スレッドセーフではない点\n<ul>\n<li>基本問題なさそうだが...、そういう処理を書く場合は<code>Get</code>と<code>Release</code>時にロックが必要かも？</li>\n<li>Taskとか使うと場合によっては考慮が必要？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>2021.1から利用できるUnity標準のオブジェクトプールについて紹介しました。</p>","excerpt":"先日Unity Weeklyの仕込みで記事を漁っていたら、たまたまUnity標準のObjectPool実装が2021.1以降利用できることを知ったのでつぶやいてみたら、思った以上に反響がありました。せっかくなので簡単に触ってみたので記事を書きました。 検証には2021.2.0a…","fields":{"slug":"/2021/04/objectpool-in-unity-2021/"},"frontmatter":{"date":"April 05, 2021","type":null,"tags":["Unity","Unity 2021","オブジェクトプール","データ構造"],"title":"Unity 2021から利用できるUnity標準のオブジェクトプールについて","description":null,"eyecatch":null}}},"pageContext":{"id":"68747ee4-6b2d-5095-bfc9-1bc431616628"}},"staticQueryHashes":["1480509143","3159585216"]}