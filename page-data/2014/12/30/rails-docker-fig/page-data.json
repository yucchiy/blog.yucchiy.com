{"componentChunkName":"component---src-templates-post-tsx","path":"/2014/12/30/rails-docker-fig/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>個人で運用しているサービスをGKEにのせるついでに, 開発環境もDockerで統一しようと思い, FigでRailsの開発環境を構築したときのメモ.\n基本的には, <a href=\"http://yuuki.hatenablog.com/entry/next-is-docker\">Perlはもう古い、これからはDocker</a> のRails版である.</p>\n<p>以下の環境で動作確認を行った.</p>\n<ul>\n<li>OS・パッケージ管理\n<ul>\n<li>Mac OSX Yosemite 10.10.1</li>\n<li>Homebrew 0.9.5</li>\n</ul>\n</li>\n<li>ソフトウェア\n<ul>\n<li>Docker 1.4.1</li>\n<li>Boot2docker 1.4.1</li>\n<li>Fig 1.0.1</li>\n</ul>\n</li>\n</ul>\n<p>今回はサンプルに, <a href=\"http://railstutorial.jp/\">Ruby on Rails Tutorial</a> のサンプルソースを用いた. ただし, データベースの設定の都合,\n<a href=\"https://github.com/yucchiy/sample_app_rails_4\">いくつか変更を加えたもの</a>を用いた.</p>\n<p>サンプルコードは, <a href=\"https://github.com/yucchiy/dockerized-rails-app\">https://github.com/yucchiy/dockerized-rails-app</a> より確認できる.</p>\n<h2 id=\"準備\" style=\"position:relative;\"><a href=\"#%E6%BA%96%E5%82%99\" aria-label=\"準備 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>準備</h2>\n<p>Railsアプリを開発するときにRedisやMySQLなどのミドルウェアが必要になった時, Railsアプリケーションのはいったコンテナに\nミドルウェアを導入しないほうが良い. これは, Dockerでは<a href=\"http://yuuki.hatenablog.com/entry/next-is-docker\">1コンテナ1デーモンを前提に</a>していることなどがあげられる.</p>\n<p>しかし, 複数コンテナになると, <strong>コンテナ間のリンクなどの管理が面倒</strong>になるので, Figを用いる.</p>\n<h3 id=\"ベースとなるrubyのコンテナイメージを作成\" style=\"position:relative;\"><a href=\"#%E3%83%99%E3%83%BC%E3%82%B9%E3%81%A8%E3%81%AA%E3%82%8Bruby%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90\" aria-label=\"ベースとなるrubyのコンテナイメージを作成 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ベースとなるRubyのコンテナイメージを作成</h3>\n<p>まず, dockerでRailsの実行環境を構築する. 上記のサンプルを動作させるには, ruby 2.0.0 の実行環境が必要である.\nUbuntu14.04上でそのような環境を構築するために, 以下の<code>Dockerfile</code>を用意し, ベースとなるイメージを用意する.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM ubuntu:14.04\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install -yq --force-yes build-essential wget curl git ssh\n\nRUN apt-get install -yq --force-yes zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev &amp;&amp; \\\n    apt-get clean\n\nRUN git clone https://github.com/sstephenson/rbenv.git /root/.rbenv\nRUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build\nRUN /root/.rbenv/plugins/ruby-build/install.sh\nENV PATH /root/.rbenv/bin:$PATH\nRUN echo 'eval \"$(rbenv init -)\"' >> /etc/profile.d/rbenv.sh # or /etc/profile\nRUN echo 'eval \"$(rbenv init -)\"' >> .bashrc\n\nENV CONFIGURE_OPTS --disable-install-doc\nENV RUBY_VERSION 2.0.0-p598\n\nRUN rbenv install $RUBY_VERSION\nRUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc\nRUN bash -l -c 'rbenv global $RUBY_VERSION; gem install bundler;'</code></pre></div>\n<p>以下のコマンドでビルドを行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker build --tag=yucchiy/ruby:2.0.0 .</code></pre></div>\n<p>このような用途のイメージは使いまわしやすいので, 上記のようにして, イメージを分割しておくと良い(更にいうと ベースとなるOSに\ngitやsshといった, どこでも使いそうなパッケージをインストールしたベースパッケージを用意しておくとGood).\nこの時, <a href=\"https://github.com/y-uuki/dockerfiles/blob/master/perl/5.20.1/Dockerfile\">イメージサイズを小さくする工夫しておく</a>\nと, シュッとしてなにかと便利です.</p>\n<p>(余談だが, 特にMySQLなど, サーバーとクライアントで実行するコマンドが異なったり, 実行するコマンドが長くなると,\n<a href=\"https://github.com/yucchiy/dockerfiles/blob/master/mysql/Makefile\">Makefileでタスクを管理</a>すると, 何かと便利である.)</p>\n<h3 id=\"アプリケーションを実行するためのコンテナの作成\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"アプリケーションを実行するためのコンテナの作成 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アプリケーションを実行するためのコンテナの作成</h3>\n<p>上記のRubyコンテナを用いて, サンプルの実行環境を構築する. 具体的には以下の<code>Dockerfile</code>を用意する.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM yucchiy/ruby:2.0.0\n\nRUN \\\n    apt-get install -yq --force-yes mysql-client-5.5 libmysqlclient-dev libssl-dev nodejs &amp;&amp; \\\n    apt-get clean\n\nRUN mkdir -p /app\nWORKDIR /app\nCOPY ./sample_app_rails_4/Gemfile /app/Gemfile\nRUN bash -l -c 'bundle install'\n\nCOPY ./sample_app_rails_4 /app\n\nEXPOSE 3000\nCMD bash -l -c 'bundle exec rails s'</code></pre></div>\n<p>ポイントは<code>COPY ./sample_app_rails_4/Gemfile /app/Gemfile</code>で, 先に<code>Gemfile</code>をCOPYすることで,\n<code>Gemfile</code>に変更がない時は, <code>bundle install</code>のフルインストールを行わない\n<a href=\"http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\">テクニック</a>を利用している.</p>\n<h2 id=\"figによる複数コンテナの管理\" style=\"position:relative;\"><a href=\"#fig%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E6%95%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E7%AE%A1%E7%90%86\" aria-label=\"figによる複数コンテナの管理 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figによる複数コンテナの管理</h2>\n<p>Figを用いて, 複数コンテナの管理をする. 具体的には<code>fig.yml</code>を用意する. 以下に, サンプルソースを, MySQLを用いて\n実行するための<code>fig.yml</code>の例を示す.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.6</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=himitsunopassword\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306\"</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> /storage/mysql<span class=\"token punctuation\">:</span>/var/lib/mysql\n<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> bash <span class=\"token punctuation\">-</span>l <span class=\"token punctuation\">-</span>c 'bundle exec rails server <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>port=3000 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>binding=0.0.0.0'\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3000:3000\"</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ./sample_app_rails_4<span class=\"token punctuation\">:</span>/app\n  <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> db</code></pre></div>\n<p><a href=\"http://www.fig.sh/yml.html\">公式ドキュメント</a>と, <a href=\"http://www.fig.sh/rails.html\">公式のRails環境の構築方法</a>を参考にした.</p>\n<p>今回, MySQLのコンテナとして, <a href=\"https://registry.hub.docker.com/_/mysql/\">https://registry.hub.docker.com/_/mysql/</a>を用いた.\n設定を変更するにはいくつか方法があるが, <code>/etc/mysql</code>が<code>VOLUME</code>に登録されているらしく,\n複数の設定を変更したいときは, <code>/home/my-etcmysql:/etc/mysql</code>という感じで<code>/etc/mysql</code>に自分のディレクトリをマウントすることで,\nごっそり設定ファイルを入れ替えることができる.</p>\n<p>次に, 以下のコマンドでコンテナのビルドを行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ fig build</code></pre></div>\n<h3 id=\"データベースの設定\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E8%A8%AD%E5%AE%9A\" aria-label=\"データベースの設定 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>データベースの設定</h3>\n<p>figで管理しているデータベースの設定は, <a href=\"https://docs.docker.com/userguide/dockerlinks/\">環境変数を介して取得できる</a>.\nアプリケーションのコンテナに設定されている環境変数は, 以下のコマンドで確認できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ fig run web env</code></pre></div>\n<p>これを用いてデータベースの接続先を設定するには, 以下のように記述する.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">development</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">adapter</span><span class=\"token punctuation\">:</span> mysql2\n  <span class=\"token key atrule\">encoding</span><span class=\"token punctuation\">:</span> utf8\n  <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> sample_app_rails_4_development\n  <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> root\n  <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> &lt;%= ENV<span class=\"token punctuation\">[</span><span class=\"token string\">'DB_ENV_MYSQL_ROOT_PASSWORD'</span><span class=\"token punctuation\">]</span> %<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> &lt;%= ENV<span class=\"token punctuation\">[</span><span class=\"token string\">'DB_PORT_3306_TCP_ADDR'</span><span class=\"token punctuation\">]</span> %<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> &lt;%= ENV<span class=\"token punctuation\">[</span><span class=\"token string\">'DB_PORT_3306_TCP_PORT'</span><span class=\"token punctuation\">]</span> %<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></code></pre></div>\n<h3 id=\"データベースの作成マイグレーション\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"データベースの作成マイグレーション permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>データベースの作成・マイグレーション</h3>\n<p><code>fig run</code>を用いて, 以下のように行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ fig run web bash -l -c 'bundle exec rake db:create db:migrate'</code></pre></div>\n<h3 id=\"figによるコンテナの起動\" style=\"position:relative;\"><a href=\"#fig%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E8%B5%B7%E5%8B%95\" aria-label=\"figによるコンテナの起動 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figによるコンテナの起動</h3>\n<p><code>fig up</code>で, 管理しているコンテナをまとめて起動できる. また, 個別に起動をすることも可能である.</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Figを用いて, 複数コンテナを管理する方法を紹介した. 今後は, 実際に開発する際のノウハウ(テストなど)や, 本番環境での運用についてまとめたい.</p>\n<h2 id=\"参考環境構築\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\" aria-label=\"参考環境構築 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考(環境構築)</h2>\n<h3 id=\"homebrewによるツールのインストール\" style=\"position:relative;\"><a href=\"#homebrew%E3%81%AB%E3%82%88%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"homebrewによるツールのインストール permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Homebrewによるツールのインストール</h3>\n<p>今回想定する環境では, 今回利用するDocker・Boot2docker・Figは, いずれもHomebrewでインストールできる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install docker boot2docker fig</code></pre></div>\n<h3 id=\"boot2dockerのセットアップ\" style=\"position:relative;\"><a href=\"#boot2docker%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-label=\"boot2dockerのセットアップ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boot2dockerのセットアップ</h3>\n<p>boot2dockerを利用するためには, まず初期化を行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ boot2docker init</code></pre></div>\n<p>次に, boot2dockerに環境変数を設定する. 以下のコマンドを実行することで, 一括で設定を行うことができる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$(boot2docker initshell)</code></pre></div>\n<p>以下を実行することで出力される設定をそのまま<code>.bashrc</code>に書いても良いが,\n<a href=\"http://qiita.com/deeeet/items/518704402e9bc5995ecc\">このコマンドをシェル起動時都度実行する</a>ほうが良い.</p>\n<p>設定後は, 以下のコマンドでboot2dockerを操作できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ boot2docker start # 起動\n$ boot2docker stop  # 終了</code></pre></div>\n<h3 id=\"参考ページ\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E3%83%9A%E3%83%BC%E3%82%B8\" aria-label=\"参考ページ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考ページ</h3>\n<ul>\n<li><a href=\"http://yuuki.hatenablog.com/entry/next-is-docker\">Perlはもう古い、これからはDocker</a></li>\n<li><a href=\"http://qiita.com/cieux1@github/items/b2294f8adddefb357a37\">【翻訳】DockerとVagrantによるRails開発環境</a></li>\n<li><a href=\"http://deeeet.com/writing/2014/12/01/docker-link-pattern/\">Dockerコンテナ接続パターン (2014年冬)</a></li>\n</ul>","excerpt":"はじめに 個人で運用しているサービスをGKEにのせるついでに, 開発環境もDockerで統一しようと思い, FigでRailsの開発環境を構築したときのメモ.\n基本的には, Perlはもう古い、これからはDocker のRails版である. 以下の環境で動作確認を行った. OS・パッケージ管理 Mac OSX Yosemite 10.10.1 Homebrew 0.9.5 ソフトウェア Docker 1.4.1 Boot2docker 1.4.1 Fig 1.0.1 今回はサンプルに, Ruby…","fields":{"slug":"/2014/12/30/rails-docker-fig/"},"frontmatter":{"date":"December 30, 2014","type":null,"tags":null,"title":"FigでRailsの開発環境を構築する","description":null,"eyecatch":null}}},"pageContext":{"id":"19a41f03-9f3e-52b4-a2ac-86fb02bed080"}},"staticQueryHashes":["1480509143","3159585216"]}