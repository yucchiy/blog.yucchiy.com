{"componentChunkName":"component---src-templates-post-tsx","path":"/2017/05/08/build-executable-singlefile-phar-withphar-composer/","result":{"data":{"markdownRemark":{"html":"<p>普段私は、Bashなどで書くには少し複雑なスクリプトをPHPで書くこと多いです。ところで今日のPHPは、<a href=\"https://getcomposer.org/\">Composer</a>を用いてパッケージの管理をすることが普通かと思います。</p>\n<p>Composerには<a href=\"https://getcomposer.org/doc/articles/vendor-binaries.md#what-is-a-vendor-binary-\">vendor binary</a>と呼ばれる、コマンドラインツールとして利用するスクリプトを管理するための仕組みが存在します。\nこれを使うことPHPで作成するコマンドラインツールで外部ライブラリの利用などが簡単にでき、ツールの実装が楽になります。</p>\n<p>ですが、上記で作成したコマンドラインツールを実行するには、ツールが利用している外部ライブラリの<a href=\"https://getcomposer.org/doc/01-basic-usage.md#autoloading\">Autoload</a>のために、<strong>プロジェクトのディレクトリをそのままコピーしない</strong>といけなく、持ち運びは若干不便かと思います。</p>\n<p>今回紹介する<a href=\"https://github.com/clue/phar-composer\">phar-composer</a>は、vendor binaryを実行可能な1ファイルのphar(PHP Archive)に変更してくれるツールです。\nこれを用いることで<strong>利用する外部ライブラリを埋め込んだ</strong>スクリプトを作成してくれるため、上記の不便さを解消できます。</p>\n<h2 id=\"インストール\" style=\"position:relative;\"><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"インストール permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インストール</h2>\n<p>2つの方法があります。</p>\n<ol>\n<li><code>phar-composer.phar</code>を利用する</li>\n<li><code>composer.json</code>に依存関係を書く</li>\n</ol>\n<p>1は<a href=\"https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx\">Composer</a>のように、それ単体で実行可能なpharを落としてきて利用する方法で、2はプロジェクトの依存関係として、<code>phar-composer</code>を定義し、vendor binaryとして利用する方法です。\n公式では1を推奨しています。</p>\n<h2 id=\"利用方法\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95\" aria-label=\"利用方法 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用方法</h2>\n<p>HTTP Clientの<a href=\"http://docs.guzzlephp.org/en/latest/\">Guzzle</a>を利用するスクリプトを書いて、pharを作ってみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir sample-phar-compose\n$ cd sample-phar-compose\n$ composer.phar init # composer.jsonが作られる\n$ vim composer.json # composer.jsonを編集して、requireとbinの項目を追記する\n$ cat composer.json \n{\n    \"name\": \"yucchiy/sample-phar-composer\",\n    \"description\": \"phar-composer sample\",\n    \"authors\": [\n        {\n            \"name\": \"Yuichiro MUKAI\"\n        }\n    ],\n    \"bin\": [\n        \"bin/sample.php\"\n    ],\n    \"require\": {\n        \"guzzlehttp/guzzle\": \"~6.0\"\n    }\n}\n$ composer.phar update # 依存するライブラリをダウンロードし、vendor/autoload.php を作る</code></pre></div>\n<p><code>bin/sample.php</code>をvendor binaryとして登録したので、このファイルを編集します。\n今回は、Guzzleの<a href=\"http://docs.guzzlephp.org/en/latest/\">サンプル</a>をそのまま動かしてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?php\n\nuse GuzzleHttp\\Client;\n\n$client = new GuzzleHttp\\Client();\n\n// Send an asynchronous request.\n$request = new \\GuzzleHttp\\Psr7\\Request('GET', 'http://httpbin.org');\n$promise = $client->sendAsync($request)->then(function ($response) {\n    echo 'I completed! ' . $response->getBody();\n});\n\n$promise->wait();</code></pre></div>\n<p>そのまま実行してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ php bin/sample.php \nI completed! &lt;!DOCTYPE html>\n... </code></pre></div>\n<h3 id=\"pharファイルを作成する\" style=\"position:relative;\"><a href=\"#phar%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\" aria-label=\"pharファイルを作成する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pharファイルを作成する</h3>\n<p>スクリプトが作成できたので、pharファイルを作成してみます。<code>phar-composer</code>は前述した1の方法でのインストールを前提とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ phar-composer.phar build . \n$ phar-composer.phar build .\nYour configuration disabled writing phar files (phar.readonly = On), please update your configuration or run with \"php -d phar.readonly=off /Users/a13946/bin/phar-composer.phar\", trying to re-spawn with correct config\n[1/1] Creating phar sample-phar-composer.phar\n  - Remove existing file sample-phar-composer.phar (620.5 KiB)\n  - Adding main package\n    Adding whole project directory \"/Users/a13946/Desktop/hoge/\"\n  - Adding composer base files\n  - Adding dependency \"guzzlehttp/promises\" from \"vendor/guzzlehttp/promises/\"\n    Adding whole project directory \"/Users/a13946/Desktop/hoge/vendor/guzzlehttp/promises/\"\n  - Adding dependency \"psr/http-message\" from \"vendor/psr/http-message/\"\n    Adding whole project directory \"/Users/a13946/Desktop/hoge/vendor/psr/http-message/\"\n  - Adding dependency \"guzzlehttp/psr7\" from \"vendor/guzzlehttp/psr7/\"\n    Adding whole project directory \"/Users/a13946/Desktop/hoge/vendor/guzzlehttp/psr7/\"\n  - Adding dependency \"guzzlehttp/guzzle\" from \"vendor/guzzlehttp/guzzle/\"\n    Adding whole project directory \"/Users/a13946/Desktop/hoge/vendor/guzzlehttp/guzzle/\"\n  - Setting main/stub\n    Using referenced chmod 0644\n    Applying chmod 0644\n\n    OK - Creating sample-phar-composer.phar (620.5 KiB) completed after 0.3s</code></pre></div>\n<p>pharファイルの作成には、サブコマンドの<code>build</code>を用います。第2引数にはビルド対象を指定します。結構<a href=\"https://github.com/clue/phar-composer#phar-composer-build\">いろいろな指定方法</a>があるのですが、<code>composer.json</code>が存在するディレクトリを指定すればよい、ということを覚えておけば十分そうです。</p>\n<p>これで生成される<code>sample-phar-composer.phar</code>が、お目当てのスクリプトファイルになります。\n実行してみます。(http通信が成功していれば&#x26;外部のコンテンツが変わってなければ)先程と同じ結果が得られます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">php sample-phar-composer.phar\nI completed! &lt;!DOCTYPE html>\n... \n</code></pre></div>\n<h2 id=\"スクリプト作成のコツ\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84\" aria-label=\"スクリプト作成のコツ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スクリプト作成のコツ</h2>\n<p>コマンドラインツールとしてpharを作成する場合、そのpharファイルはサイズが小さいことが望ましいかと思います。</p>\n<p>(実装を追っていないのではっきりしたことは言えないのですが、依存関係を足してみたりして試した限りでは)phar-composerではautoloadしているPHPファイルをスクリプトに埋め込む際に、そのスクリプト内での利用に関わらず、Composerで解決したパッケージを埋め込んでそうです。</p>\n<p>なので</p>\n<ul>\n<li>1スクリプト1プロジェクトにしておく</li>\n<li>必要ない依存関係は書かない。または依存するパッケージが少なくなるように心がける</li>\n</ul>\n<p>とすることで、作成されるpharを小さくできそうです。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>phar-composerを用いることで、vendor binaryを1ファイルの実行可能なpharにビルドでき、気軽に持ち運べるPHPスクリプトを簡単に作ることができました。</p>","excerpt":"普段私は、Bashなどで書くには少し複雑なスクリプトをPHPで書くこと多いです。ところで今日のPHPは、Composerを用いてパッケージの管理をすることが普通かと思います。 Composerにはvendor binaryと呼ばれる、コマンドラインツールとして利用するスクリプトを管理するための仕組みが存在します。\nこれを使うことPHP…","fields":{"slug":"/2017/05/08/build-executable-singlefile-phar-withphar-composer/"},"frontmatter":{"date":"May 08, 2017","type":null,"tags":["PHP","Composer","Phar"],"title":"Composer管理のPHPプロジェクトから実行可能なpharを作る","description":"phar-composerというComposerプロジェクトから実行可能なpharを作ることで、気軽に持ち運べるコマンドラインツールをPHPで手軽に作れて便利","eyecatch":null}}},"pageContext":{"id":"e23d1304-30bd-5a88-ab76-0fdf561cf080"}},"staticQueryHashes":["1480509143","3159585216"]}