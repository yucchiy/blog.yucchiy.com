{"componentChunkName":"component---src-templates-post-tsx","path":"/project/unity-weekly/210/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"unity-officials\" style=\"position:relative;\"><a href=\"#unity-officials\" aria-label=\"unity officials permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity Officials</h2>\n<h3 id=\"unityshorttips-重心の調整\" style=\"position:relative;\"><a href=\"#unityshorttips-%E9%87%8D%E5%BF%83%E3%81%AE%E8%AA%BF%E6%95%B4\" aria-label=\"unityshorttips 重心の調整 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UnityShortTips: 重心の調整</h3>\n<p><a href=\"https://x.com/unity_japan/status/1888784964071641305\">Xユーザーのユニティ・テクノロジーズ・ジャパンさん: 「Unity の物理挙動でゲームを作るのは楽しいですよね！🎮✨ でも意外と見落とされがちなのが重心の調整です。これを変えるだけで動きがガラッと変わります🎯⚡ ぜひ試してみてください！ #UnityJapan #UnityShortTips https://t.co/S4kblKMlo1」 / X</a></p>\n<p>Physicsにおける重心位置の調整方法について紹介しています。</p>\n<h2 id=\"articles\" style=\"position:relative;\"><a href=\"#articles\" aria-label=\"articles permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Articles</h2>\n<h3 id=\"unity6--urp-で動くパストレーサーを実装してみよう-part-2\" style=\"position:relative;\"><a href=\"#unity6--urp-%E3%81%A7%E5%8B%95%E3%81%8F%E3%83%91%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B5%E3%83%BC%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86-part-2\" aria-label=\"unity6  urp で動くパストレーサーを実装してみよう part 2 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity6 + URP で動くパストレーサーを実装してみよう Part 2</h3>\n<p><a href=\"https://blog.siliconstudio.co.jp/2025/02/2146/\">Unity6 + URP で動くパストレーサーを実装してみよう Part 2 - シリコンスタジオBlog ｜ CG・ゲームエンジン・機械学習・ビジュアライゼーション</a></p>\n<p>Unity 6 &#x26; URPのカスタムレンダーパス上に独自のパストレーサーを実装する連載記事で、本記事ではURP相当のライティングおよびレイトレーシングを用いた影を実装する方法について解説しています。</p>\n<p>前回の記事は、下記より確認できます。</p>\n<p><a href=\"https://blog.siliconstudio.co.jp/2024/12/1923/\">Unity6 + URP で動くパストレーサーを実装してみよう Part 1 - シリコンスタジオBlog ｜ CG・ゲームエンジン・機械学習・ビジュアライゼーション</a></p>\n<h3 id=\"シェーダーでひびを入れるその1フラグメントシェーダー編\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC%E3%81%A7%E3%81%B2%E3%81%B3%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B%E3%81%9D%E3%81%AE1%E3%83%95%E3%83%A9%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%88%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC%E7%B7%A8\" aria-label=\"シェーダーでひびを入れるその1フラグメントシェーダー編 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シェーダーでひびを入れる［その1：フラグメントシェーダー編］</h3>\n<p><a href=\"https://zenn.dev/lilytechlab/articles/518b5e29738f9b\">【Unity】シェーダーでひびを入れる［その1：フラグメントシェーダー編］</a></p>\n<p>フラグメントシェーダーで、プロシージャルにオブジェクトにひびを描く方法について解説しています。</p>\n<h3 id=\"unity-ecs-v132を使ってゲームを作ってみました-3system編\" style=\"position:relative;\"><a href=\"#unity-ecs-v132%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-3system%E7%B7%A8\" aria-label=\"unity ecs v132を使ってゲームを作ってみました 3system編 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity ECS v1.3.2を使ってゲームを作ってみました (3)―System編</h3>\n<p><a href=\"https://developer.aiming-inc.com/unity/unity-ecs-sample-game-3-system/\">[Unity]Unity ECS v1.3.2を使ってゲームを作ってみました (3)―System編 │ Aiming 開発者ブログ</a></p>\n<p>Unity ECS を用いて簡単なゲームを制作する連載記事で、本記事ではSystemの実装方法について紹介しています。</p>\n<p>また、過去の記事は下記より確認できます。</p>\n<ul>\n<li><a href=\"https://developer.aiming-inc.com/unity/unity-ecs-sample-game-1-introduction/\">[Unity]Unity ECS v1.3.2を使ってゲームを作ってみました (1)―紹介編 │ Aiming 開発者ブログ</a></li>\n<li><a href=\"https://developer.aiming-inc.com/unity/unity-ecs-sample-game-2-component/\">[Unity]Unity ECS v1.3.2を使ってゲームを作ってみました (2)―Component編 │ Aiming 開発者ブログ</a></li>\n</ul>\n<h3 id=\"古い-c-環境でも-taskwheneach-を使いたい\" style=\"position:relative;\"><a href=\"#%E5%8F%A4%E3%81%84-c-%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%82-taskwheneach-%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\" aria-label=\"古い c 環境でも taskwheneach を使いたい permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>古い C# 環境でも Task.WhenEach を使いたい</h3>\n<p><a href=\"https://qiita.com/sator_imaging/items/0facece38f6e1c03bd19\">古い C# 環境でも Task.WhenEach を使いたい #Unity - Qiita</a></p>\n<p>C# 9.0で導入された <code>Task.WhenEach</code> を .NET Standard 2.1 上でも利用できるようにする方法を紹介しています。</p>\n<h3 id=\"unityで-unitytestとtestcase-testcasesource-のテストケースを使う場合の一工夫\" style=\"position:relative;\"><a href=\"#unity%E3%81%A7-unitytest%E3%81%A8testcase-testcasesource-%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88%E3%81%AE%E4%B8%80%E5%B7%A5%E5%A4%AB\" aria-label=\"unityで unitytestとtestcase testcasesource のテストケースを使う場合の一工夫 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unityで [UnityTest]と[TestCase, TestCaseSource] のテストケースを使う場合の一工夫</h3>\n<p><a href=\"https://zenn.dev/masaki_mori72/articles/86d95f93a6acbe\">Unityで [UnityTest]と[TestCase, TestCaseSource] のテストケースを使う場合の一工夫</a></p>\n<p><code>UnityTest</code> で非同期のテストを行う際の、<code>TestCase</code> や <code>TestCaseSource</code> によるテストケース作成の注意点についてまとめています。</p>\n<h3 id=\"特定のアセットの変更や移動削除を禁止したり確認を出したり出来る-assetmodificationprocessoｋr\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%82%BB%E3%83%83%E3%83%88%E3%81%AE%E5%A4%89%E6%9B%B4%E3%82%84%E7%A7%BB%E5%8B%95%E5%89%8A%E9%99%A4%E3%82%92%E7%A6%81%E6%AD%A2%E3%81%97%E3%81%9F%E3%82%8A%E7%A2%BA%E8%AA%8D%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F%E3%82%8A%E5%87%BA%E6%9D%A5%E3%82%8B-assetmodificationprocesso%EF%BD%8Br\" aria-label=\"特定のアセットの変更や移動削除を禁止したり確認を出したり出来る assetmodificationprocessoｋr permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特定のアセットの変更や移動、削除を禁止したり確認を出したり出来る AssetModificationProcessoｋr</h3>\n<p><a href=\"https://kan-kikuchi.hatenablog.com/entry/AssetModificationProcessor\">特定のアセットの変更や移動、削除を禁止したり確認を出したり出来る AssetModificationProcessor【Unity】【エディタ拡張】 - (:3[kanのメモ帳]</a></p>\n<p><code>AssetModificationProcessor</code> によってアセットの移動・変更前のイベントをフックすることで、特定のアセットの変更や削除に対して警告を出す方法について紹介しています。</p>\n<h3 id=\"c-80以降のswitch式で条件分岐をスッキリさせる\" style=\"position:relative;\"><a href=\"#c-80%E4%BB%A5%E9%99%8D%E3%81%AEswitch%E5%BC%8F%E3%81%A7%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E3%82%92%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%81%95%E3%81%9B%E3%82%8B\" aria-label=\"c 80以降のswitch式で条件分岐をスッキリさせる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C# 8.0以降のswitch式で条件分岐をスッキリさせる</h3>\n<p><a href=\"https://zenn.dev/ryuryu_game/articles/7bf498798212c0\">C# 8.0以降のswitch式で条件分岐をスッキリさせる</a></p>\n<p>戻り値を返すような条件分岐をswitch式を用いて実装する方法からパターンマッチの記述方法、switch式を利用するメリットについてまとめています。</p>\n<h3 id=\"unityenginepoolの理解-コレクションに対応するobjectpoolを使おう\" style=\"position:relative;\"><a href=\"#unityenginepool%E3%81%AE%E7%90%86%E8%A7%A3-%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8Bobjectpool%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\" aria-label=\"unityenginepoolの理解 コレクションに対応するobjectpoolを使おう permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UnityEngine.Poolの理解 コレクションに対応するObjectPoolを使おう</h3>\n<p><a href=\"https://zenn.dev/masaki_mori72/articles/2f641ad4d364bb\">UnityEngine.Poolの理解 コレクションに対応するObjectPoolを使おう</a></p>\n<p>Unity標準のオブジェクトプール実装である <code>UnityEngine.Pool</code> を用いた、文字列リストのプールとその破棄までの実装を紹介しています。</p>\n<h3 id=\"unity-sentis-yolov8-nano-で物体検知\" style=\"position:relative;\"><a href=\"#unity-sentis-yolov8-nano-%E3%81%A7%E7%89%A9%E4%BD%93%E6%A4%9C%E7%9F%A5\" aria-label=\"unity sentis yolov8 nano で物体検知 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity Sentis YOLOv8 Nano で物体検知</h3>\n<p><a href=\"https://zenn.dev/bon_ninax/articles/253b1089ec4b96\">Unity Sentis YOLOv8 Nano で物体検知</a></p>\n<p>Unity Sentis上でYOLOv8 Nanoモデルを動かしてリアルタイムで物体検知を行う方法について紹介しています。</p>","excerpt":"Unity Officials UnityShortTips: 重心の調整 Xユーザーのユニティ・テクノロジーズ・ジャパンさん: 「Unity の物理挙動でゲームを作るのは楽しいですよね！🎮✨ でも意外と見落とされがちなのが重心の調整です。これを変えるだけで動きがガラッと変わります🎯⚡ ぜひ試してみてください！ #UnityJapan #UnityShortTips https://t.co/S4kblKMlo1」 / X Physics…","fields":{"slug":"/project/unity-weekly/210/"},"frontmatter":{"date":"February 10, 2025","type":"unity-weekly","tags":["Unity Weekly","Unity"],"title":"Unity Weekly 210","description":"2025/02/10週のUnity Weeklyです。Physicsの重心の調整、パストレーサー、Unity ECSなどについて取り上げています。","eyecatch":null}}},"pageContext":{"id":"235062a4-7916-5a01-87fb-085dd423ad53"}},"staticQueryHashes":["1480509143","3159585216"]}