{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2016/05/05/unity-vim-omnisharp/","result":{"data":{"markdownRemark":{"html":"<p>最近Unityプログラマにジョブチェンジしたのだが, MonoDevelopが地味に使いづらいので, Vim + OmniSharpで環境を構築してみたら, 思った以上に良かったので, メモ代わりにブログに書いた.\n地味にハマりどころは多かったので, 参考になればと思う.</p>\n<p>前提として, monoの3系以降をインストールする必要がある. brewを使っていれば, <code>brew install mono</code>でさくっとインストールできるはずだ.</p>\n<h3 id=\"インストール\" style=\"position:relative;\"><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"インストール permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インストール</h3>\n<p>今回C#の環境を構築するにあたって利用したのは<a href=\"https://github.com/OmniSharp/omnisharp-vim\">omnisharp-vim</a>だ.</p>\n<p>omnisharp-vimは, <a href=\"https://github.com/OmniSharp/omnisharp-server\">OmniSharp Server</a>を介して補完や検索・リファクタリングといった機能を提供する.\nクライアント・サーバーモデルを採用しているため, サーバーと通信できるエディタであれば同じように機能を利用できる.</p>\n<p><a href=\"https://github.com/Shougo/neobundle.vim\">NeoBundle</a>をインストールしていれば, 以下を<code>.vimrc</code>に足すだけでインストールできる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NeoBundleLazy 'OmniSharp/omnisharp-vim', {\n      \\   'autoload': { 'filetypes': [ 'cs', 'csi', 'csx' ] },\n      \\   'build': {\n      \\     'windows' : 'msbuild server/OmniSharp.sln',\n      \\     'mac': 'xbuild server/OmniSharp.sln',\n      \\     'unix': 'xbuild server/OmniSharp.sln',\n      \\   },\n      \\ }</code></pre></div>\n<p>OmniSharpは, 前述のとおりクライアント・サーバーモデルとして動作するため, サーバーのビルドする必要がある.\nそのため, buildの項目でサーバーをビルドするためのコマンドを記述している.</p>\n<p>しかし, 2016/05/05時点で, OSX 10.10.5 + mono 4.2.3 の環境でビルドに失敗したため, サブモジュールを最新にして, サーバーを最新にしてビルドが通るように<a href=\"https://github.com/yucchiy/omnisharp-vim\">修正した</a>.</p>\n<p>OmniSharpが動作するためにはpythonが必要である. Vimがpythonをサポートしているかどうかは以下のコマンドで確認できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">:echo has('python')</code></pre></div>\n<p>必須ではないが, 他にもいくつかプラグインをインストールすることで, より便利に利用することができる.</p>\n<ul>\n<li><a href=\"https://github.com/Shougo/neocomplete.vim\">NeoComplete</a></li>\n<li><a href=\"https://github.com/tpope/vim-dispatch\">vim-dispatch</a></li>\n<li><a href=\"https://github.com/Shougo/unite.vim\">unite.vim</a></li>\n</ul>\n<p><a href=\"https://github.com/tpope/vim-dispatch\">vim-dispatch</a>は, インストールしておくことで, OmniSharpサーバーを自動で起動してくれるようになる.\nもし自動的にサーバーを起動する設定を切りたければ, <code>let g:OmniSharp_start_server = 0</code>を設定しておけば良い.</p>\n<p>また<a href=\"https://github.com/Shougo/unite.vim\">unite.vim</a>か, <a href=\"https://github.com/ctrlpvim/ctrlp.vim\">ctrlp.vim</a>をインストールし, <code>g:OmniSharp_selector_ui</code>で設定しておくことで, それらを選択時UIに利用できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let g:OmniSharp_selector_ui = 'unite'\nlet g:OmniSharp_selector_ui = 'ctrlp'</code></pre></div>\n<h2 id=\"使い方\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"使い方 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h2>\n<p>基本的に, サーバーを起動している状態で, コマンドを発行することで各種機能を利用できる.</p>\n<p><code>:OmniSharpStartServer</code>コマンドを実行すると, 現在開いているファイルパスから<a href=\"https://github.com/OmniSharp/omnisharp-vim/blob/3e6670a84976e697481c7784a1116ab0cbd8459a/autoload/OmniSharp.vim#L454\">いい感じに</a>(?)プロジェクトファイル(<code>*.sln</code>)を探してきて,\nサーバーの起動オプションに指定してくれる. そのため, Unityのプロジェクトを開いていれば, <code>UnityEngine</code>などのUnity関係のクラスも補完の対象に入る. これはとても便利.</p>\n<p>以下に, よく使いそうなコマンドを紹介する.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">コマンド</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>:OmniSharpGotoDefinition</code></td>\n<td align=\"left\">コードの定義元へジャンプする</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpRename</code></td>\n<td align=\"left\">カーソル位置にある変数やクラス名をリネームする</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpCodeFormat</code></td>\n<td align=\"left\">コードフォーマットを行う</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpFindImplementations</code></td>\n<td align=\"left\">実装の一覧を表示する</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpFindUsages</code></td>\n<td align=\"left\">呼び出し元の一覧を検索して表示する</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpGetCodeActions</code></td>\n<td align=\"left\">カーソル位置にあわせて様々なアクションを行う</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpReloadSolution</code></td>\n<td align=\"left\">ソリューションの再読み込みを行う</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpBuild</code></td>\n<td align=\"left\">現在ひらいているファイルをビルドする</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:OmniSharpRunTests</code></td>\n<td align=\"left\">テストを実行する</td>\n</tr>\n</tbody>\n</table>\n<p>コマンドを直打ちすると大変なので, よく使うものはショートカットに登録しておくと良い.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>fi :OmniSharpFindImplementations&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>ft :OmniSharpFindType&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>fs :OmniSharpFindSymbol&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>fu :OmniSharpFindUsages&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>fm :OmniSharpFindMembers&lt;cr>\n\nautocmd FileType cs nnoremap &lt;leader>x  :OmniSharpFixIssue&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>fx :OmniSharpFixUsings&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>tt :OmniSharpTypeLookup&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>d  :OmniSharpDocumentation&lt;cr>\n\nautocmd FileType cs nnoremap &lt;C-K> :OmniSharpNavigateUp&lt;cr>\nautocmd FileType cs nnoremap &lt;C-J> :OmniSharpNavigateDown&lt;cr>\n\nautocmd FileType cs nnoremap &lt;leader>rn :OmniSharpRename&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>cf :OmniSharpCodeFormat&lt;cr>\nautocmd FileType cs nnoremap &lt;leader>rl :OmniSharpReloadSolution&lt;cr></code></pre></div>\n<p>NeoCompleteを入れている場合は, オムニ補完を有効にしておくとコーディングが捗る.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">autocmd FileType cs setlocal omnifunc=OmniSharp#Complete\n\nif !exists('g:neocomplete#sources#omni#input_patterns')\n  let g:neocomplete#sources#omni#input_patterns = {}\nendif\n\nlet g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\\);]'</code></pre></div>\n<h3 id=\"omnisharpサーバーの設定\" style=\"position:relative;\"><a href=\"#omnisharp%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A\" aria-label=\"omnisharpサーバーの設定 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OmniSharpサーバーの設定</h3>\n<p>OmniSharpサーバーの設定を弄りたくなる時があると思う.\n例えば <code>:OmniSharpCodeFormat</code>は, 現在開いているファイルのコードフォーマットを行ってくれるが, このフォーマットのルールを変更したい時などだ.</p>\n<p>OmniSharpサーバーでは, デフォルトで<code>OmniSharp.exe</code>と同じファイルパス以下の<code>config.json</code>に設定が記述されている.\nまた, サーバー起動オプションで<code>-config &#x3C;path/to/config.json></code>を指定することで設定を変更するすることもできる.</p>\n<p>omnisharp-vimでは, ソリューションファイル以下に, デフォルトで<code>omnisharp.json</code>というJSONファイルが存在すれば, 上記のオプションへそのファイルを指定してくれる.\nこのファイル名は, <code>g:Omnisharp_server_config_name</code>により<a href=\"https://github.com/OmniSharp/omnisharp-vim#how-to-use\">変更できる</a>.</p>\n<p><a href=\"https://github.com/OmniSharp/omnisharp-server/blob/2d35d0b14d6b0973d72dfe0eb78a8121055bf0b6/OmniSharp/config.json\">設定ファイル</a>では, 今のところテキストエディタの設定やテストランナー・コードフォーマットについて設定できるようだ.</p>\n<h3 id=\"omnisharpcodeformatの挙動を変更してみる\" style=\"position:relative;\"><a href=\"#omnisharpcodeformat%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"omnisharpcodeformatの挙動を変更してみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>:OmniSharpCodeFormat</code>の挙動を変更してみる</h3>\n<p>試しに, <code>:OmniSharpCodeFormat</code>の挙動を変更してみる. デフォルトの設定は<a href=\"https://github.com/OmniSharp/omnisharp-server/blob/2d35d0b14d6b0973d72dfe0eb78a8121055bf0b6/OmniSharp/config.json#L52\">ここで確認できる</a>.</p>\n<p>この設定は, OmniSharpが利用している<a href=\"https://github.com/icsharpcode/NRefactory/\">NRefactory</a>の<a href=\"https://github.com/icsharpcode/NRefactory/blob/79f9a95f93003ad77214be22a1c31387d24e5491/ICSharpCode.NRefactory.CSharp/Formatter/CSharpFormattingOptions.cs\">Formatter/CSharpFormattingOptions.cs</a>に, JSONのキーの頭文字を大文字にしたプロパティ名に対してマッピングが行われる.</p>\n<p>ここで, 対応するプロパティがEnumの場合は, 整数値がEnumにマッピングされる. Enumは値の指定がなければ最初に定義されている列挙を<code>0</code>として, 順番に<code>1</code>ずつ足された値を取る.\n例えば<code>arrayInitializerWrapping</code>に, <code>2</code>が指定されている場合は, <code>Wrapping</code>の定義が以下のとおりなので, <code>WrapAlways</code>として解釈される.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// https://github.com/icsharpcode/NRefactory/blob/79f9a95f93003ad77214be22a1c31387d24e5491/ICSharpCode.NRefactory.CSharp/Formatter/CSharpFormattingOptions.cs#L51</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Wrapping</span> <span class=\"token punctuation\">{</span>\n    DoNotChange<span class=\"token punctuation\">,</span>\n    DoNotWrap<span class=\"token punctuation\">,</span>\n    WrapAlways<span class=\"token punctuation\">,</span>\n    WrapIfTooLong\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>なので, <code>arrayInitializerWrapping</code>の設定で, 長すぎる場合に改行を挿入したい場合はこの値を<code>3</code>にするとよい.</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Unity C# コーディング環境は, 少々ハマリポイントはあるものの便利そう.</p>","excerpt":"最近Unityプログラマにジョブチェンジしたのだが, MonoDevelopが地味に使いづらいので, Vim + OmniSharpで環境を構築してみたら, 思った以上に良かったので, メモ代わりにブログに書いた.\n地味にハマりどころは多かったので, 参考になればと思う. 前提として, monoの3系以降をインストールする必要がある. brewを使っていれば, brew install monoでさくっとインストールできるはずだ. インストール 今回C…","fields":{"slug":"/articles/2016/05/05/unity-vim-omnisharp/"},"frontmatter":{"date":"May 05, 2016","type":null,"tags":["Unity","Vim","C#","OmniSharp"],"title":"VimでUnity C#のコーディングをするための設定","description":"最近Unityを触ることになったので, せっかくなのでVimで開発できないかなと思い, C#のコーディング環境をVimで整えてみたらかなり快適だった. 主にOmniSharpについての備忘録.","eyecatch":null}}},"pageContext":{"id":"d0c9b833-35f6-5b86-9bd8-5b8f6868d1b2"}},"staticQueryHashes":["1480509143","3159585216"]}