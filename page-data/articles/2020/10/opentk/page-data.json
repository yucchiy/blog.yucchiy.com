{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/10/opentk/","result":{"data":{"markdownRemark":{"html":"<p>ゲームエンジンの内部実装に興味があったので、<a href=\"https://github.com/yucchiy/Minity\">思い切ってはじめてみた</a>。\n実装言語は自分が書き慣れているC#で、グラフィックライブラリは、VulkanやMetalなどモダンな物はあるものの、まずはOpenGLではじめることにした。</p>\n<p>C#でOpenGLを扱うライブラリとして、調べると<a href=\"luca-piccioni/OpenGL.Net\">OpenGL.Net</a>・<a href=\"https://github.com/Ultz/Silk.NET\">Silk.NET</a>・<a href=\"https://github.com/opentk/opentk\">OpenTK</a>・<a href=\"https://github.com/giawa/opengl4csharp\">opengl4csharp</a>あたりが引っかかったが、今でも開発が頻繁そうな<a href=\"https://opentk.net/learn/index.html\">OpenTK</a>を利用することにした。</p>\n<p>OpenTKのTKは<strong>T</strong>ool<strong>k</strong>it\bの頭文字で、OpenGLやOpenAL、OpenCLの薄いラッパーを提供するライブラリ。</p>\n<p>GUIを作る上で面倒なウインドウシステムや、マウスやキーボードなどの入力処理も提供されていて、これらの実装は最新のバージョンであるv4では<a href=\"https://www.glfw.org/\">GLFW</a>ベースで書かれている。</p>\n<h2 id=\"環境構築\" style=\"position:relative;\"><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\" aria-label=\"環境構築 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>環境構築</h2>\n<p>先述の通り、最新のOpenTKはglfwベースで書かれているので、glfwのインストールが必要になる。homebrewでは下記のようにインストールできる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install glfw</code></pre></div>\n<p>あとは、C#のプロジェクトを作成して、そのプロジェクトにNuGetなどのパッケージマネジャーで[OpenTK](<a href=\"https://www.nuget.org/packages/OpenTK/_%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%80%82.NET\">https://www.nuget.org/packages/OpenTK/_をインストールする。.NET</a> CLIでは下記のようにインストールできる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet add package OpenTK --version 4.0.6</code></pre></div>\n<p>余談だが.NET CLIでプロジェクトは下記のコマンドで作成できる。下記はコンソールアプリケーションの空プロジェクトを作成している。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet new console</code></pre></div>\n<h2 id=\"ウインドウの表示\" style=\"position:relative;\"><a href=\"#%E3%82%A6%E3%82%A4%E3%83%B3%E3%83%89%E3%82%A6%E3%81%AE%E8%A1%A8%E7%A4%BA\" aria-label=\"ウインドウの表示 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ウインドウの表示</h2>\n<p><a href=\"https://opentk.net/learn/chapter1/1-creating-a-window.html\">公式ドキュメント</a>はv3のAPIで書かれているのでサンプルがそのまま動かないが、概ねそのまま動く。<a href=\"https://github.com/yucchiy/Minity\">自身のプロジェクトでは</a>では下記で空ウインドウを表示できた。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">OpenTK<span class=\"token punctuation\">.</span>Windowing<span class=\"token punctuation\">.</span>Common</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">OpenTK<span class=\"token punctuation\">.</span>Windowing<span class=\"token punctuation\">.</span>Desktop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Minity</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinityWindow</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GameWindow</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">MinityWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameWindowSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RenderFrequency <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span>\n                UpdateFrequency <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NativeWindowSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                APIVersion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Version</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                Flags <span class=\"token operator\">=</span> ContextFlags<span class=\"token punctuation\">.</span>ForwardCompatible<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ウインドウの基底クラスの<code>GameWindow</code>の名前空間が<code>OpenTK.Windowing.Desktop</code>に移動している。また著者はmacOSなので、基底のコンストラクタに<code>NativeWindowSettings</code>でOpenGLのバージョンを指定している点が異なる。\nmacOSではOpenGLのバージョンを3.2に指定し、かつ<code>ContextFlags.ForwardCompatible</code>を指定（前方互換プロファイル、つまり古い機能を使えないよう指定）しないと起動できない。</p>\n<p>ちなみに、macOSで利用できる(厳密にはマシンに搭載されているグラフィックボードに依存している)OpenGLのバージョンは、<a href=\"https://developer.apple.com/opengl/OpenGL-Capabilities-Tables.pdf\">https://developer.apple.com/opengl/OpenGL-Capabilities-Tables.pdf</a>で確認できる。</p>\n<p>あとは、上記のウインドウをエントリポイントから呼び出す。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Minity</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MinityWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                window<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>全容は<a href=\"https://github.com/yucchiy/Minity/tree/4d934a8202fac24423fb6a8379e37ef30bab45e4\">こちら</a>。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"http://marina.sys.wakayama-u.ac.jp/~tokoi/?date=20120908\">(3) OpenGL のバージョンとプロファイルの指定 - 床井研究室</a></li>\n</ul>","excerpt":"ゲームエンジンの内部実装に興味があったので、思い切ってはじめてみた。\n実装言語は自分が書き慣れているC#で、グラフィックライブラリは、VulkanやMetalなどモダンな物はあるものの、まずはOpenGLではじめることにした。 C#でOpenGLを扱うライブラリとして、調べるとOpenGL.Net・Silk.NET・OpenTK・opengl4csharpあたりが引っかかったが、今でも開発が頻繁そうなOpenTKを利用することにした。 OpenTKのTKはToolkit\bの頭文字で、OpenGL…","fields":{"slug":"/articles/2020/10/opentk/"},"frontmatter":{"date":"October 29, 2020","type":null,"tags":["OpenTK","C#","OpenGL"],"title":"OpenTKを用いてOpenGLプログラミングする","description":null,"eyecatch":null}}},"pageContext":{"id":"a1064011-c546-52a3-bc7e-7aa0928f516e"}},"staticQueryHashes":["1480509143","3159585216"]}