{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/10/calculating-angle/","result":{"data":{"markdownRemark":{"html":"<p>2ベクトル間の成す角度を計算したことが多くあります(例: <a href=\"http://tsubakit1.hateblo.jp/entry/2018/02/05/235634\">【Unity】キャラクターから見て対象への角度を「-180～180度」の範囲で求める - テラシュールブログ</a>)。\n単純に2ベクトルの成す角度を求めたい場合、(Unityでは)下記のように求めることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// ベクトルa, bの成す角度を計算する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> angle <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Angle</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://docs.unity3d.com/ScriptReference/Vector3.Angle.html\">Vector3.Angle</a>を用いずに計算すると下記のように求められます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// a, bは単位ベクトルとする</span>\n<span class=\"token comment\">// cosTheta = dot(a,  b) / |a||b|</span>\n<span class=\"token comment\">//          = dot(a, b) / 1x1 = dot(a, b)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cosTheta <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> angle <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosTheta<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg<span class=\"token punctuation\">;</span></code></pre></div>\n<p>状況によっては自分から見て右向きなのか、左向きなのかも必要になることがあります。\n自分からみて右回り（時計回り）の場合正の角度、左向きの場合は負の角度で角度を計算したい場合は、下記のように求めます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// a, bは単位ベクトルとする</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cosTheta <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cross <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Cross</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// upは世界の上向きを表す単位ベクトルとする</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> isClockwise <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>cross<span class=\"token punctuation\">,</span> up<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> angle <span class=\"token operator\">=</span> <span class=\"token return-type class-name\">isClockwise <span class=\"token punctuation\">?</span></span> \n    Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosTheta<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg <span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosTheta<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>cross</code>は、<code>a</code>と<code>b</code>が貼る平面の上方向のベクトルを表すことになります。\nこの方向と世界の上方向(<code>up</code>)のが同じ方向を向いているかを調べることで、<code>b</code>が<code>a</code>に対して右回り（時計回り）に回転しているかどうかがわかります(<code>isClockwise</code>変数に結果を格納している)。\n調べるには内積の値が正(<code>up</code>と<code>cross</code>の成す角が0 ~ 90度に収まる)かどうかを調べれば十分です。</p>\n<p>また、上記を応用して時計回りに何度かを求めることもできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// a, b, upは単位ベクトルとする</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cosTheta <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cross <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Cross</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> angle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>cross<span class=\"token punctuation\">,</span> up<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> \n    Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosTheta<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg <span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> <span class=\"token number\">2f</span> <span class=\"token operator\">-</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosTheta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg<span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"2ベクトル間の成す角度を計算したことが多くあります(例: 【Unity】キャラクターから見て対象への角度を「-180～180度」の範囲で求める - テラシュールブログ)。\n単純に2ベクトルの成す角度を求めたい場合、(Unityでは)下記のように求めることができます。 Vector3.Angle…","fields":{"slug":"/articles/2020/10/calculating-angle/"},"frontmatter":{"date":"October 27, 2020","type":null,"tags":["C#","Math","Unity"],"title":"2ベクトルの成す角度を時計回りで計算する","description":null,"eyecatch":null}}},"pageContext":{"id":"9050b459-ec96-54a6-b9ee-0c9483445497"}},"staticQueryHashes":["1480509143","3159585216"]}