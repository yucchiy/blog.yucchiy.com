{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/11/csharp-embedded-resources/","result":{"data":{"markdownRemark":{"html":"<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">待ちきれずビルドして試してみた<br>Goで //go:embed file ってコメントに書くと、ファイルの中身が変数に入るようになったので、とてもありがたい<br>これで、フォントの埋め込みなどはサードパーティ製のライブラリでコードを生成しなくて済む <a href=\"https://t.co/TL43HAziiL\">https://t.co/TL43HAziiL</a> <a href=\"https://t.co/0F5edNSpOJ\">pic.twitter.com/0F5edNSpOJ</a></p>&mdash; 鬼滅のゴリラ@無限レビュー編 (@gorilla0513) <a href=\"https://twitter.com/gorilla0513/status/1321948482433736704?ref_src=twsrc%5Etfw\">October 29, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://mattn.kaoriya.net/software/lang/go/20201030092005.htm\">巷でとある言語がバイナリにアセットを埋め込めるようになったと話題</a>ですが、C#でも同じようなことができそうなので共有したいと思います。</p>\n<h2 id=\"リソースを埋め込み読み込む\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-label=\"リソースを埋め込み読み込む permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リソースを埋め込み、読み込む</h2>\n<p>まずリソースを埋め込むには、プロジェクトファイル(<code>csproj</code>)\bの<code>&#x3C;ItemGroup></code>内に<code>&#x3C;EmbeddedResource></code>で、埋め込みたいリソースを定義します。\n例えば、<code>sample.csproj</code>と同じフォルダ内にある<code>example.txt</code>を埋め込みたい場合は、下記のように書きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">></span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">></span></span>netcoreapp3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">></span></span>sample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- example.txtを埋め込む --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./example.txt<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>これでこのプロジェクトの生成する実行ファイル(OutputTypeがLibraryの場合はdll)に指定したアセットが埋め込まれます。</p>\n<p>次に、<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcestream?view=netcore-3.1\">Assembly.GetManifestResourceStream</a>メソッドを利用して埋め込まれたファイルを読み込みます。これは<code>System.Reflection.Assembly</code>クラスのメソッドです。\nつまり、そのファイルが埋め込まれたAssemblyインスタンスを<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getexecutingassembly?view=netcore-3.1\">Assembly.GetExecutingAssembly</a>などで取得して、そのインスタンスで実行しないと期待した動作をしません。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetExecutingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// またはそのアセンブリに所属するクラス情報から参照する</span>\n<span class=\"token comment\">// こちらのほうがコンテキストに依存しないから確実かも</span>\n<span class=\"token comment\">// var type = typeof(Program);</span>\n<span class=\"token comment\">// var assembly = type.Assembly;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> assembly\n  <span class=\"token punctuation\">.</span><span class=\"token function\">GetManifestResourceStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sameple.example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> text <span class=\"token operator\">=</span> streamReader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// example.txtの中身を表示</span>\nSystem<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>上記のコードで<code>example.txt</code>のテキストを取得できます。</p>\n<h2 id=\"リソース埋め込み詳細\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E8%A9%B3%E7%B4%B0\" aria-label=\"リソース埋め込み詳細 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リソース埋め込み詳細</h2>\n<p>リソースの埋め込み方について、もう少し深ぼります。</p>\n<p>まず、先述のとおりですが、<code>EmbeddedResource</code>タグでリソースを埋め込みます。埋め込むデータは <code>Include</code>属性で指定します。\nパスは、プロジェクトルート(特に指定しなければcsprojが配置されている箇所)からの相対パスで指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./example.txt<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>いわゆるglob指定も行うことができます。下記は、プロジェクトファイルがあるディレクトリにある全ての<code>txt</code>拡張子のファイルをすべて埋め込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./*.txt<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>ディレクトリ階層にもglob指定が適用できます。下記は<code>./resources</code>下の任意のディレクトリ内の<code>txt</code>拡張子のファイルをすべて埋め込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./resources/**/*.txt<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>詳細は後述しますが、リソース名は明示的に指定することができます。指定には <code>LogicalName</code> 属性を指定します。\n下記では、<code>example_with_logical_name.txt</code> を埋め込み、そのリソース名を <code>logical_name_test</code> とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./example_with_logical_name.txt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">LogicalName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logical_name_test<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"リソース名のルールについて\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%90%8D%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"リソース名のルールについて permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リソース名のルールについて</h2>\n<p><code>Assembly.GetManifestResourceStream</code>メソッドには埋め込んだリソースの名前を渡しますが、リソース名は具体的に<code>&#x3C;RootNamespace></code>.<code>&#x3C;ResourceFilePathFromProjectRoot></code>となります。\n<code>&#x3C;RootNamespace></code>は、プロジェクトファイルの <code>&#x3C;PropetyGroup></code> 項目の、 <code>&#x3C;RootNamespace></code> で指定している場合はその値が、指定していない場合は プロジェクトファイルの拡張子を除いたファイルが利用されます。</p>\n<p><code>&#x3C;ResourceFilePathFromProjectRoot></code>は、プロジェクトルートを起点としたリソースファイルへの相対パスになります。ただし、ファイルパスがそのままではなく、下記のルールが適用されます。</p>\n<ul>\n<li>ディレクトリセパレーター( <code>/</code>や<code>\\</code>)は <code>.</code> (ドット)に置き換えます</li>\n<li>ディレクトリ名の頭が数字の場合は、接頭に <code>_</code> (アンダーバー)を挿入します</li>\n</ul>\n<p>いくつか例を示します。コメントに実際のリソース名を記載しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">></span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">></span></span>netcoreapp3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">></span></span>MySample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- MySample.example.txt --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./example.txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\">&lt;!-- MySample.resource.example_in_resource_directory.txt --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span>\n      <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./resource/example_in_resource_directory.txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\">&lt;!-- MySample.resource._01.01_example.txt --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./resource/01/01_example.txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>ただし上記の例外として、<code>LogicalName</code> を指定した場合は、その名前がそのままリソース名となります。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- example_with_logical_name --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./example_with_logical_name.txt<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">LogicalName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example_with_logical_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"埋め込まれたリソース一覧の取得方法\" style=\"position:relative;\"><a href=\"#%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BE%E3%82%8C%E3%81%9F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E4%B8%80%E8%A6%A7%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95\" aria-label=\"埋め込まれたリソース一覧の取得方法 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>埋め込まれたリソース一覧の取得方法</h2>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcenames?view=netcore-3.1\">Assembly.GetManifestResourceNames</a>で埋め込まれたリソース名の一覧を取得できます。にデバッグなどにも便利です。</p>\n<p>下記は、すべての埋め込まれたアセットと、そのコンテンツを表示するプログラムです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetExecutingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> name <span class=\"token keyword\">in</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetManifestResourceNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Name: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Content:\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetManifestResourceStream</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> text <span class=\"token operator\">=</span> streamReader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"巷でとある言語がバイナリにアセットを埋め込めるようになったと話題ですが、C#でも同じようなことができそうなので共有したいと思います。 リソースを埋め込み、読み込む まずリソースを埋め込むには、プロジェクトファイル(csproj)\bの<ItemGroup>内に<EmbeddedResource>で、埋め込みたいリソースを定義します。\n例えば、sample.csprojと同じフォルダ内にあるexample.txt…","fields":{"slug":"/articles/2020/11/csharp-embedded-resources/"},"frontmatter":{"date":"November 07, 2020","type":null,"tags":["C#",".NET"],"title":"C#のアプリケーションにリソースを埋め込み、利用する","description":null,"eyecatch":null}}},"pageContext":{"id":"24d77769-51e4-563e-9c1d-adc08232b96c"}},"staticQueryHashes":["1480509143","3159585216"]}