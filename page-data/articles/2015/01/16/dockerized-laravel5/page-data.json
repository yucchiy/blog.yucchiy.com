{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2015/01/16/dockerized-laravel5/","result":{"data":{"markdownRemark":{"html":"<p>Laravel5で構築したアプリケーションの開発環境をDocker化するための方法を紹介する.</p>\n<p>サンプルアプリケーションは<a href=\"https://github.com/yucchiy/dockerized-laravel5\">こちら</a>で確認できる.</p>\n<h2 id=\"準備\" style=\"position:relative;\"><a href=\"#%E6%BA%96%E5%82%99\" aria-label=\"準備 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>準備</h2>\n<p>以下の環境でLaravel5が動作するように, 環境を構築する.</p>\n<ul>\n<li>OS\n<ul>\n<li>Ubuntu 14.04</li>\n</ul>\n</li>\n<li>ミドルウェア\n<ul>\n<li>Nginx</li>\n<li>php-fpm 5.5</li>\n<li>MySQL 5.5</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"laravel5のインストール\" style=\"position:relative;\"><a href=\"#laravel5%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"laravel5のインストール permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Laravel5のインストール</h3>\n<p>まず, laravel5をインストールする. インストールにはcomposerを用いる. create-projectの時に, <code>dev-develop</code>を指定するとインストールできる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir dockerized-laravel5\ncd dockerized-laravel5\ncomposer create-project laravel/laravel application dev-develop</code></pre></div>\n<h2 id=\"phpコンテナ\" style=\"position:relative;\"><a href=\"#php%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A\" aria-label=\"phpコンテナ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHPコンテナ</h2>\n<p>nginx+php-fpmな環境で, laravelが動作するようにDockerfileを記述する.</p>\n<p>Dockerでは, １コンテナ１プロセスにするのが好ましいが, 今回はnginxとphp-fpmを１コンテナで動かすために, <code>supervisord</code>をもちいる.</p>\n<p>Dockerfileは以下のとおり.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM ubuntu:14.04\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update\n\nRUN apt-get install -yq --force-yes build-essential wget curl git ssh nginx nodejs-legacy npm mysql-client supervisor\n\nRUN apt-get install -yq --force-yes  php5-cli php5 php5-fpm php5-mysql php5-curl php5-mcrypt php5-memcached &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN php5enmod mcrypt\n\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\nRUN mkdir -p /app\nWORKDIR /app\n\nADD ./application/database /app/database\nADD ./application/tests /app/tests\nADD ./application/composer.json /app/composer.json\nADD ./application/composer.lock /app/composer.lock\nRUN composer install --no-scripts\n\nADD ./application /app\nRUN php artisan clear-compiled\nRUN php artisan optimize\n\nRUN usermod -u 1000 www-data\nRUN groupmod -g 1000 www-data\n\nRUN chown -R www-data:www-data /app\n\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nADD docker/nginx-site.conf /etc/nginx/sites-available/default\n\nADD docker/supervisord.conf /etc/supervisord.conf\n\nEXPOSE 80\n\nCMD [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]</code></pre></div>\n<p>supervisord.conf</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[unix_http_server]\nfile=/tmp/supervisor.sock\n\n[supervisord]\nlogfile=/tmp/supervisord.log\npidfile=/tmp/supervisord.pid\nnodaemon=false\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n\n[program:php5-fpm]\ncommand=/usr/sbin/php5-fpm -c /etc/php5/fpm --nodaemonize\n\n[program:nginx]\ncommand=/usr/sbin/nginx</code></pre></div>\n<p>このDockerfileのポイントについて説明する.</p>\n<h3 id=\"composerjsonを先にaddする\" style=\"position:relative;\"><a href=\"#composerjson%E3%82%92%E5%85%88%E3%81%ABadd%E3%81%99%E3%82%8B\" aria-label=\"composerjsonを先にaddする permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>composer.jsonを先にADDする</h3>\n<p><code>ADD ./application /app</code>を行ったあとに<code>RUN composer install</code>とすると, <code>composer.json</code>の変更の有無にかかわらず, <strong><code>./application</code>内のどれかのファイルが変更されるごとに</strong> <code>composer install</code>が走る.\nそこで, 先に<code>ADD ./application/composer.json /app/composer.json</code>と<code>RUN composer install</code>を行って, その後に<code>/application</code>を<code>ADD</code>することで, <code>composer.json</code>に変更がない場合は, その行がキャッシュされる.\nこれは, <a href=\"http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\">RubyのBundlerで紹介されているテクニック</a>をそのまま用いている.</p>\n<p>ただし, composerの場合はそのままではうまくいかない. 問題は２つある.</p>\n<ul>\n<li><code>composer.json</code>の<code>autoload</code>に指定された<code>classmap</code>に対応するクラスは, <code>composer install</code>時に存在する必要がある.</li>\n<li><code>composer install</code>後に, <code>composer.json</code>内の<code>scripts</code>に記述された処理が実行される.</li>\n</ul>\n<p>この対処方法について述べる.</p>\n<h4 id=\"composerのautoloadに対応する\" style=\"position:relative;\"><a href=\"#composer%E3%81%AEautoload%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B\" aria-label=\"composerのautoloadに対応する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>composerのautoloadに対応する</h4>\n<p>まず, <code>composer.json</code>のautoloadに対応する. といっても, <code>composer install</code>時にautoloadが必要とするクラスが存在するだけでOKなので,\n<code>application</code>内の, <strong><code>database</code>と<code>tests</code>ディレクトリをADD</strong>すれば良い.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ADD ./application/database /app/database\nADD ./application/tests /app/tests</code></pre></div>\n<h4 id=\"composerのscriptsに対応する\" style=\"position:relative;\"><a href=\"#composer%E3%81%AEscripts%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B\" aria-label=\"composerのscriptsに対応する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>composerのscriptsに対応する</h4>\n<p>comopserは, 実行後に特定の処理を実行するためのフックが存在する. 具体的には<code>composer.json</code>内の<code>scripts</code>の項目の処理が実行される.</p>\n<p>laravelでは, <code>composer install</code>後に, 以下の処理が実行される.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">php artisan clear-compiled\nphp artisan optimize</code></pre></div>\n<p><code>artisan</code>は, laravelのコマンドラインツールだが, これは<strong>laravelのアプリケーションディレクトリが存在しないと実行できない</strong>.\n上記のテクニックでは, <code>composer install</code>時には<code>./application</code>内のすべてのファイルが存在しないため, <code>artisan</code>が正常に実行できずにエラーとなる.</p>\n<p>この問題は, <code>composer install</code>実行後に, <code>scripts</code>に記述された処理を行わず, <strong>laravelのアプリケーションディレクトリを追加後に, <code>scripts</code>の処理を行う</strong>ことで対処できる.</p>\n<p>具体的には, <code>composer install</code>を<code>--no-scripts</code>付きで実行し, <code>./application</code>をADDした後に, scriptsの項目の処理を実行する.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">RUN composer install --no-scripts\n\nADD ./application /app\nRUN php artisan clear-compiled\nRUN php artisan optimize</code></pre></div>\n<h3 id=\"dockerignore\" style=\"position:relative;\"><a href=\"#dockerignore\" aria-label=\"dockerignore permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.dockerignore</h3>\n<p>Dockerfileとは直接は関係ないが, Dockerコンテナに含める必要のないファイルやディレクトリは, <code>.dockerignore</code>に記述することで, ADDやCOPYの対象から外れる.</p>\n<p><code>.git</code>などは省いておくのと, laravelアプリケーションディレクトリ内の, <strong><code>vendor</code>と<code>composer.lock</code>も対象から省いて</strong>おかないと, Dockerコンテナ側でビルドした内容と, Dockerホスト側のディレクトリには差異が生じて, アプリケーションが動かない可能性がある.</p>\n<h2 id=\"mysqlコンテナ\" style=\"position:relative;\"><a href=\"#mysql%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A\" aria-label=\"mysqlコンテナ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQLコンテナ</h2>\n<p><a href=\"http://blog.yucchiy.com/2014/12/30/rails-docker-fig/\">この記事</a>と同様に, Docker Hub公式の<a href=\"https://registry.hub.docker.com/_/mysql/\">https://registry.hub.docker.com/_/mysql/</a>を用いる.</p>\n<p><code>dockerized-laravel5</code>直下に<code>fig.xml</code>を用意し, 以下のように記述する.</p>\n<p>環境変数を<code>environment:</code>に設定することで, MySQLの設定を変更することができる.</p>\n<p>また, <code>my.cnf</code>などの設定を変更したい場合は, Dockerコンテナ内の<code>/etc/mysql</code>に, <strong>ローカルのディレクトリをマウントする</strong>ことで設定を置き換える方法もある(<code>/path/to/mysql:/etc/mysql</code>をvolumesに追記する).</p>\n<h2 id=\"figyml\" style=\"position:relative;\"><a href=\"#figyml\" aria-label=\"figyml permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fig.yml</h2>\n<p>以上のDockerfileからPHPコンテナを立ち上げるためのFigの設定を示す. <code>dockerized-laravel5</code>ディレクトリ直下に, 以下の様な内容の<code>fig.yml</code>を設置する.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.5</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=himitsunopassword\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306\"</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> /var/lib/mysql\n<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:80\"</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ./application<span class=\"token punctuation\">:</span>/app\n  <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> db</code></pre></div>\n<p>開発用途で利用するために, <code>volumes</code>項目に, <code>./application:/app</code>と記述する. こうすることで, ローカルでファイルを編集した内容が即座にDockerコンテナ内に反映される.</p>\n<h3 id=\"phpコンテナとmysqlコンテナのリンクと設定\" style=\"position:relative;\"><a href=\"#php%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8mysql%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%A8%E8%A8%AD%E5%AE%9A\" aria-label=\"phpコンテナとmysqlコンテナのリンクと設定 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHPコンテナとMySQLコンテナのリンクと設定</h3>\n<p>上記の設定では, Dockerのlink機能を用いて, PHPコンテナからMySQLコンテナ内のデータベースを利用できるようになっている.</p>\n<p>アプリケーションからMySQLコンテナのDBに接続するための設定は, 環境変数を経由して取得できる.</p>\n<p>環境変数の一覧は, 以下のように確認できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker exec -it dockerizedlaravel5_web_1 env\n\nDB_1_PORT_3306_TCP_ADDR=172.17.0.13\nDB_1_PORT_3306_TCP_PORT=3306\nDB_1_NAME=/dockerizedlaravel5_web_1/db_1\nDB_1_ENV_MYSQL_ROOT_PASSWORD=himitsunopassword</code></pre></div>\n<p>laravelのデータベースの設定は, <code>env</code>関数を利用して行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">    <span class=\"token string single-quoted-string\">'mysql'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'driver'</span>    <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'host'</span>      <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'DB_1_PORT_3306_TCP_ADDR'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'localhost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'database'</span>  <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'DB_DATABASE'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'forge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'username'</span>  <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'DB_USERNAME'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'password'</span>  <span class=\"token operator\">=></span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'DB_1_ENV_MYSQL_ROOT_PASSWORD'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'charset'</span>   <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'utf8'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'collation'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'utf8_unicode_ci'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'prefix'</span>    <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'strict'</span>    <span class=\"token operator\">=></span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"開発環境として利用する\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%A8%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\" aria-label=\"開発環境として利用する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開発環境として利用する</h2>\n<p>figで管理しているコンテナの状態は, <code>fig ps</code>で確認できる.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ fig ps\n          Name                        Command               State             Ports\n--------------------------------------------------------------------------------------------\ndockerizedlaravel5_db_1    /entrypoint.sh mysqld            Exit 0   0.0.0.0:49153->3306/tcp\ndockerizedlaravel5_web_1   /usr/bin/supervisord -n -c ...   Exit 0</code></pre></div>\n<p>起動は, <code>fig up</code>で行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ fig up\nRecreating dockerizedlaravel5_db_1...\nRecreating dockerizedlaravel5_web_1...\nAttaching to dockerizedlaravel5_db_1, dockerizedlaravel5_web_1</code></pre></div>\n<p>起動中のコンテナでコマンドを実行するには<code>docker exec</code>を利用する.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker exec dockerizedlaravel5_web_1 ./artisan route:list\n+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+\n| Domain | Method                         | URI                                                   | Name | Action                                                     | Middleware |\n+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+\n|        | GET|HEAD                       | /                                                     |      | App\\Http\\Controllers\\WelcomeController@index               |            |\n|        | GET|HEAD                       | home                                                  |      | App\\Http\\Controllers\\HomeController@index                  |            |\n|        | GET|HEAD                       | auth/register/{one?}/{two?}/{three?}/{four?}/{five?}  |      | App\\Http\\Controllers\\Auth\\AuthController@getRegister       |            |\n|        | POST                           | auth/register/{one?}/{two?}/{three?}/{four?}/{five?}  |      | App\\Http\\Controllers\\Auth\\AuthController@postRegister      |            |\n|        | GET|HEAD                       | auth/login/{one?}/{two?}/{three?}/{four?}/{five?}     |      | App\\Http\\Controllers\\Auth\\AuthController@getLogin          |            |\n|        | POST                           | auth/login/{one?}/{two?}/{three?}/{four?}/{five?}     |      | App\\Http\\Controllers\\Auth\\AuthController@postLogin         |            |\n|        | GET|HEAD                       | auth/logout/{one?}/{two?}/{three?}/{four?}/{five?}    |      | App\\Http\\Controllers\\Auth\\AuthController@getLogout         |            |\n|        | GET|HEAD|POST|PUT|PATCH|DELETE | auth/{_missing}                                       |      | App\\Http\\Controllers\\Auth\\AuthController@missingMethod     |            |\n|        | GET|HEAD                       | password/email/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\\Http\\Controllers\\Auth\\PasswordController@getEmail      |            |\n|        | POST                           | password/email/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\\Http\\Controllers\\Auth\\PasswordController@postEmail     |            |\n|        | GET|HEAD                       | password/reset/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\\Http\\Controllers\\Auth\\PasswordController@getReset      |            |\n|        | POST                           | password/reset/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\\Http\\Controllers\\Auth\\PasswordController@postReset     |            |\n|        | GET|HEAD|POST|PUT|PATCH|DELETE | password/{_missing}                                   |      | App\\Http\\Controllers\\Auth\\PasswordController@missingMethod |            |\n+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+</code></pre></div>\n<p>また, コンテナ内にログインしたい場合は, <code>docker exec</code>で, <code>/bin/bash</code>などを実行する.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker exec -it dockerizedlaravel5_web_1 /bin/bash\nroot@c489f074bb66:/app# ls\napp  artisan  bootstrap  composer.json  composer.lock  config  database  gulpfile.js  package.json  phpspec.yml  phpunit.xml  public  readme.md  resources  storage  tests  vendor</code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>LaravelをDockerで動かすための方法を紹介した.</p>\n<p>また <a href=\"http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\">このテクニック</a>をcomposerに応用するためのテクニックをいくつか示した.</p>\n<p>次に, 用意したDockerfileを用いて, テスト・CI・デプロイについて紹介していきたい.</p>","excerpt":"Laravel5で構築したアプリケーションの開発環境をDocker化するための方法を紹介する. サンプルアプリケーションはこちらで確認できる. 準備 以下の環境でLaravel5が動作するように, 環境を構築する. OS Ubuntu 14.04 ミドルウェア Nginx php-fpm 5.5 MySQL 5.5 Laravel5のインストール まず, laravel5をインストールする. インストールにはcomposerを用いる. create-projectの時に, dev-develop…","fields":{"slug":"/articles/2015/01/16/dockerized-laravel5/"},"frontmatter":{"date":"January 16, 2015","type":null,"tags":null,"title":"Laravel5をDockerで動かす","description":null,"eyecatch":null}}},"pageContext":{"id":"5618dacc-e786-5d77-9759-9339b4d9aaa5"}},"staticQueryHashes":["1480509143","3159585216"]}