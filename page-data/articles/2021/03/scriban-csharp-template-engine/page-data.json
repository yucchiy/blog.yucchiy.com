{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2021/03/scriban-csharp-template-engine/","result":{"data":{"markdownRemark":{"html":"<p>この記事ではC#で利用できるテンプレートエンジン<a href=\"https://github.com/scriban/scriban\">scriban</a>について備忘録としてブログをかきます。</p>\n<h2 id=\"テンプレートエンジンがほしくなるケース\" style=\"position:relative;\"><a href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%8C%E3%81%BB%E3%81%97%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%B1%E3%83%BC%E3%82%B9\" aria-label=\"テンプレートエンジンがほしくなるケース permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>テンプレートエンジンがほしくなるケース</h2>\n<p>先日<a href=\"https://github.com/yucchiy/memo-cli\">memo-cli</a>という自分用のメモ管理ツールを実装していたときに、メモの<strong>カテゴリごとに生成するメモのファイル名のフォーマットを変更したい</strong>ということがありました。</p>\n<p>例えば通常作成するメモのファイル名は<code>input-name.markdown</code>の<code>input-name</code>の部分にコマンドライン引数から受け取ったものを埋め込むが、日記を管理するカテゴリでは<code>20210324_journal.markdown</code>と指定された日付を埋め込むようにしたいといった要件です。</p>\n<p>C#の標準機能でこのような文字列を生成する場合、<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-5.0\">string.Format</a>や<a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/tutorials/string-interpolation\">文字列補間</a>が利用できそうです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// string.Format</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileName1 <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}.markdown\"</span><span class=\"token punctuation\">,</span> inputName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// dateはDateTime型の変数</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> journalFileName1 <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}_journal.markdown\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 文字列補間</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileName2 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">inputName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.markdown\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dateString <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> journalFileName2 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">dateString</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_journal.markdown\"</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>しかし埋め込みたい変数およびその順番、または日付であればそのフォーマットを<strong>変更するごとにプログラムを再ビルドする必要</strong>があります。もちろんその組み合わせを全て保持しておいて呼び分ける仕組みを実装すれば再ビルド問題は回避できますが、メモの管理なのでできればそのフォーマットは<strong>設定ファイルなどで管理し変更したい</strong>です。</p>\n<p>このような場合、テンプレートエンジンを利用すると便利です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> journalFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"{{ date | date.to_string '%Y%m%d' }}.markdown\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> Scriban<span class=\"token punctuation\">.</span>Template<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>journalFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> journalFileName <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Date <span class=\"token operator\">=</span> date <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記の例では<code>{{ date | date.to_string '%Y%m%d' }}</code>部分が変数の埋め込みで、実際に値を埋め込んで文字列を生成する部分は<code>template.Render(new { Date = date });</code>になります。</p>\n<p>このように日付のフォーマットを指定することもできますし、このフォーマット文字列はプログラムに埋め込まれている必要なく、設定ファイルに定義されているものを利用することもできます。</p>\n<h2 id=\"scribanの使い方\" style=\"position:relative;\"><a href=\"#scriban%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"scribanの使い方 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scribanの使い方</h2>\n<p>scribanは、NuGetからインストールできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet add package Scriban.Signed --version 3.6.0</code></pre></div>\n<p>上記で簡単に説明しましたが、scribanでは大きく分けて下記の手順で利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// テンプレート文字列のパース処理</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> Template<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello {{name}}!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// パース済みのテンプレートに対して変数を埋め込んで文字列を出力する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"Hello World!\"</span></code></pre></div>\n<p><code>{{name}}</code>が埋め込み変数になり、<code>Render</code>に渡している<code>new { Name = \"World\" }</code>が実際に埋め込む変数になります。</p>\n<p>注意としてデフォルトでは埋め込む変数のプロパティ名が<code>Name</code>になっていますが、テンプレート文字列側では<code>name</code>となっています。scribanはデフォルトでプロパティ名をスネークケースに変換して利用します。</p>\n<p>つまり、例えば<code>MyMethodIsNice</code>というプロパティ名はテンプレート文字列側では<code>my_method_is_nice</code>として参照します。この挙動は<a href=\"https://github.com/scriban/scriban/blob/master/doc/runtime.md#member-renamer\">Member renamer</a>で変更することもできます。</p>\n<p>ちなみにこのテンプレート文字列は、<a href=\"https://shopify.github.io/liquid/\">Liquid</a>というDSLライクな文法で提供されています。ちなみに、Liquidテンプレートそのものもサポートしているようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// テンプレート文字列をLiquidとしてパースする</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> Template<span class=\"token punctuation\">.</span><span class=\"token function\">ParseLiquid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello {{name}}!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// パース済みのテンプレートに対して変数を埋め込んで文字列を出力する</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"Hello World!\"</span></code></pre></div>\n<p>今回は利用しなかったので取り上げてないですが、テンプレートには<a href=\"https://github.com/scriban/scriban/blob/master/doc/language.md#92-if-expression-else-else-if-expression\">if</a>や<a href=\"https://github.com/scriban/scriban/blob/master/doc/language.md#93-loops\">for</a>なども利用でき、例えば下記のようなリスト表示も表現することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> template <span class=\"token operator\">=</span> Template<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"\n&lt;ul id='products'>\n  {{ for product in products }}\n    &lt;li>\n      &lt;h2>{{ product.name }}&lt;/h2>\n           Price: {{ product.price }}\n           {{ product.description | string.truncate 15 }}\n    &lt;/li>\n  {{ end }}\n&lt;/ul>\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ProductListにProductの配列が格納されている</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Products <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ProductList <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>テンプレートエンジンが利用したくなるケースと、C#で利用できるテンプレートエンジンであるscribanについて紹介しました。</p>","excerpt":"この記事ではC#で利用できるテンプレートエンジンscribanについて備忘録としてブログをかきます。 テンプレートエンジンがほしくなるケース 先日memo-cliという自分用のメモ管理ツールを実装していたときに、メモのカテゴリごとに生成するメモのファイル名のフォーマットを変更したいということがありました。 例えば通常作成するメモのファイル名はinput-name.markdownのinput-name…","fields":{"slug":"/articles/2021/03/scriban-csharp-template-engine/"},"frontmatter":{"date":"March 24, 2021","type":null,"tags":["C#","テンプレートエンジン"],"title":"C#で利用できるテンプレートエンジンscribanについて","description":null,"eyecatch":null}}},"pageContext":{"id":"b3494046-bd9d-58db-9190-b60e6da39004"}},"staticQueryHashes":["1480509143","3159585216"]}