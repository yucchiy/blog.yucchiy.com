{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2021/03/using-declaration-in-chsarp-8.0/","result":{"data":{"markdownRemark":{"html":"<p>先日、Unity 2020がリリースされました。</p>\n<p><a href=\"https://note.com/unityjapan/n/naf7bb0270aff\">Unity 2020 LTSをリリースしました｜Unity Japan（ユニティ・テクノロジーズ・ジャパン）｜note</a></p>\n<p>Unity 2020では C# 8.0が使えるようになり、このブログでも<a href=\"https://blog.yucchiy.com/2020/12/nullable-for-unity/\">null許容参照型</a>について取り上げました。</p>\n<p>その中で、地味ではありますがUsing Declarationが地味に便利だったので、備忘録としてブログにかきます。</p>\n<h2 id=\"この記事のまとめ\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"この記事のまとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>この記事のまとめ</h2>\n<ul>\n<li>Using Statementを用いることでブロックを抜けると確実に<code>Dispose</code>を呼び出すことができるが、ネストが深くなるなど可読性に問題があった</li>\n<li>C# 8.0で導入されたUsing Declarationにより、変数の定義の手前に<code>using</code>を記述すると、その変数が定義されたスコープを抜けると自動的に<code>Dispose</code>を呼び出されるようになった</li>\n</ul>\n<h2 id=\"systemidisposableについて\" style=\"position:relative;\"><a href=\"#systemidisposable%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"systemidisposableについて permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.IDisposableについて</h2>\n<p>C#ではアンマネージドなリソースを破棄するためのメカニズムを提供するために、<code>System.IDisposable</code>というインターフェイスが用意されています。</p>\n<p>アンマネージドなリソースは.NETのガベージコレクターに管理を任せられないリソースで、このようなリソースを含むオブジェクトを作成する場合、オブジェクトの使用が終了したらそのリソースを明示的に破棄する必要があります。</p>\n<p>例えば<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.file.opentext?view=net-5.0#System_IO_File_OpenText_System_String_\">File.OpenText</a>で取得できる<code>StreamReader</code>は、利用中にファイルハンドラを開いているため、\n利用後に<code>Dispose</code>を呼び出してファイルハンドラを閉じる必要があります。</p>\n<p><code>Dispose</code>はその性質上(たとえ例外などが発生したとしても)確実に呼び出される必要があります。例えばtry-finally句を用いて定義したオブジェクトのDisposeを呼び出すという方法があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sr <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">OpenText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// srに対して処理を行う</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">finally</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// finally句で確実にDisposeを呼び出す</span>\n    sr<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>しかし定義と破棄のペアをもれなく書く必要があるため、ヒューマンエラーの元になります。</p>\n<h2 id=\"using-statementによるdispose呼び出しの自動化\" style=\"position:relative;\"><a href=\"#using-statement%E3%81%AB%E3%82%88%E3%82%8Bdispose%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AE%E8%87%AA%E5%8B%95%E5%8C%96\" aria-label=\"using statementによるdispose呼び出しの自動化 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using StatementによるDispose呼び出しの自動化</h2>\n<p><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/keywords/using-statement\">using ステートメント - C# リファレンス | Microsoft Docs</a></p>\n<p>そこでC#ではUsing Statementという仕組みがあります。上記の処理を下記のように記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sr <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">OpenText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// srに対して処理を行う</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// usingのスコープを抜けた瞬間に</span>\n<span class=\"token comment\">// Disposeが呼び出される</span></code></pre></div>\n<p>つまり、using句で定義したオブジェクトの<code>Dispose</code>がそのスコープを抜けると自動で呼び出されるようになります。\nこれにより、変数の宣言に対して破棄は自動化されるため、上記で懸念となるヒューマンエラーは解消されます。</p>\n<p>ちなみにこの構文では、途中で例外が発生しても<code>Dispose</code>は確実に呼び出されます。確かめてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// HogeはDisposeが呼び出されると</span>\n<span class=\"token comment\">// \"Hoge(Name = name).Dispose() called\"</span>\n<span class=\"token comment\">// という文字列を出力する</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hoge</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Hoge(Name = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">).Dispose() called\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 念の為WriteLineのあとFlushを呼ぶメソッド</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in using hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in using hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in using hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out using hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out using hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Itotekina exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out using hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">WriteLineAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Exception = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>Hoge</code>クラスは<code>Dispose</code>が呼び出されたタイミングでコンソールに<code>Dispose</code>に下記のようなメッセージを出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhoge<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => Hoge(Name = TestName).Dispose() called</span></code></pre></div>\n<p><code>TestCase()</code>メソッドでは、<code>hoge2</code>オブジェクトのスコープが外れたあとに例外が呼び出されます。<code>hoge1</code>オブジェクトも宣言済みなので<code>hoge1</code>オブジェクトの<code>Dispose</code>も呼び出されることを期待します。</p>\n<p>実行すると、下記が出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">in using hoge1\nin using hoge2\nin using hoge3\nHoge(Name = hoge3).Dispose() called\nout using hoge3\nHoge(Name = hoge2).Dispose() called\nout using hoge2\nHoge(Name = hoge1).Dispose() called\nException = Itotekina exception</code></pre></div>\n<p>上記のように例外が投げられた場合でも、例外をキャッチする前に(つまり<code>Exception = Itotekina exception</code>が出力されるまえに)<code>Hoge(Name = hoge1).Dispose() called</code>が出力されている、つまり<code>Dispose</code>が呼び出されていることが確認できました。</p>\n<p>しかし、上記のように扱うオブジェクトが増えれば増えるほどネストが深くなり、可読性が下がるといった問題もあります。</p>\n<p>一応この回避策の１つとして、下記のようにUsing Statementを連鎖させる記述をすることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Itotekina exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>また、1つの<code>using</code>ステートメント内に複数のオブジェクトを宣言することもできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hoge</span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hoge3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Itotekina exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ただし、この場合はステートメント内の型を明記する必要があるのと、宣言する変数はすべて同じ型である必要があります。</p>\n<p>ちなみにいずれも出力は下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hoge(Name = hoge3).Dispose() called\nHoge(Name = hoge2).Dispose() called\nHoge(Name = hoge1).Dispose() called\nException = Itotekina exception</code></pre></div>\n<h2 id=\"using-declaration\" style=\"position:relative;\"><a href=\"#using-declaration\" aria-label=\"using declaration permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Declaration</h2>\n<p><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/proposals/csharp-8.0/using\">Pattern based using and using declarations - C# 8.0 specification proposals | Microsoft Docs</a></p>\n<p>上記のUsing Statementをより簡素に書くためにC# 8.0ではUsing Declarationという記法が追加されました。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>例えば上記のコードはUsing Declarationを用いて下記のように書くことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// このタイミングでhoge1, hoge2, hoge3の</span>\n<span class=\"token comment\">// Disposeが呼び出される。</span></code></pre></div>\n<p>Using Declarationの利用方法は簡単で、変数宣言の前に<code>using</code>を書くだけです。Using Declarationを用いると、そのインスタンスがスコープを抜けた直後に<code>Dispose</code>が呼び出されるようになります。</p>\n<p>結果は下記のようになります。このように宣言した順番と逆順でDisposeが呼び出されていることが確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hoge(Name = hoge3).Dispose() called\nHoge(Name = hoge2).Dispose() called\nHoge(Name = hoge1).Dispose() called</code></pre></div>\n<h2 id=\"余談-ilレベルでのusing-declaration\" style=\"position:relative;\"><a href=\"#%E4%BD%99%E8%AB%87-il%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7%E3%81%AEusing-declaration\" aria-label=\"余談 ilレベルでのusing declaration permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>余談: ILレベルでのUsing Declaration</h2>\n<p>下記のUsing StatementおよびUsing Declarationで記述されたコードは、コンパイル後のILは全く同じになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Using Statement</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Using Declaration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のコードを一度ILに変換し、それをC#にデコンパイルしたコードは下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Hoge</span> hoge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Hoge</span> hoge2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">finally</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hoge2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IDisposable<span class=\"token punctuation\">)</span>hoge2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">finally</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hoge <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IDisposable<span class=\"token punctuation\">)</span>hoge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>内部的にはtry-finallyに変換されているんですね。</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/standard/garbage-collection/implementing-dispose?redirectedfrom=MSDN\">Dispose メソッドの実装 | Microsoft Docs</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/keywords/using-statement\">using ステートメント - C# リファレンス | Microsoft Docs</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/proposals/csharp-8.0/using\">Pattern based using and using declarations - C# 8.0 specification proposals | Microsoft Docs</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/standard/garbage-collection/unmanaged\">アンマネージ リソースのクリーンアップ | Microsoft Docs</a></li>\n</ul>","excerpt":"先日、Unity 2020がリリースされました。 Unity 2020 LTSをリリースしました｜Unity Japan（ユニティ・テクノロジーズ・ジャパン）｜note Unity 2020では C# 8.0が使えるようになり、このブログでもnull許容参照型について取り上げました。 その中で、地味ではありますがUsing Declarationが地味に便利だったので、備忘録としてブログにかきます。 この記事のまとめ Using Statement…","fields":{"slug":"/articles/2021/03/using-declaration-in-chsarp-8.0/"},"frontmatter":{"date":"March 14, 2021","type":null,"tags":["C#","C# 8.0"],"title":"C#のUsing Statementと、C# 8.0で導入されたUsing Declarationについて","description":null,"eyecatch":null}}},"pageContext":{"id":"37650b48-19d2-5169-97f9-62f67a2de50f"}},"staticQueryHashes":["1480509143","3159585216"]}