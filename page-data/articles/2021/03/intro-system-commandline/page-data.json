{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2021/03/intro-system-commandline/","result":{"data":{"markdownRemark":{"html":"<p>コマンドラインアプリケーションを作りたかったので<a href=\"https://github.com/dotnet/command-line-api\">System.CommandLine</a>を利用してみた。その備忘録としてこの記事を記載します。</p>\n<h2 id=\"systemcommandline-とは\" style=\"position:relative;\"><a href=\"#systemcommandline-%E3%81%A8%E3%81%AF\" aria-label=\"systemcommandline とは permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.CommandLine とは</h2>\n<p><code>System.ConmmandLine</code>は.NETで<strong>コンソールアプリケーション(CLI)を作るための.NET公式のライブラリ</strong>です。\n触った印象ではライブラリというよりかはフレームワークの立ち位置の印象です。</p>\n<p>主にCLIのコマンドライン引数のパースしその結果をCLIアプリケーションの引数などにマッピングしたり、\nCLIアプリのエントリーポイントの呼び出し、そしてヘルプなどCLIでよく実装される出力（<code>System.CommandLine</code>ではレンダリングと呼んでいる）を自動で行ったりしてくれます。</p>\n<h2 id=\"サンプルアプリを実装してみる\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"サンプルアプリを実装してみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サンプルアプリを実装してみる</h2>\n<p><a href=\"https://github.com/dotnet/command-line-api/blob/main/docs/Your-first-app-with-System-CommandLine.md\">command-line-api/Your-first-app-with-System-CommandLine.md at main · dotnet/command-line-api</a> を試しつつ<code>System.CommandLine</code>がどういうものかを理解してみます。</p>\n<h3 id=\"プロジェクトの作成インストール\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"プロジェクトの作成インストール permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロジェクトの作成・インストール</h3>\n<p>まずはプロジェクトを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet new console -o myApp\n$ cd myApp</code></pre></div>\n<p><code>System.ConmmandLine</code>は<a href=\"https://www.nuget.org/packages/System.CommandLine\">nuget</a>経由でインストールできます。具体的には下記のコマンドでインストールできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet add package System.CommandLine --version 2.0.0-beta1.20574.7</code></pre></div>\n<p>これで<code>System.CommandLine</code>のインストールが完了しました。</p>\n<h3 id=\"サンプルアプリの動作を理解してみる\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92%E7%90%86%E8%A7%A3%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"サンプルアプリの動作を理解してみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サンプルアプリの動作を理解してみる</h3>\n<p>サンプルアプリを実行しつつ<code>System.CommandLine</code>がどのように動作しているのかを理解してみます。</p>\n<p>このサンプルアプリで、主に下記のことを把握してみます。</p>\n<ul>\n<li><code>System.CommandLine</code>を利用したアプリケーションの作成方法</li>\n<li>コマンドライン引数をオプションとしてパースする方法</li>\n<li>パースしたオプションをコマンドラインアプリで利用する方法</li>\n</ul>\n<p>まず、サンプルアプリの全容は下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>Invocation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create a root command with some options</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rootCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"--int-option\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">getDefaultValue</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"An option whose argument is parsed as an int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"--bool-option\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"An option whose argument is parsed as a bool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span>FileInfo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"--file-option\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"An option whose argument is parsed as a FileInfo\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        rootCommand<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">=</span> <span class=\"token string\">\"My sample app\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Note that the parameters of the handler method are matched according to the names of the options</span>\n        rootCommand<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> FileInfo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>intOption<span class=\"token punctuation\">,</span> boolOption<span class=\"token punctuation\">,</span> fileOption<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --int-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">intOption</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --bool-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">boolOption</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --file-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">fileOption<span class=\"token punctuation\">?.</span>FullName <span class=\"token operator\">??</span> <span class=\"token string\">\"null\"</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Parse the incoming args and invoke the handler</span>\n        <span class=\"token keyword\">return</span> rootCommand<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行例は下記のとおりです。このようにオプションを正しくパースして、アプリ中でハンドリングできていることが確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet run -- --int-option 123\nThe value for --int-option is: 123\nThe value for --bool-option is: False\nThe value for --file-option is: null\n\n$ dotnet run -- --bool-option True\nThe value for --int-option is: 42\nThe value for --bool-option is: True\nThe value for --file-option is: null</code></pre></div>\n<p>上記の実装だけで、このコマンドラインアプリのヘルプメッセージやバージョン番号の出力も自動で生成してくれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ dotnet run -- --help\nmyApp:\n  My sample app\n\nUsage:\n  myApp [options]\n\nOptions:\n  --int-option &lt;int-option>      An option whose argument is parsed as an int [default: 42]\n  --bool-option                  An option whose argument is parsed as a bool\n  --file-option &lt;file-option>    An option whose argument is parsed as a FileInfo\n  --version                      Show version information\n  -?, -h, --help                 Show help and usage information\n\n$ dotnet run -- --version\n1.0.0</code></pre></div>\n<p>コマンドラインアプリを作成するには<code>RootCommand</code>を生成する必要があります。\nこのサンプルアプリでは<code>--int-option</code>と<code>--bool-option</code>、<code>--file-option</code>の3つのオプション引数を設定しています。\nまた、コマンドラインアプリの説明文も指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rootCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"--int-option\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">getDefaultValue</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"An option whose argument is parsed as an int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"--bool-option\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"An option whose argument is parsed as a bool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span>FileInfo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"--file-option\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"An option whose argument is parsed as a FileInfo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nrootCommand<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">=</span> <span class=\"token string\">\"My sample app\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>コマンドラインアプリの処理は<code>RootCommand.Handler</code>に<code>ICommandHandler</code>を設定することでハンドリングできます。\n<code>ICommandHandler</code>は<code>CommandHandler.Create</code>を利用して生成できます。このサンプルアプリでは受け取ったオプション引数をそのままコンソールに出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">rootCommand<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> FileInfo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>intOption<span class=\"token punctuation\">,</span> boolOption<span class=\"token punctuation\">,</span> fileOption<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --int-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">intOption</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --bool-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">boolOption</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --file-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">fileOption<span class=\"token punctuation\">?.</span>FullName <span class=\"token operator\">??</span> <span class=\"token string\">\"null\"</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ハンドラの引数は先程指定したオプション引数を受け取るために指定します。\n引数名はオプション引数の名前と紐付きます（具体的には<code>--int-option</code>は、<code>intOption</code>という名前の引数で受け取っています）。</p>\n<p><code>RootCommand</code>を実行するには<code>RootCommand.InvokeAsync(args)</code>を呼び出します。<code>Result</code>にはコマンドラインの終了コードが格納されます。\nなのでエントリーポイントの戻り値は<code>RootCommand</code>の戻り値をそのまま返却します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">return</span> rootCommand<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"オプション引数のパース\" style=\"position:relative;\"><a href=\"#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%91%E3%83%BC%E3%82%B9\" aria-label=\"オプション引数のパース permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>オプション引数のパース</h2>\n<p>サンプルアプリを理解したところで、オプション引数のパース方法について詳しく追っていきます。\nオプション引数を用いることでコマンドラインに名前付きでパラメータを指定する事ができます。オプションはコマンドライン上で下記のように指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ myapp --int-option 123\n        ^----------^</code></pre></div>\n<p>Windowsでは下記のように指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ myapp /int-option 123\n        ^---------^</code></pre></div>\n<p>このオプションをコマンドラインでパースには、作成した<code>Command</code>クラスのインスタンスに<code>Option</code>を設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--int-option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>パースしたオプション値を利用するには、CommandHandlerの作成時に利用したいオプションに対応する引数を追加します。\n指定したオプションは引数名をもとに引数にマッチしてそのオプション値がバインドされます。\nデフォルトの規則では<strong>オプション名の<code>-</code>(ハイフン)はすべて無視され、また大文字と小文字の区別はありません</strong>。\n例えば上記の<code>--int-option</code>の場合は<code>intOption</code>という名前の引数に値がバインドされます。（上記のルール上、<code>intoption</code>でも<code>IntOption</code>でもマッチします）</p>\n<p>具体的には下記のようにオプション値をハンドリングすることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// --int-optionをintOptionという引数でハンドリングしている</span>\ncmd<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intOption<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>intOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--int-option 123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 123を出力する</span></code></pre></div>\n<p>オプションは指定した型に対応したパースを行いますが、パースに失敗する場合はエラーを出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--int-option onetwothree\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Cannot parse argument 'onetwothree' for option '--int-option' as expected type System.Int32.</span></code></pre></div>\n<p>型が<code>bool</code>の場合はその値をフラグとしても解釈することができます。例えば<code>app --a-flag</code>と指定した場合は、<code>--a-flag</code>オプションの値は<code>True</code>になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// False</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--a-flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// True</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--a-flag False\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// False</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--a-flag True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// True</span></code></pre></div>\n<p>オプションの型にはEnumも指定できます。また列挙に存在しない値はエラーとなります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileAccess<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file-access\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileAccess<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileAccess</span> fileAccess<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>fileAccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file-access Read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Read</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file-access Write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file-access Hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Cannot parse argument 'Hoge' for option '--file-access' as expected type System.IO.FileAccess.</span></code></pre></div>\n<p>コマンドラインアプリでパスを扱うことは多いですが、ファイルパスやディレクトリパスをパースする場合は<code>System.IO.FileInfo</code>および<code>System.IO.DirectoryInfo</code>をオプションの型として指定できます。\nまた、<code>ExistingOnly()</code>を呼び出すと（下記の例だと<code>--file</code>に指定している）、そのパスのファイルおよびディレクトリが実際に存在しない場合にエラーを返します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileInfo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>DirectoryInfo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--directory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExistingOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileInfo<span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>DirectoryInfo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>FileInfo</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>DirectoryInfo</span> directory<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"file = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">file</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"directory = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">directory</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file ./Program.cs --directory .\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// file = ./Program.cs</span>\n<span class=\"token comment\">// directory = .</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--file ./SonzaiShinai.cs --directory .\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// File does not exist: ./SonzaiShinai.cs</span></code></pre></div>\n<p>コマンドラインアプリによってはオプションがもっと多くの複雑なケースもあります。その場合にはオプション値を扱う専用のクラスにバインドすることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// オプションをまとめて受け取るクラス</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComplexType</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> AnInt <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> AString <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--an-int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--a-string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ComplexType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\">ComplexType</span> complex<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"AnInt = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">complex<span class=\"token punctuation\">.</span>AnInt</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, AString = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">complex<span class=\"token punctuation\">.</span>AString</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--an-int 123 --a-string 456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// AnInt = 123, AString = 456</span></code></pre></div>\n<h2 id=\"サブコマンド\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%96%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\" aria-label=\"サブコマンド permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サブコマンド</h2>\n<p>コマンドラインの機能が多くなる場合は、それぞれの機能をサブコマンドとして分割することができます。\nイメージとしてはgitコマンドで、コミットの状態確認や追加を<code>git status</code>や<code>git add</code>などそれぞれ別コマンドで呼び出しています。</p>\n<p><code>System.CommandLine</code>でサブコマンドを定義するには、<code>AddCommand</code>を利用します。下記の例ではサブコマンドに<code>cmd1</code>と<code>cmd2</code>を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// 親コマンド</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// サブコマンド cmd1</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd1<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--an-int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd1<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> anInt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Child Command cmd1: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">anInt</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddCommand</span><span class=\"token punctuation\">(</span>cmd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// サブコマンド cmd2</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd2<span class=\"token punctuation\">.</span><span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--a-string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd2<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> aString<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Sub command cmd2: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">aString</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">AddCommand</span><span class=\"token punctuation\">(</span>cmd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// サブコマンドのcmd1を呼び出す</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd1 --an-int 123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Sub command cmd1: 123</span>\n<span class=\"token comment\">// サブコマンドのcmd2を呼び出す</span>\n<span class=\"token keyword\">await</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd2 --a-string 456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Sub command cmd1: 456</span></code></pre></div>\n<h2 id=\"終了処理の実装\" style=\"position:relative;\"><a href=\"#%E7%B5%82%E4%BA%86%E5%87%A6%E7%90%86%E3%81%AE%E5%AE%9F%E8%A3%85\" aria-label=\"終了処理の実装 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>終了処理の実装</h2>\n<p>最後にコマンドラインアプリケーションの終了処理について触れておきます。</p>\n<p>コマンドラインアプリケーションでは、たとえばOSにプロセスが殺させることでプロセスが強制的に終了される場合があります。\n例えばユーザーがコマンドラインアプリケーション実行中に<code>Ctrl-C</code>を押すとプロセスを終了させる事ができます。</p>\n<p><code>Sysetm.CommandLine</code>はプロセス終了時をハンドリングする機能を用意しています。\n実装方法は簡単で、コマンドハンドラの引数に<code>CancellationToken</code>を追加し、非同期処理の<code>CancellationToken</code>にそのトークンを渡します。</p>\n<p>終了処理が呼び出された場合に<code>OperationCanceledException</code>が例外で投げられます。クリーンアップ処理などを実行したい場合は、catch句内に処理をかきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rootCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RootCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rootCommand<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">=</span> <span class=\"token string\">\"My sample app\"</span><span class=\"token punctuation\">;</span>\n\n        rootCommand<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IConsole</span> console<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The operation was aborted\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> rootCommand<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記の場合コマンドラインを実行後10秒待ちますが、その間に<code>Ctrl-C</code>を押すとアプリケーションの実行が途中でキャンセルされ、<code>OperationCanceledException</code>を投げます。\nそれを受け取ると標準エラー出力に<code>\"The operation was aborted\\n\"</code>を出力し、終了コードに失敗を意味する<code>1</code>を返却しています。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code>System.CommandLine</code>について、その基本的な使い方と、特にオプション引数のパース方法とサブコマンド、終了処理の実装について紹介しました。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://github.com/dotnet/command-line-api\">dotnet/command-line-api: Command line parsing, invocation, and rendering of terminal output.</a></li>\n<li><a href=\"https://github.com/dotnet/command-line-api/blob/main/docs/Your-first-app-with-System-CommandLine.md\">command-line-api/Your-first-app-with-System-CommandLine.md at main · dotnet/command-line-api</a></li>\n<li><a href=\"https://github.com/dotnet/command-line-api/blob/main/docs/Process-termination-handling.md\">command-line-api/Process-termination-handling.md at main · dotnet/command-line-api</a></li>\n<li><a href=\"https://github.com/dotnet/command-line-api/blob/main/docs/How-To.md\">command-line-api/How-To.md at main · dotnet/command-line-api</a></li>\n</ul>","excerpt":"コマンドラインアプリケーションを作りたかったのでSystem.CommandLineを利用してみた。その備忘録としてこの記事を記載します。 System.CommandLine とは System.ConmmandLineは.NETでコンソールアプリケーション(CLI)を作るための.NET公式のライブラリです。\n触った印象ではライブラリというよりかはフレームワークの立ち位置の印象です。 主にCLIのコマンドライン引数のパースしその結果をCLIアプリケーションの引数などにマッピングしたり、\nCLI…","fields":{"slug":"/articles/2021/03/intro-system-commandline/"},"frontmatter":{"date":"March 09, 2021","type":null,"tags":["C#","System.CommandLine"],"title":"System.CommandLine 入門","description":null,"eyecatch":null}}},"pageContext":{"id":"80dbd45b-4c9d-505e-bdc4-5e90f4314e3e"}},"staticQueryHashes":["1480509143","3159585216"]}