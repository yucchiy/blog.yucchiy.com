{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2021/05/system-commandline-hosting/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<p>System.CommandLineには<a href=\"https://www.nuget.org/packages/System.CommandLine.Hosting/0.3.0-alpha.21216.1\">System.CommandLine.Hosting</a>というMicrosoft.Extensions.Hostingをサポートするライブラリがあります。</p>\n<p>これは一言でいうと、System.CommandLineでGenericHostを利用するためのパッケージです。\n厳密にいうとSystem.CommandLineの各種機能はGenericHostにより構築されますが、その実装は<code>CommandHander</code>により隠蔽されています。</p>\n<p>そのためSystem.CommandLine.Hostingは、ホストの構築のカスタマイズをサポートするためのパッケージといえます。\n用途としては用意したクラスのDepencency Injection（DI）GenericHostに備わっているや設定ファイルのサポート、ログ周りの機能の利用が多いかと思います。</p>\n<h2 id=\"セットアップ\" style=\"position:relative;\"><a href=\"#%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-label=\"セットアップ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>セットアップ</h2>\n<p>プロジェクトを作成し、<a href=\"https://www.nuget.org/packages/System.CommandLine/\">System.CommandLine</a>と<a href=\"https://www.nuget.org/packages/System.CommandLine.Hosting/\">System.CommandLine.Hosting</a>を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dotnet add package System.CommandLine --version 2.0.0-beta1.21216.1\ndotnet add package System.CommandLine.Hosting --version 0.3.0-alpha.21216.1</code></pre></div>\n<h2 id=\"利用してみる\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"利用してみる permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用してみる</h2>\n<p><a href=\"https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Hosting.Tests/HostingHandlerTest.cs\">https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Hosting.Tests/HostingHandlerTest.cs</a></p>\n<p>System.CommandLine.Hosting経由でDIを利用してみます。まずはコード全容を下記に示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xunit</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>Invocation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>Parsing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CommandLine<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>DependencyInjection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CliTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 利用部</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandLineBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">UseHost</span><span class=\"token punctuation\">(</span>host <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            host<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            host<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseCommandHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyCommand<span class=\"token punctuation\">,</span> MyCommand<span class=\"token punctuation\">.</span>MyHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parser <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"46\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"--string-option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyCommand\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// コマンド定義</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Command</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mycommand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">AddArgument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Argument<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IntArgument\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--string-option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICommandHandler</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MyService</span> _service<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> IntArgument <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> StringOption <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IConsole</span> Console <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">MyHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyService</span> service<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _service<span class=\"token punctuation\">.</span><span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">,</span> StringOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>IntArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// DIによってインジェクションされるサービス</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IConsole</span> console<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/yucchiy/sandbox-csharp/blob/master/src/Sandbox.System.CommandLine.Tests/UnitTest1.cs\">https://github.com/yucchiy/sandbox-csharp/blob/master/src/Sandbox.System.CommandLine.Tests/UnitTest1.cs</a></p>\n<h3 id=\"コマンドとコマンドハンドラーの定義\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%83%BC%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"コマンドとコマンドハンドラーの定義 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドとコマンドハンドラーの定義</h3>\n<p>コマンドの定義は下記のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Command</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mycommand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">AddArgument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Argument<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IntArgument\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">AddOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Option<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--string-option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>mycommand</code>という名前でコマンドを作成しています。\nこのコマンドはコマンドライン引数から<code>IntArgument</code>という引数を１つと、<code>--string-option</code>というオプション引数を受け取ることができます。</p>\n<p>具体的には下記のようなコマンドライン引数を受け取ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">46            --string-option hello\n~~            ~~~~~~~~~~~~~~~~~~~~~\n# IntArgument --string-option</code></pre></div>\n<p>コマンドハンドラーの実装ですが、\bSystem.CommandLine.Hostingを用いない、通常のコマンドハンドラー実装の場合は下記のように<code>CommandHandler.Create</code>を利用します。\n<a href=\"https://blog.yucchiy.com/2021/03/intro-system-commandline/\">https://blog.yucchiy.com/2021/03/intro-system-commandline/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// commandはCommandクラスのインスタンス</span>\ncommand<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> CommandHandler<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>intArgument<span class=\"token punctuation\">,</span> stringOption<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for IntArgument is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">intArgument</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The value for --string-option is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">stringOption</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>System.CommandLine.Hostingを用いる場合は、下記のように<code>ICommandHandler</code>を実装したクラスを用意します。</p>\n<h3 id=\"コマンドハンドラーへのdi\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%83%BC%E3%81%B8%E3%81%AEdi\" aria-label=\"コマンドハンドラーへのdi permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドハンドラーへのDI</h3>\n<p>上記の<strong>引数およびオプション引数は、このクラスのプロパティにインジェクションされます</strong>。それらを受け取るための<code>IntArgument</code>および<code>StringOption</code>を定義します。\n<code>IntArgument</code>プロパティで<code>new Argument&#x3C;int>(\"IntArgument\")</code>で指定した引数を、<code>StringOption</code>で、<code>new Option&#x3C;string>(\"--string-option\")</code>で指定したオプション引数を取得できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// MyCommmandのネストクラスとして実装している</span>\n<span class=\"token comment\">// (もちろんネストしなくてもOK)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ICommandHandler</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// コンストラクタインジェクション経由で初期化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MyService</span> _service<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// OptionやArgumentはプロパティインジェクションされる</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> IntArgument <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> StringOption <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// コマンドラインの利用するコンソール情報もプロパティインジェクションされる</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IConsole</span> Console <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 続きはこのあと</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>次に<code>MyHandler</code>が利用する<code>MyService</code>をDIします。DIはコンストラクタ経由で行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token function\">MyHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyService</span> service<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    _service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このようにコンストラクタ引数として指定した<code>MyService</code>が自動でDIされます。</p>\n<h3 id=\"コマンドの呼び出し\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"コマンドの呼び出し permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドの呼び出し</h3>\n<p>では上記のコマンドを実行するところをみていきます。通常は、<code>Command.InvokeAsync</code>でコマンドを実行していましたが、\n<code>System.CommandLine.Hosting</code>を使う場合、<code>CommandLineBuilder</code>経由で\b\bパーサーを作成し、そのパーサー経由で<code>InvokeAsync</code>を呼び出します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandLineBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseHost</span><span class=\"token punctuation\">(</span>host <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    host<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseCommandHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyCommand<span class=\"token punctuation\">,</span> MyCommand<span class=\"token punctuation\">.</span>MyHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parser <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// コマンドラインの呼び出し</span>\n<span class=\"token comment\">// argsはコマンドライン引数が格納されたstring配列</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ここで、<code>CommandLineBuilder</code>に対してDI設定や、コマンドハンドラーを設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// コマンドラインの標準機能を一通り初期化</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ここでホスト設定（DIや設定ファイル、ログまわりの設定）</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseHost</span><span class=\"token punctuation\">(</span>host <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ここで依存定義</span>\n        <span class=\"token comment\">// これでMyServiceをコンストラクタインジェクションできる</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// いままではcommand.Handler = CommandHandler.Create</span>\n    <span class=\"token comment\">// でやってた箇所をUseCommandHanderで定義する</span>\n    host<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseCommandHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyCommand<span class=\"token punctuation\">,</span> MyCommand<span class=\"token punctuation\">.</span>MyHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>UseHost</code>でホスト設定を行います。DIの依存関係の定義は上記の<code>host.ConfigureService</code>内で行っています。<a href=\"https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-usage\">こちらのドキュメント</a>を参考に設定します。</p>\n<p>また<code>UserCommandHandler</code>で、<code>Command</code>に対してどのコマンドハンドラーを利用するかを定義します。</p>\n<p><code>UserDefaults</code>は、コマンドラインアプリケーションで必要な設定を一通り行ってくれるので呼び出しておきます。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code>System.CommandLine.Hosting</code>について、その説明と利用方法を説明しました。</p>","excerpt":"概要 System.CommandLineにはSystem.CommandLine.HostingというMicrosoft.Extensions.Hostingをサポートするライブラリがあります。 これは一言でいうと、System.CommandLineでGenericHostを利用するためのパッケージです。\n厳密にいうとSystem.CommandLineの各種機能はGenericHostにより構築されますが、その実装はCommandHanderにより隠蔽されています。 そのためSystem…","fields":{"slug":"/articles/2021/05/system-commandline-hosting/"},"frontmatter":{"date":"May 27, 2021","type":null,"tags":["C#","System.CommandLine","CLI"],"title":"System.CommandLine.Hostingを利用して、System.CommandLineでDIする","description":null,"eyecatch":null}}},"pageContext":{"id":"b4e659c9-3b12-52e1-a6bb-a544025ba800"}},"staticQueryHashes":["1480509143","3159585216"]}