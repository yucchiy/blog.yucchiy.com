{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2014/08/20/delivery-api-with-rails/","result":{"data":{"markdownRemark":{"html":"<p>某インターンのメンターをしながら, メンターたちと空いてる時間を使ってネイティブアプリを書いていた.\nその時バックエンドをRailsで書いて思ったことを夏休みの感想文としてまとめてみた.</p>\n<h2 id=\"ライブラリの選定\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E9%81%B8%E5%AE%9A\" aria-label=\"ライブラリの選定 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ライブラリの選定</h2>\n<h3 id=\"grape\" style=\"position:relative;\"><a href=\"#grape\" aria-label=\"grape permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grape</h3>\n<p>RailsでAPIといえば, <a href=\"https://github.com/intridea/grape\">Grape</a>というライブラリが有名だけど, 特にRailsのデフォルトのコントローラで困ることが少なかったのと, Railsとの記法の違いっぽいところがあって, 導入しなかった.</p>\n<p>ただいま考えてみれば, <a href=\"https://github.com/intridea/grape#parameter-validation-and-coercion\">パラメータのバリデーション</a>や, (どう管理するのかしらんけど)<a href=\"https://github.com/intridea/grape#cookies\">Cookie</a>をサポートしていたり, <a href=\"https://github.com/intridea/grape#exception-handling\">エラーハンドリング</a>もいい感じだし, 導入してみたら楽だったかもしれない.</p>\n<p>各アクションに<code>desc</code>を書いておけば, ドキュメントの自動生成とかできたりするし. 実はとても便利かもしれない.(反省終わり)</p>\n<h3 id=\"rabl\" style=\"position:relative;\"><a href=\"#rabl\" aria-label=\"rabl permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rabl</h3>\n<p>Grapeのかわりに<a href=\"https://github.com/nesquena/rabl\">Rabl</a>というJSONとかの記述を楽にするDSLを提供するテンプレートエンジンを導入した. 単純にRailsの<code>render :json</code>とかで出力してしまってもいいのだが, コントローラでJSONの構造を構築するのはスマートではないし, InstagramやTwitterのAPIでは, すべてのAPIレスポンスに<a href=\"http://instagram.com/developer/endpoints/\">Envelope</a>と呼ばれる, APIのコールにステータスコードやメッセージをのせるケースが多く, そういうのに対応させようと思うとRablがいいかな, と思って導入した.</p>\n<p>例えば, ビューで</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># app/views/posts/index.rabl</span>\ncollection <span class=\"token variable\">@posts</span>\nattributes <span class=\"token symbol\">:id</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:title</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:subject</span>\nchild<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> attributes <span class=\"token symbol\">:full_name</span> <span class=\"token punctuation\">}</span>\nnode<span class=\"token punctuation\">(</span><span class=\"token symbol\">:read</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>post<span class=\"token operator\">|</span> post<span class=\"token punctuation\">.</span>read_by<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>って書くと</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>  <span class=\"token string-property property\">\"post\"</span> <span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"subject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"full_name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"read\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>って出力される(公式丸パクリ). 便利.</p>\n<h2 id=\"railsでapiを書くときの知見\" style=\"position:relative;\"><a href=\"#rails%E3%81%A7api%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%A8%E3%81%8D%E3%81%AE%E7%9F%A5%E8%A6%8B\" aria-label=\"railsでapiを書くときの知見 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RailsでAPIを書くときの知見</h2>\n<p>Rails+RablでAPI書いてたまった知見を書いていく.</p>\n<h3 id=\"csrf対策\" style=\"position:relative;\"><a href=\"#csrf%E5%AF%BE%E7%AD%96\" aria-label=\"csrf対策 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSRF対策</h3>\n<p>APIリクエストの場合, CSRF対策が特に必要ないので, <code>ApplicationController</code>に以下のように記述することで, CSRFを回避する.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">skip_before_action <span class=\"token symbol\">:verify_authenticity_token</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">if</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:json_request?</span>\n\n<span class=\"token keyword\">protected</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">json_request</span></span><span class=\"token operator\">?</span>\n  request<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span>json<span class=\"token operator\">?</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3 id=\"strong-parameters\" style=\"position:relative;\"><a href=\"#strong-parameters\" aria-label=\"strong parameters permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strong Parameters</h3>\n<p>RailsのForm+Strong Parametersだと, よく以下のような記述を見る.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">article_params</span></span>\n   params<span class=\"token punctuation\">.</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:article</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permit<span class=\"token punctuation\">(</span><span class=\"token symbol\">:headline</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:content</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>ただAPIのクエリは, <code>{article:{ headline: \"hoge\", content: \"piyo\" }}</code>みたいなネストした感じでクエリ送ることってあんまりないと思う. ということでStrong Parametersを利用するために以下のように書いた.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">article_params</span></span>\n  ActionController<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Parameters</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permit<span class=\"token punctuation\">(</span><span class=\"token symbol\">:headline</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:content</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3 id=\"基底コントローラの活用\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E5%BA%95%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E6%B4%BB%E7%94%A8\" aria-label=\"基底コントローラの活用 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基底コントローラの活用</h3>\n<p>RailsでAPI書いてると, 多分<code>/api</code>以下はデフォルトでJSONで返したいニーズとかあると思う. そういう場合は, <code>ApplicationController</code>を継承した<code>Api::ApplicationController</code>とか定義して<code>/app/controllers/api/application_controller.rb</code>とし, そこに<code>respond_to :json</code>とか, <code>default_format :json</code>とかしておくと何かと便利.</p>\n<h2 id=\"不満点とか\" style=\"position:relative;\"><a href=\"#%E4%B8%8D%E6%BA%80%E7%82%B9%E3%81%A8%E3%81%8B\" aria-label=\"不満点とか permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不満点とか</h2>\n<p>不便だと思った点とか上げていく.</p>\n<h3 id=\"例外の扱い\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%E5%A4%96%E3%81%AE%E6%89%B1%E3%81%84\" aria-label=\"例外の扱い permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例外の扱い</h3>\n<p>Railsのコントローラ内で投げられる例外は, すべてそのステータスコードをもってほしいと思った. またコントローラ内でモデルのCRUDを行って失敗した時は, 直ちに例外を投げるように実装を行うべきだと思った.</p>\n<p>明示的にキャッチしなかった例外は, <code>ApplicationController</code>でハンドルし, 例外が持っているメッセージとステータスコードを出力することで, 一貫したエラー処理が行えるし, 各コントローラでは基本例外を投げるので, 分岐が減り, 読みやすいコントローラが書けるのではと思った.</p>\n<p>あと, No route errorは例外でキャッチしたい.</p>\n<h3 id=\"rablのlayoutsがうまく動かない\" style=\"position:relative;\"><a href=\"#rabl%E3%81%AElayouts%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84\" aria-label=\"rablのlayoutsがうまく動かない permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RablのLayoutsがうまく動かない</h3>\n<p>最初に書いたEnvelopeの対応は<a href=\"https://github.com/nesquena/rabl/wiki/Using-Layouts\">RablのLayouts</a>を使うと綺麗にかけて良さそうだけど, 以下のサンプルのソースを書いてもうまくいかなかった. 具体的には<code>yield</code>の部分が<code>nil</code>になってしまった.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">node<span class=\"token punctuation\">(</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> response<span class=\"token punctuation\">.</span>status <span class=\"token punctuation\">}</span>\nnode<span class=\"token punctuation\">(</span><span class=\"token symbol\">:error</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token variable\">@error</span><span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">.</span>html_safe <span class=\"token punctuation\">}</span>\n\nnode<span class=\"token punctuation\">(</span><span class=\"token symbol\">:result</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">case</span> content_type\n  <span class=\"token keyword\">when</span> <span class=\"token symbol\">:json</span>\n    Yajl<span class=\"token double-colon punctuation\">::</span>Parser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">when</span> <span class=\"token symbol\">:xml</span>\n    <span class=\"token class-name\">Nori</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>直し方募集中.</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Railsで雑にAPIを納品した時の感想として, 概ねRailsでいい感じにかけていいけど, 多少不満とかあったのでまとめてみた. たぶんGrape導入したら解決しそうだし皆さんGrape使いましょう(完).</p>","excerpt":"某インターンのメンターをしながら, メンターたちと空いてる時間を使ってネイティブアプリを書いていた.\nその時バックエンドをRailsで書いて思ったことを夏休みの感想文としてまとめてみた. ライブラリの選定 Grape RailsでAPIといえば, Grapeというライブラリが有名だけど, 特にRailsのデフォルトのコントローラで困ることが少なかったのと, Rails…","fields":{"slug":"/articles/2014/08/20/delivery-api-with-rails/"},"frontmatter":{"date":"August 20, 2014","type":null,"tags":["ruby","rails","api"],"title":"RailsでAPIを書いたときの雑な感想","description":null,"eyecatch":null}}},"pageContext":{"id":"b2892ff4-03dd-5d90-b6b9-8e82a4430f27"}},"staticQueryHashes":["1480509143","3159585216"]}