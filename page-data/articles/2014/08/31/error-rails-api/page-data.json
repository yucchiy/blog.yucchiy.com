{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2014/08/31/error-rails-api/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/\">RailsでAPIを雑に書いていたんだけど</a>, コントローラとかをどう書くとエラー処理しやすくなっていいかなーと考えていて, 個人的に考えがまとまったのでブログ書いた.</p>\n<p>※9/1に追記書いた.</p>\n<h2 id=\"良いエラー処理について\" style=\"position:relative;\"><a href=\"#%E8%89%AF%E3%81%84%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"良いエラー処理について permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>良いエラー処理について</h2>\n<p>個人的にAPIを書く上で(API書くに限らない気はするけど)どういうふうにエラー処理を行うと良いかなーと考えてみると</p>\n<ul>\n<li>コントローラ内では基本的に, <strong>ある関数の処理が失敗して, 次の処理が行えない場合はすべて例外を投げる</strong></li>\n<li>例外は各々のコントローラ内で例外のキャッチは行わず, すべてApplicationControllerなど, <strong>親コントローラ内の1メソッドで完結させる</strong></li>\n</ul>\n<p>かなーと思う. APIのエラー処理は, <a href=\"http://instagram.com/developer/endpoints/\">Envelopeにステータスコードとエラーメッセージを書いて</a>, APIのフォーマットを統一するほうがクライアントが作りやすそうだし, またこのように処理することで, <strong>エラー処理での条件分岐の必要がなくなり</strong>, コントローラの可読性の向上にもつながる.</p>\n<h2 id=\"grape-vs-rails\" style=\"position:relative;\"><a href=\"#grape-vs-rails\" aria-label=\"grape vs rails permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grape vs Rails</h2>\n<p>APIつくるんだったら, <a href=\"https://www.google.co.jp/search?q=rails+api&#x26;oq=rails+api+&#x26;aqs=chrome..69i57j69i60l3j69i59j69i61.9488j0j1&#x26;sourceid=chrome&#x26;es_sm=119&#x26;ie=UTF-8\">Grapeサイコー</a>という意見が多い.</p>\n<p>確かにGrapeのDSLは直感的に書けるし, バリデーションなど便利メソッドが多いけど, 個人的には素のRailsでAPIを書くほうがセンスが良いと感じる. というのもRackベースなので, ルーティングなど独自のものが多く, せっかくRailsが提供してるRakeのタスクや, ジェネレータがそのまま使えないからである.</p>\n<p>SinatraとかでAPI納品するんだったら, Grapeとかいれるのはすごい良さそう.</p>\n<p>ただ, そのままのRailsではJSONやXMLをいい感じの構造で返す仕組みが貧弱なので, <a href=\"https://github.com/nesquena/rabl\">RABL</a>を導入するのが便利. これはJSONやXMLをいい感じに生成するためのテンプレートエンジンで, DSLを用いて直感的にAPI出力を定義できる.</p>\n<p>また, <a href=\"https://github.com/nesquena/rabl/wiki/Using-Layouts\">RailsのLayoutsにも対応しており</a>, <code>views/layouts/application.rabl</code>とかを定義しておくことで, <a href=\"http://instagram.com/developer/endpoints/\">Envelope</a>みたいなのを簡単に実現できる.</p>\n<h2 id=\"コントローラ内でのエラー処理\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E5%86%85%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86\" aria-label=\"コントローラ内でのエラー処理 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コントローラ内でのエラー処理</h2>\n<p>上記に上げたとおり, コントローラ内でモデルのCRUDなどの<strong>処理が失敗した場合</strong>は例外を投げてApplicationControllerに処理を渡す.</p>\n<p>例えば<code>show</code>メソッドでは以下のように処理する.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n  <span class=\"token variable\">@piyo</span> <span class=\"token operator\">=</span> Piyo<span class=\"token punctuation\">.</span>find_by<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2 id=\"applicationcontrollerでのエラー処理\" style=\"position:relative;\"><a href=\"#applicationcontroller%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86\" aria-label=\"applicationcontrollerでのエラー処理 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ApplicationControllerでのエラー処理</h2>\n<p>以下のようなConcernを定義し, ApplicationControllerから読み込むことでエラー処理を行う.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Api</span><span class=\"token double-colon punctuation\">::</span>ErrorHandlers\n  <span class=\"token keyword\">extend</span> ActiveSupport<span class=\"token double-colon punctuation\">::</span>Concern\n\n  attr_accessor <span class=\"token symbol\">:status</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:message</span>\n\n  included <span class=\"token keyword\">do</span>\n    before_filter <span class=\"token symbol\">:setup</span>\n    rescue_from StandardError<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:with</span> <span class=\"token operator\">=></span> <span class=\"token symbol\">:rescue_exception</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">rescue_exception</span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@message</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message\n    <span class=\"token keyword\">if</span> rescuable<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n      re <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>Api<span class=\"token double-colon punctuation\">::</span>Exceptions<span class=\"token double-colon punctuation\">::</span>RescuableException<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> e <span class=\"token operator\">:</span> <span class=\"token constant\">RESCUABLE_EXCEPTIONS</span><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>to_sym<span class=\"token punctuation\">]</span>\n      <span class=\"token variable\">@status</span> <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>status\n    <span class=\"token keyword\">else</span>\n      <span class=\"token variable\">@status</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n      <span class=\"token variable\">@message</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message\n    <span class=\"token keyword\">end</span>\n\n    render <span class=\"token string-literal\"><span class=\"token string\">'api/errors/base'</span></span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">rescuable</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>Api<span class=\"token double-colon punctuation\">::</span>Exceptions<span class=\"token double-colon punctuation\">::</span>RescuableException<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">RESCUABLE_EXCEPTIONS</span><span class=\"token punctuation\">.</span>has_key<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>to_sym<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span>\n    <span class=\"token variable\">@status</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n    <span class=\"token variable\">@message</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"OK\"</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>ポイントはすべての例外処理を<code>rescue_exception</code>で受け取るところである. この<code>rescue_exception</code>は投げられた例外によって, 適切なステータスコードとエラーメッセージをビューに渡すメソッドで, それらはEnvelopeとして出力される. 例えばRablのLayoutsで以下のように定義することでエラー出力する.</p>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\">{\n  \"status\": <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token ruby language-ruby\"> <span class=\"token variable\">@status</span><span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">.</span>html_safe </span><span class=\"token delimiter punctuation\">%></span></span>,\n  \"message\": <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token ruby language-ruby\"> <span class=\"token variable\">@message</span><span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">.</span>html_safe </span><span class=\"token delimiter punctuation\">%></span></span>,\n  \"data\": <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token ruby language-ruby\"> <span class=\"token keyword\">yield</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n}</code></pre></div>\n<p>ここで, 例外に対応するステータスコードを以下のように引く.</p>\n<ol>\n<li>独自の例外の場合は, その<strong>例外クラスにステータスを保持させる</strong></li>\n<li>組み込みの例外（例えばActiveRecordのNotFoundException）の場合は, 例外に対応する<strong>ステータスコードの対応表から</strong>引く</li>\n<li>それ以外の例外の場合は500を返す</li>\n</ol>\n<p>1の場合は, <code>Api::Exceptions::RescuableException</code>を作成して, それを継承した独自の例外クラスを投げて対応する.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Api</span><span class=\"token double-colon punctuation\">::</span>Exceptions\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">RescuableException</span> <span class=\"token operator\">&lt;</span> StandardError\n    attr_accessor <span class=\"token symbol\">:status</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Error\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@status</span> <span class=\"token operator\">=</span> status\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnAuthenticationException</span> <span class=\"token operator\">&lt;</span> RescuableException\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>2の場合は, <code>RESCUEABLE_EXCEPTIONS</code>みたいなハッシュを作って対応する.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">RESCUABLE_EXCEPTIONS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ActiveRecord<span class=\"token double-colon punctuation\">::</span>RecordNotFound<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>to_sym <span class=\"token operator\">=></span> Api<span class=\"token double-colon punctuation\">::</span>Exceptions<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">RescuableException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Record Not Found\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>3の場合は, 上に2つの条件を満たさない場合に500を返すように<code>rescue_exception</code>メソッドを書くことで対応する.</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>ApplicationControllerで<code>Api::ErrorHandlers</code>を定義し, <code>rescue_exception</code>で例外処理することで, 開発速度が上がって良さそうだという個人的なエラー処理のまとめを書いてみた.</p>\n<h2 id=\"追記\" style=\"position:relative;\"><a href=\"#%E8%BF%BD%E8%A8%98\" aria-label=\"追記 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>追記</h2>\n<p><a href=\"https://twitter.com/r7kamura\">@r7kamura</a>さんに, 以下のリプライを頂いて</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"http://t.co/mcjKTWmnr7\">http://t.co/mcjKTWmnr7</a> コントローラで積極的に例外投げるの, わりと自分の中ではしっくりきてるけど, きっと違う局面に遭遇したら違うことしてる気がする</p>&mdash; ゆっち〜 (@yucchiy_) <a href=\"https://twitter.com/yucchiy_/status/506088286457057280?ref_src=twsrc%5Etfw\">2014年8月31日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/yucchiy_?ref_src=twsrc%5Etfw\">@yucchiy_</a> 例えばありがちな問題として、RailsにContent-Type: application/jsonを指定しながら誤ったJSONを送ると、パース部分はRack middlewareで実装されているので、例外が発生して500が返ります (400とかにしたい)</p>&mdash; r7kamura (@r7kamura) <a href=\"https://twitter.com/r7kamura/status/506094476809367552?ref_src=twsrc%5Etfw\">2014年8月31日</a></blockquote>\n<p>確かに, <strong>Rack middlewareのこととか全く考慮できてなくてダメダメ</strong>って感じだった.</p>\n<p>そして起きたら<a href=\"http://qiita.com/r7kamura/items/2e88adbdd1782277b2e7\">RailsでAPIをつくるときのエラー処理</a>っていうすごい知見がまとめられていた.</p>","excerpt":"RailsでAPIを雑に書いていたんだけど, コントローラとかをどう書くとエラー処理しやすくなっていいかなーと考えていて, 個人的に考えがまとまったのでブログ書いた. ※9/1に追記書いた. 良いエラー処理について 個人的にAPIを書く上で(API…","fields":{"slug":"/articles/2014/08/31/error-rails-api/"},"frontmatter":{"date":"August 31, 2014","type":null,"tags":null,"title":"RailsでAPIを作るときのエラー処理について","description":null,"eyecatch":null}}},"pageContext":{"id":"369c69ab-d416-50cb-9beb-c7c0f10ca8af"}},"staticQueryHashes":["1480509143","3159585216"]}