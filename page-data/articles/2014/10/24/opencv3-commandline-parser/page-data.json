{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2014/10/24/opencv3-commandline-parser/","result":{"data":{"markdownRemark":{"html":"<p>OpenCVには<code>CommandLineParser</code>というクラスが2.3.0以降から実装されており, これを用いることで特にオプション引数を簡単にパースすることができる.\nただOpenCVの<code>CommandLineParser</code>は, <strong>頻繁にその仕様が変わっており</strong>, 特に日本語で調べると2.3, 2.4系の仕様について出てくるので,\n今回はOpenCV3の<code>CommandLineParser</code>を紹介する.</p>\n<h2 id=\"使い方\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"使い方 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h2>\n<p><code>cv::CommandLineParser</code>は, <code>opencv2/core.hpp</code>で定義されているのでインクルードするようにする. (ただ, ほぼ確実にインクルードするファイルなのでまず忘れないと思う.)</p>\n<p>サンプルは以下のとおり.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/core.hpp></span></span>\n\n<span class=\"token keyword\">const</span> cv<span class=\"token double-colon punctuation\">::</span>String keys <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"{help h usage |      | print this message   }\"</span>\n    <span class=\"token string\">\"{@image1      |      | image1 for compare   }\"</span>\n    <span class=\"token string\">\"{@image2      |      | image2 for compare   }\"</span>\n    <span class=\"token string\">\"{@repeat      |1     | number               }\"</span>\n    <span class=\"token string\">\"{path         |.     | path to file         }\"</span>\n    <span class=\"token string\">\"{fps          | -1.0 | fps for output video }\"</span>\n    <span class=\"token string\">\"{N count      |100   | count of objects     }\"</span>\n    <span class=\"token string\">\"{ts timestamp |      | use time stamp       }\"</span>\n    <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    cv<span class=\"token double-colon punctuation\">::</span>CommandLineParser <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parser<span class=\"token punctuation\">.</span><span class=\"token function\">about</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A Sample of CommandLineParser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parser<span class=\"token punctuation\">.</span><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> fps <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cv<span class=\"token double-colon punctuation\">::</span>String path <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> use_time_stamp <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cv<span class=\"token double-colon punctuation\">::</span>String img1 <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cv<span class=\"token double-colon punctuation\">::</span>String img2 <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parser<span class=\"token punctuation\">.</span><span class=\"token function\">printErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以下のように使う.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/app -N=200 1.png 2.jpg 19 -ts</code></pre></div>\n<h3 id=\"引数の指定\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E6%95%B0%E3%81%AE%E6%8C%87%E5%AE%9A\" aria-label=\"引数の指定 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引数の指定</h3>\n<p>引数の指定は, <code>cv::String</code>で特定のフォーマットでコンストラクタに渡してやることで行う.\nフォーマットは以下のとおり.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token string\">\"{ オプション名 | デフォルト引数 | オプションの説明 }\"</span></code></pre></div>\n<p>オプション名には, スペース区切りでオプションを複数指定できる. <code>cv::CommandLineParser</code>にはショートオプションとロングオプションの\n区別はなく, 例えば上の例だと<code>-h</code>でも<code>--h</code>でもヘルプが呼び出される.</p>\n<p>オプション名の先頭の@をつけると普通の引数として解釈される.</p>\n<p>デフォルト引数はそのままで, 何も指定しないとこの値が返却される.</p>\n<p>オプションの説明は, <code>printMessage</code>メソッドを呼び出した時に表示される説明. 例えば上記の例で<code>printMessage</code>を呼び出すと以下のようなメッセージが表示される.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A Sample of CommandLineParser\nUsage: cmd [params] image1 image2 repeat\n\n        -N, --count (value:100)\n                count of objects\n        --fps (value:-1.0)\n                fps for output video\n        -h, --help, --usage (value:true)\n                print this message\n        --path (value:.)\n                path to file\n        --timestamp, --ts\n                use time stamp\n\n        image1\n                image1 for compare\n        image2\n                image2 for compare\n        repeat (value:1)\n                number</code></pre></div>\n<h3 id=\"引数の受け取り\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E6%95%B0%E3%81%AE%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A\" aria-label=\"引数の受け取り permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引数の受け取り</h3>\n<p>引数の受け取りは, <code>get</code>メソッドを用いて行う. 引数に文字列を渡すと, それに対応したオプション引数の値を, int値を渡すと対応した引数を取得できる.\nテンプレート引数には受け取りたい型を指定する.</p>\n<p>オプション引数が指定されたかどうかを確認したい場合は, <code>has</code>メソッドを用いる事もできる. これはオプション引数が存在するかどうかをbool値で返すメソッドである.</p>\n<h3 id=\"引数のチェック\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\" aria-label=\"引数のチェック permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引数のチェック</h3>\n<p><code>check</code>メソッドを実行すると, <code>get</code>メソッドで指定した型について, 正しい引数の値を渡したかどうかをチェックして, その結果をbool値で受け取ることができる.</p>\n<p>例えば上記のプログラムを, 以下のように実行した場合(つまり, 本来はint値を渡すところを文字列を渡した)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./cmd -N=hoge</code></pre></div>\n<p>以下の様なエラーを, <code>printErrors</code>メソッドにより出力することができる.</p>\n<p>このメソッドには1点注意が必要で, <strong>必ず<code>get</code>メソッドを呼び終わったあとに実行</strong>しないとチェックの結果が正しく返却されない.</p>\n<h3 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h3>\n<p><code>cv::CommandLineParser</code>を用いると, 簡単にコマンドライン引数を解析することができる.\nもちろんこれよりも高機能(?)なライブラリは存在するが, OpenCVのみの環境でコマンドラインツールを開発する際は手軽で良い.</p>\n<p>ただ個人的に, 引数の指定の際に必須であるかというチェックを行えて, かつ<code>check</code>メソッドでチェックできると良いなーと思った.</p>\n<h3 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"http://docs.opencv.org/trunk/modules/core/doc/command_line_parser.html\">http://docs.opencv.org/trunk/modules/core/doc/command_line_parser.html</a></li>\n</ul>","excerpt":"OpenCVにはCommandLineParserというクラスが2.3.0以降から実装されており, これを用いることで特にオプション引数を簡単にパースすることができる.\nただOpenCVのCommandLineParserは, 頻繁にその仕様が変わっており, 特に日本語で調べると2.3, 2.4系の仕様について出てくるので,\n今回はOpenCV3のCommandLineParserを紹介する. 使い方 cv::CommandLineParserは, opencv2/core.hpp…","fields":{"slug":"/articles/2014/10/24/opencv3-commandline-parser/"},"frontmatter":{"date":"October 23, 2014","type":null,"tags":null,"title":"OpenCV3のCommandLineParserを使って簡単にコマンドライン引数を受け取る","description":null,"eyecatch":null}}},"pageContext":{"id":"8d8d7f06-c8a4-5449-a99f-ef3163e45776"}},"staticQueryHashes":["1480509143","3159585216"]}