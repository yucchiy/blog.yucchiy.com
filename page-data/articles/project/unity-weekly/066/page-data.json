{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/project/unity-weekly/066/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"unity-official\" style=\"position:relative;\"><a href=\"#unity-official\" aria-label=\"unity official permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity Official</h1>\n<h2 id=\"unity-2021-lts-でメモリの使い方をカスタマイズする\" style=\"position:relative;\"><a href=\"#unity-2021-lts-%E3%81%A7%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B\" aria-label=\"unity 2021 lts でメモリの使い方をカスタマイズする permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity 2021 LTS でメモリの使い方をカスタマイズする</h2>\n<p><a href=\"https://blog.unity.com/ja/technology/customize-your-memory-use-with-unity-2021-lts\">Unity 2021 LTS でメモリの使い方をカスタマイズする | Unity Blog</a></p>\n<p>Unity 2021 LTSから利用できるメモリアロケーターのカスタマイズについて紹介しています。</p>\n<p>Unityがネイティブのメモリ割り当てを行う仕組みとしてアロケーターの中の「バケットアロケーター」と「動的ヒープアロケーター」の紹介と、メモリ割り当てを要求されたときのUnity内でのアロケーターの使い分けについて解説しています。</p>\n<p>またケーススタディとして、「Ori」のNintendo Switch移植時にパフォーマンスを最適化する（60fpsの維持）際に行ったメモリアロケーターの調整とメモリアロケーターのカスタマイズ機能開発の経緯についても言及しています。</p>\n<h2 id=\"ランタイムで-ui-toolkit-を使うその内側を覗く\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%A0%E3%81%A7-ui-toolkit-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%9D%E3%81%AE%E5%86%85%E5%81%B4%E3%82%92%E8%A6%97%E3%81%8F\" aria-label=\"ランタイムで ui toolkit を使うその内側を覗く permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ランタイムで UI Toolkit を使う：その内側を覗く</h2>\n<p><a href=\"https://blog.unity.com/ja/technology/ui-toolkit-at-runtime-get-the-breakdown\">ランタイムで UI Toolkit を使ってみよう | Unity Blog</a></p>\n<p>UI Toolkitをランタイムで（ここではゲーム中で）利用する方法について紹介しています。</p>\n<p>UI Toolkitの概要から、UI Toolkitを用いたUI開発のワークフロー、UXMLによるUI要素の定義方法、Panel SettingによるUXMLの描画方法の定義、ボタンなどのイベントをハンドリングする方法、UI Toolkitで採用されているFlexboxアーキテクチャと要素の配置方法、USSによる要素のスタイルなどについてそれぞれ解説しています。</p>\n<p>また、簡単なUIをUI Toolkitを用いて実装する例についても言及しています。</p>\n<h2 id=\"unity-ゲーミングサービス-use-cases-でバトルバスのサンプルをお試しください\" style=\"position:relative;\"><a href=\"#unity-%E3%82%B2%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-use-cases-%E3%81%A7%E3%83%90%E3%83%88%E3%83%AB%E3%83%90%E3%82%B9%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E3%81%8A%E8%A9%A6%E3%81%97%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84\" aria-label=\"unity ゲーミングサービス use cases でバトルバスのサンプルをお試しください permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity ゲーミングサービス Use Cases でバトルバスのサンプルをお試しください</h2>\n<p><a href=\"https://blog.unity.com/ja/games/try-out-our-battle-pass-sample-using-unity-gaming-services-use-cases\">Unity ゲーミングサービス Use Cases でバトルバスのサンプルをお試しください | Unity Blog</a></p>\n<p>サーバーが絡むようなゲーム内の機能（例えばルートボックスやデイリーリワード）を、Unity Gaming Service（UGS）で実装するサンプル集「<a href=\"https://github.com/Unity-Technologies/com.unity.services.samples.use-cases\">Use Cases</a>」と、その中のサンプルの「<a href=\"https://github.com/Unity-Technologies/com.unity.services.samples.use-cases/blob/main/Assets/Use%20Case%20Samples/Battle%20Pass/README.md\">バトルパス</a>」について紹介しています。</p>\n<p>バトルパスは、ゲームの進捗（進捗はゲームによって異なるが、ゲーム内で得られるポイントなど）によって得られる無償の報酬と並行して、バトルパスを購入するとプレミアム報酬が得られる仕組みで、このような機能を、UGSをどのように組み合わせて実装しているのかについて解説しています。</p>\n<h2 id=\"urp12-の機能まとめ\" style=\"position:relative;\"><a href=\"#urp12-%E3%81%AE%E6%A9%9F%E8%83%BD%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"urp12 の機能まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URP12 の機能まとめ</h2>\n<p><a href=\"https://forpro.unity3d.jp/unity_pro_tips/2022/04/25/3620/\">URP12 の機能まとめ – Unity for Pro</a></p>\n<p>Unity 2021 LTSで利用できるUniversal Render Pipeline（URP）v12でのアップデートを<a href=\"https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@12.1/manual/whats-new/urp-whats-new.html\">What's new in URP 12</a>（URPの公式ドキュメント）をもとにまとめてます。</p>\n<h2 id=\"実は超便利timerノードを使いこなそう\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E3%81%AF%E8%B6%85%E4%BE%BF%E5%88%A9timer%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E4%BD%BF%E3%81%84%E3%81%93%E3%81%AA%E3%81%9D%E3%81%86\" aria-label=\"実は超便利timerノードを使いこなそう permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実は超便利！Timerノードを使いこなそう</h2>\n<p><a href=\"https://www.youtube.com/watch?v=tRwKEqHLuk4\">実は超便利！Timerノードを使いこなそう【Unityビジュアルスクリプティング】 - YouTube</a></p>\n<p>ビジュアルスクリプティングで利用できるTimerノードの活用方法を紹介しています。</p>\n<p>時間ベースな簡単なエフェクトの制御（指定した時間エフェクトが左右に揺れるような移動と、移動後にパーティクルシステムを再生する）を例にTimerノードの使い方について解説しています。</p>\n<h1 id=\"articles\" style=\"position:relative;\"><a href=\"#articles\" aria-label=\"articles permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Articles</h1>\n<h2 id=\"urp-に新しく追加された-deferred-レンダリングなどについてざっくりと調べてみた\" style=\"position:relative;\"><a href=\"#urp-%E3%81%AB%E6%96%B0%E3%81%97%E3%81%8F%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%9F-deferred-%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AA%E3%81%A9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%A8%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F\" aria-label=\"urp に新しく追加された deferred レンダリングなどについてざっくりと調べてみた permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URP に新しく追加された Deferred レンダリングなどについてざっくりと調べてみた</h2>\n<p><a href=\"https://tips.hecomi.com/entry/2022/04/30/233225\">URP に新しく追加された Deferred レンダリングなどについてざっくりと調べてみた - 凹みTips</a></p>\n<p>Unity 2021 LTSで正式サポートされたUniversal Render Pipeline（URP）のDeferred Renderingについて解説しています。</p>\n<p>URPのSimpleLitシェーダーを起点に、このシェーダーが利用しているDepthNormalsとSSAOレンダリングでのDepthNormalsの利用例、URPのデカールのレンダリングの流れ、G-Bufferパスについてそのレイアウトとそれぞれの要素が書き込まれるシェーダーコード解説、Deferred レンダリングについて実際のパスの流れなど、それぞれ説明しています。</p>\n<h2 id=\"refactoring-data-stored-in-unity-prefabs-scenes-and-other-assets\" style=\"position:relative;\"><a href=\"#refactoring-data-stored-in-unity-prefabs-scenes-and-other-assets\" aria-label=\"refactoring data stored in unity prefabs scenes and other assets permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring Data stored in Unity Prefabs, Scenes and other Assets</h2>\n<p><a href=\"https://blog.gemserk.com/2022/04/24/refactoring-prefabs-and-unity-objects/\">Refactoring Data stored in Unity Prefabs, Scenes and other Assets</a></p>\n<p>Unityのコンポーネントをリファクタリング（データリファクタリング）するためのツールの実装について紹介しています。</p>\n<p>シーンやプレハブに設定されたコンポーネントをまとめてリファクタリングするための汎用的なメソッドの実装と、そのツールを用いたフィールド型の変更・コンポーネントの親子間での移動・不要になったMonoBehaviourの削除方法などについて解説しています。</p>\n<h2 id=\"async-fsm-using-unitask\" style=\"position:relative;\"><a href=\"#async-fsm-using-unitask\" aria-label=\"async fsm using unitask permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async FSM using UniTask</h2>\n<p><a href=\"https://www.jussituomi.com/posts/async-fsm-unitask/\">Async FSM using UniTask | jussituomi.com</a></p>\n<p><a href=\"https://github.com/Cysharp/UniTask\">UniTask</a>を用いて非同期なFinite-state machine（FSM）を実装する方法について紹介しています。</p>\n<p>あるステートへの遷移を非同期で行えるFSMのフルスクラッチでの実装方法と、UniTaskのPlayerLoopとAsyncEnumerableを組み合わせたMonoBehaviourに依存しないFSMの非同期更新ループの実装方法、実装したFSMの使い方についてそれぞれ解説しています。</p>\n<h2 id=\"strategy-pattern-in-unity\" style=\"position:relative;\"><a href=\"#strategy-pattern-in-unity\" aria-label=\"strategy pattern in unity permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strategy Pattern In Unity</h2>\n<p><a href=\"https://blog.devgenius.io/strategy-pattern-in-unity-b82065aaa969\">Strategy Pattern In Unity. An Ability System | by James Lafritz | Apr, 2022 | Dev Genius</a></p>\n<p>ゲームのアビリティシステム（各アビリティごとに効果があるようなシステム）を、各アビリティごとに対するswitch句による実装から、ストラテジーパターンを用いた実装に置き換える方法について紹介しています。</p>\n<p>アビリティのためのインターフェイスの定義とインターフェイスを呼び分けるクラスの実装を既存の実装からどのようにリファクタリングするかを解説しています。</p>\n<p>またストラテジーパターンや、導入するメリットについてそれぞれ言及しています。</p>\n<h2 id=\"法線をuvセットに格納しunityシェーダーでライティングに使う\" style=\"position:relative;\"><a href=\"#%E6%B3%95%E7%B7%9A%E3%82%92uv%E3%82%BB%E3%83%83%E3%83%88%E3%81%AB%E6%A0%BC%E7%B4%8D%E3%81%97unity%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC%E3%81%A7%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AB%E4%BD%BF%E3%81%86\" aria-label=\"法線をuvセットに格納しunityシェーダーでライティングに使う permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>法線をUVセットに格納し、Unityシェーダーでライティングに使う</h2>\n<p><a href=\"https://developer.aiming-inc.com/unity/maya-normal-uv-unity-shader/\">【Maya/MEL】法線をUVセットに格納し、Unityシェーダーでライティングに使う │ Aiming 開発者ブログ</a></p>\n<p>MayaのUVセットで定義したユーザー独自データをMELスクリプトでfbx は書き出し、Unityで利用する方法を紹介しています。</p>\n<p>実例としてUVセットに法線情報を埋め込み、そのUV値をUnityシェーダーのライティング時の法線として利用する方法を解説しています。</p>\n<h2 id=\"unity開発の新常識-localizationパッケージでアプリ内テキストを管理する\" style=\"position:relative;\"><a href=\"#unity%E9%96%8B%E7%99%BA%E3%81%AE%E6%96%B0%E5%B8%B8%E8%AD%98-localization%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E5%86%85%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B\" aria-label=\"unity開発の新常識 localizationパッケージでアプリ内テキストを管理する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unity開発の新常識!? Localizationパッケージでアプリ内テキストを管理する</h2>\n<p><a href=\"https://light11.hatenadiary.com/entry/2022/04/26/193017\">Unity開発の新常識!? Localizationパッケージでアプリ内テキストを管理する - LIGHT11</a></p>\n<p>Unityのアプリで多言語対応を行うためのパッケージである「<a href=\"https://docs.unity3d.com/Packages/com.unity.localization@1.2/manual/index.html\">Localization</a>」を用いて、アプリ内で利用するテキストを管理する方法について紹介しています。</p>\n<p>アプリ内テキストの管理方法としてプログラム内に、直接文字列を埋め込む方法の問題点とLocalizationパッケージを用いてそれらのテキストを管理するアイデア、Localizationで扱うテキストをCSVやGoogle Spreadsheetで管理する方法についてそれぞれ解説しています。</p>\n<h2 id=\"urpでpbrライティングをする基本的なシェーダの書き方まとめ\" style=\"position:relative;\"><a href=\"#urp%E3%81%A7pbr%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E3%81%99%E3%82%8B%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"urpでpbrライティングをする基本的なシェーダの書き方まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URPでPBRライティングをする基本的なシェーダの書き方まとめ</h2>\n<p><a href=\"https://light11.hatenadiary.com/entry/2022/04/25/190849\">【Unity】URPでPBRライティングをする基本的なシェーダの書き方まとめ - LIGHT11</a></p>\n<p>URPでPhysically based rendering（PBR）なライティングを行うためのシェーダーの書き方について紹介しています。</p>\n<p>URPに予め用意されているPBRのライティングやライトマップ、シャドウの計算を行うための関数の説明と、その関数を用いてPBRなライティングを行うためのシェーダーの実装方法についてそれぞれ解説しています。</p>\n<h2 id=\"リスト内リストuiをunityで作るには\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%B9%E3%83%88%E5%86%85%E3%83%AA%E3%82%B9%E3%83%88ui%E3%82%92unity%E3%81%A7%E4%BD%9C%E3%82%8B%E3%81%AB%E3%81%AF\" aria-label=\"リスト内リストuiをunityで作るには permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リスト内リストUIをUnityで作るには</h2>\n<p><a href=\"https://qiita.com/segur/items/01ba64f8b98755b5e882\">リスト内リストUIをUnityで作るには - Qiita</a></p>\n<p>リスト内の要素がさらにリストになっているようなレイアウトを組む際の、高さを自動で計算するための方法と、それを実装するための <code>Vertical Layout Group</code> や <code>Content Size Fitter</code> コンポーネント、固定の高さになる要素を設定するための <code>Layout Element</code> の使い方などについてそれぞれ解説しています。</p>\n<h2 id=\"textmeshproのアウトラインを理解する\" style=\"position:relative;\"><a href=\"#textmeshpro%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B\" aria-label=\"textmeshproのアウトラインを理解する permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TextMeshProのアウトラインを理解する</h2>\n<p><a href=\"https://myudon.hatenablog.com/entry/2022/04/24/201020\">【Unity】TextMeshProのアウトラインを理解する - うどんてっくメモ</a></p>\n<p>TextMeshProのテキストで狙ったアウトライン表現をするための、アウトラインのサイズの計算式や各種パラメーター、外側のアウトラインと内側のアウトラインについてそれぞれ解説しています。</p>","excerpt":"Unity Official Unity 2021 LTS でメモリの使い方をカスタマイズする Unity 2021 LTS でメモリの使い方をカスタマイズする | Unity Blog Unity 2021 LTSから利用できるメモリアロケーターのカスタマイズについて紹介しています。 Unityがネイティブのメモリ割り当てを行う仕組みとしてアロケーターの中の「バケットアロケーター」と「動的ヒープアロケーター」の紹介と、メモリ割り当てを要求されたときのUnity…","fields":{"slug":"/articles/project/unity-weekly/066/"},"frontmatter":{"date":"May 01, 2022","type":"unity-weekly","tags":["Unity","Unity Weekly"],"title":"Memory allocator customization、UI Toolkit at runtime、UGS Use Cases、URP、Deferred Rendering - Unity Weekly #066","description":null,"eyecatch":null}}},"pageContext":{"id":"2caccdda-5b1a-54dc-8737-41543a54ec50"}},"staticQueryHashes":["1480509143","3159585216"]}