{"componentChunkName":"component---src-templates-post-tsx","path":"/2022/05/csharp-collection-index-initializer-and-dictionary/","result":{"data":{"markdownRemark":{"html":"<p>C#では、C# 3.0でコレクション初期化子が実装されました。</p>\n<p>これを用いることで、コレクション型を初期化すると同時に、そのコレクションの要素の初期化も行うことができます。</p>\n<p>たとえば、 <code>List&#x3C;T></code> の要素の初期化をコレクション初期化子を用いると下記のように記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// intListには1, 2, 3, 4が入った状態で初期化される。</span>\r\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> el <span class=\"token keyword\">in</span> intList<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// そのため、下記が出力される</span>\r\n    <span class=\"token comment\">// 1</span>\r\n    <span class=\"token comment\">// 2</span>\r\n    <span class=\"token comment\">// 3</span>\r\n    <span class=\"token comment\">// 4</span>\r\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このコレクション初期化子、便利なのでよく使っていたのですが、実際どう展開されるのか知らなく、調べたのでメモ代わりにブログに残します。</p>\n<h2 id=\"コレクション初期化子の実装について\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%88%9D%E6%9C%9F%E5%8C%96%E5%AD%90%E3%81%AE%E5%AE%9F%E8%A3%85%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"コレクション初期化子の実装について permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コレクション初期化子の実装について</h2>\n<p>コレクション初期化子は、 内部的にはその型の <code>Add</code> メソッドを呼び出す形で展開されます。</p>\n<p>つまり、先述したコードは、下記のように展開されます（コードは<a href=\"https://sharplab.io/\">SharpLab</a>でC#のコードをコC#として出力したコード）。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// var intList = new List&lt;int>() {1, 2, 3, 4};</span>\r\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>Add</code> メソッドが呼び出されることで、要素が初期化されていることが確認できます。</p>\n<p>このコレクション初期化子ですが、対象の型が下記の条件を満たすと利用できます。</p>\n<ul>\n<li><code>IEnumerable</code> を実装している</li>\n<li><code>Add</code> メソッドが実装されている</li>\n</ul>\n<p>展開されたコードは <code>IEnumerable</code> を実装していなくてとも、 <code>Add</code> のみが実装だけで事足りそうですが、 <strong>コレクション</strong>初期化子ということで下記のようなクラスの実装でもコレクション初期化子が利用できてしまう事態を避けるためと考えられます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// この型に対して</span>\r\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Adder</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// こういう呼び出しができてしまう</span>\r\n<span class=\"token comment\">// （が意味不明）</span>\r\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Adder</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>参考: <a href=\"https://ufcpp.net/blog/2016/12/tipscollectioninitializer/\">小ネタ コレクション初期化子 | ++C++; // 未確認飛行 C ブログ</a></p>\n<p>また、C# 6.0 以降で <code>Add</code> メソッドは、インスタンスメソッドだけではなく拡張メソッドでもOKになりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> X <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Y <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PointExtensions</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Point<span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">=></span> list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Point</span> <span class=\"token punctuation\">{</span> X <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Point<span class=\"token punctuation\">></span></span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// pointsは下記の要素が入ったリストとして初期化される</span>\r\n<span class=\"token comment\">// (X = 1, Y = 2)</span>\r\n<span class=\"token comment\">// (X = 4, Y = 6)</span>\r\n<span class=\"token comment\">// (X = 0, Y = 3)</span></code></pre></div>\n<p>参考: <a href=\"https://ufcpp.net/study/csharp/ap_ver6.html#add-extensions\">C# 6 の新機能 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C</a></p>\n<p>参考: <a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers#collection-initializers\">オブジェクト初期化子とコレクション初期化子 - C# プログラミング ガイド | Microsoft Docs</a></p>\n<h2 id=\"コレクション初期化子を用いたdictionaryの初期化\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%88%9D%E6%9C%9F%E5%8C%96%E5%AD%90%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fdictionary%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\" aria-label=\"コレクション初期化子を用いたdictionaryの初期化 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コレクション初期化子を用いたDictionaryの初期化</h2>\n<p>上記のコレクション初期化子を用いることで、Dictionaryの要素の初期化は下記のように実装できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// Addメソッドが複数引数をとるときは</span>\r\n    <span class=\"token comment\">// { T1の変数, T2の変数, ... } と言うかたちで呼び出す</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nantoka\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kantoka\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nantoka-Kantoka\"</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これはこれでとても便利で良いのですが、Dictionaryの場合、キーをインデックスアクセス的に記述できたほうが直感的なのかなーと思ったり...？</p>\n<h2 id=\"インデックス初期化子によるdictionaryの初期化\" style=\"position:relative;\"><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E5%88%9D%E6%9C%9F%E5%8C%96%E5%AD%90%E3%81%AB%E3%82%88%E3%82%8Bdictionary%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\" aria-label=\"インデックス初期化子によるdictionaryの初期化 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インデックス初期化子によるDictionaryの初期化</h2>\n<p>ということで、上記の問題（？）を解決するために、C# 6.0からインデックス初期化子という構文が追加され、より直感的な記述ができるようになりました。</p>\n<p>上記のコレクション初期化子を用いたDictionaryの初期化と（ほぼ）同等のコードを、インデックス初期化子を用いて下記のように記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nantoka\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Kantoka\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nantoka-Kantoka\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>キーがインデックスアクセス的に記述され、すこし直感的になったように感じます。</p>\n<p>このコードは、下記のように展開されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\ndictionary <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nantoka\"</span><span class=\"token punctuation\">;</span>\r\ndictionary <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Kantoka\"</span><span class=\"token punctuation\">;</span>\r\ndictionary <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nantoka-Kantoka\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> dict <span class=\"token operator\">=</span> dictionary <span class=\"token punctuation\">;</span></code></pre></div>\n<p>コレクション初期化子は <code>Add</code> メソッドの呼び出しに置き換えられるのに対して、インデックス初期化子は（名前の通り）インデクサーによるアクセスに置き換えられています。</p>\n<p>ちなみに、インデックス初期化子はインデクサーを実装している型であれば利用可能なので（更にいうとセッターのみでもよい）、独自型でもインデクサーを実装していれば利用できます。</p>\n<p>参考: <a href=\"https://blog.xin9le.net/entry/2014/11/20/025417\">インデックス初期化子 - xin9le.net</a></p>\n<p>参考: <a href=\"https://ufcpp.net/study/csharp/ap_ver6.html#index-initializer\">C# 6 の新機能 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C</a></p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>コレクション初期化子とインデックス初期化子についてそれぞれ機能の紹介と、これらがどのように展開されるのか、またこれらを用いたDictionaryの要素の初期化について触れました。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers\">オブジェクト初期化子とコレクション初期化子 - C# プログラミング ガイド | Microsoft Docs</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer\">コレクション初期化子を使用してディクショナリを初期化する方法 - C# プログラミング ガイド | Microsoft Docs</a></li>\n<li><a href=\"https://ufcpp.net/blog/2016/12/tipscollectioninitializer/\">小ネタ コレクション初期化子 | ++C++; // 未確認飛行 C ブログ</a></li>\n<li><a href=\"https://ufcpp.net/study/csharp/ap_ver6.html\">C# 6 の新機能 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C</a></li>\n<li><a href=\"https://blog.xin9le.net/entry/2014/11/20/025417\">インデックス初期化子 - xin9le.net</a></li>\n</ul>","excerpt":"C#では、C# 3.0でコレクション初期化子が実装されました。 これを用いることで、コレクション型を初期化すると同時に、そのコレクションの要素の初期化も行うことができます。 たとえば、 List<T> の要素の初期化をコレクション初期化子を用いると下記のように記述できます。 このコレクション初期化子、便利なのでよく使っていたのですが、実際どう展開されるのか知らなく、調べたのでメモ代わりにブログに残します。 コレクション初期化子の実装について コレクション初期化子は、 内部的にはその型の Add…","fields":{"slug":"/2022/05/csharp-collection-index-initializer-and-dictionary/"},"frontmatter":{"date":"May 04, 2022","type":"memo","tags":["C#"],"title":"C#のコレクション初期化子とインデックス初期化子、またはDictionaryの初期化について","description":null,"eyecatch":null}}},"pageContext":{"id":"6a92e528-62cb-52df-ab66-db9c0117b7e1"}},"staticQueryHashes":["1480509143","3159585216"]}