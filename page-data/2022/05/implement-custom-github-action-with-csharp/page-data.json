{"componentChunkName":"component---src-templates-post-tsx","path":"/2022/05/implement-custom-github-action-with-csharp/","result":{"data":{"markdownRemark":{"html":"<p>「<a href=\"https://blog.yucchiy.com/2022/05/blogging-with-notion/\">Notionでブログを書く</a>」で紹介した通り、<a href=\"https://github.com/yucchiy/notion-to-markdown\">notion-to-markdown</a>というアクションの処理はC#で実装しています。</p>\n<p>この実装を題材に、C#製のCLIアプリケーションを用いてCustom GitHub Actionを作成する方法について紹介します。</p>\n<p>実装に当たってMicrosoftのドキュメント「<a href=\"https://docs.microsoft.com/en-us/dotnet/devops/create-dotnet-github-action\">Tutorial: Create a GitHub Action with .NET</a>」を参考にしています。（特に、C#を動かすためのDockerイメージの作成はほぼそのまま利用しています。）</p>\n<h2 id=\"cでgithub-actionsの処理を書く\" style=\"position:relative;\"><a href=\"#c%E3%81%A7github-actions%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E6%9B%B8%E3%81%8F\" aria-label=\"cでgithub actionsの処理を書く permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C#でGitHub Actionsの処理を書く</h2>\n<p>まずはC#でアクションの処理を実装します。基本的には、コンソールアプリケーションのテンプレートを用いて実装することになります。</p>\n<p>最近のC#では<a href=\"https://blog.yucchiy.com/2021/01/top-level-statements-in-csharp9/\">top-level statement</a>やglobal usingをサポートしたので、エントリーポイントとなるクラスやメソッドやusingを一部省略でき、結構スッキリ処理をかけると思います。</p>\n<p>外部からの入力は、標準入力や環境変数などから受け取れます。notion-to-markdownではNotionのAPIを叩くトークンや対象となるデータベースID、出力のパスを下記のように標準入力で渡しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// from CLI</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> notionAuthToken <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> notionDatabaseId <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> outputDirectoryPathTemplate <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>コマンドライン引数のパースが複雑になる場合は、<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/commandline/\">System.Commandline</a>や<a href=\"https://github.com/Cysharp/ConsoleAppFramework\">ConsoleAppFramework</a>などの利用を検討してもいいですが、GitHub Actionでそこまで複雑な引数を受け取るような入力を定義したくなったら、そもそも別アクションを検討した方が全体的にスッキリするかもしれません。</p>\n<p>後続のステップに何かしらの値を渡したい場合は、標準出力に下記のような文字列を出力しておきます。notion-to-markdownではNotionのデータベースから実際にエクスポートしたMarkdown数を、下記のように出力しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"::set-output name=exported_count::</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">exportedCount</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上記のように出力しておくことで、後続のステップでは下記のように定義することで、出力した値を <code>if: ${{ steps.export.outputs.exported_count != '0'}}</code> のように参照できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> Export The Notion Database to local markdown files<span class=\"token punctuation\">.</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">export</span>\n  uses<span class=\"token punctuation\">:</span> yucchiy<span class=\"token operator\">/</span>notion<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>markdown@v0<span class=\"token punctuation\">.</span><span class=\"token number\">2.1</span>\n  with<span class=\"token punctuation\">:</span>\n    notion_auth_token<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets<span class=\"token punctuation\">.</span>NOTION_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    notion_database_id<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets<span class=\"token punctuation\">.</span>NOTION_DATABASE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    output_directory_path_template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/pages/{{publish|date.to_string('%Y/%m')}}/{{slug}}\"</span>\n<span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> Commit exported markdown files\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">.</span>outputs<span class=\"token punctuation\">.</span>exported_count <span class=\"token operator\">!=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  run<span class=\"token punctuation\">:</span> <span class=\"token operator\">|</span>\n    git config <span class=\"token operator\">--</span>local user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"41898282+github-actions[bot]@users.noreply.github.com\"</span>\n    git config <span class=\"token operator\">--</span>local user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"github-actions[bot]\"</span>\n    git <span class=\"token keyword\">add</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>pages\n    git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Import files from notion database\"</span></code></pre></div>\n<h2 id=\"github-action上でcを動かす\" style=\"position:relative;\"><a href=\"#github-action%E4%B8%8A%E3%81%A7c%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\" aria-label=\"github action上でcを動かす permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Action上でC#を動かす</h2>\n<p>GitHub Actionsは、<a href=\"https://github.com/actions/virtual-environments\">こちらの環境</a>からアプリケーションの実行環境を選択できます。それぞれの環境にプリインストールされているソフトウェアは、表中の右の「Included Softwawe」のリンクから確認できます。</p>\n<p>例えば、ubuntu 22.04にプリインストールされているソフトウェアは<a href=\"https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2204-Readme.md\">こちら</a>から確認できます。</p>\n<p>上記環境に用意されていないランタイムやツールが必要な場合は、Dockerfileを用意することで、任意の言語やツールが実行できる環境を構築できます。</p>\n<p>ubuntu22.04にはdotnetのランタイムがインストールされているので、そのままでもC#を実行できますが、今回はDockerfileを用意して独自の環境を作成し、その中でアプリをビルドして実行してみます。</p>\n<p>Dockerイメージは、大きく分けてアプリケーションのビルドと、ビルドしたアプリの実行に分かれます。</p>\n<p>下記にDockerfileのうちの主要な処理を抜粋します。まずはアプリケーションのビルド部分です。</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:6.0 <span class=\"token keyword\">as</span> build-env</span>\n\n<span class=\"token comment\"># Copy everything and publish the release (publish implicitly restores and builds)</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet publish ./notion-to-markdown.csproj -c Release -o out --no-self-contained</span></code></pre></div>\n<p>適当なディレクトリをワークディレクトリとして（今回は <code>/app</code> ）、アプリケーションをフレームワーク依存の実行ファイルとしてビルドします。</p>\n<p>次にアプリケーションの実行部分です。</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Relayer the .NET SDK, anew with the build output</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:6.0</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">build-env</span></span> /app/out .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [ <span class=\"token string\">\"dotnet\"</span>, <span class=\"token string\">\"/notion-to-markdown.dll\"</span> ]</span></code></pre></div>\n<p>先程ビルドしたファイルをコピーし、dotnetコマンドラインで実行しているだけです。</p>\n<p>作成したDockerfileをGitHub Actionsで実行するには、 <code>action.yml</code> の image に作成したDockerfileを指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">runs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">using</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> Dockerfile</code></pre></div>\n<h2 id=\"actionymlの定義\" style=\"position:relative;\"><a href=\"#actionyml%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"actionymlの定義 permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action.ymlの定義</h2>\n<p>最後に、Custom GitHub Actionを定義するために <code>action.yml</code> を用意します。このファイルでは大きく分けて下記を定義します。</p>\n<ul>\n<li>アクション名や説明などの情報。</li>\n<li><code>inputs</code> : このアクションに渡す入力一覧。このアクションを利用するワークフローから入力を渡す。 <code>required: true</code>が定義されている場合は、渡さないとエラーとなる。</li>\n<li><code>outputs</code> : このアクションの出力。アプリケーションが <code>::set-output name=output_name::output_value</code> という形式で標準出力に出力している場合、 <code>output_name</code> という出力を定義することで出力された値を参照できる。</li>\n<li><code>runs</code> : このアクションを実行する環境やアクションに渡すコマンドライン引数、環境変数を定義する。</li>\n</ul>\n<p>notion-to-markdownでは下記のような <code>action.yml</code> を定義しています。先述の通り、入力でNotionのトークンやデータベースID、出力パスを定義し、そのままコマンドライン引数として渡しています（ <code>runs.args</code> 部分）。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> notion<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>markdown\n<span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Custom action to export Notion database to local markdown files.\n<span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">notion_auth_token</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Auth token of the notion.\n    <span class=\"token key atrule\">required</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">notion_database_id</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> ID of the notion database to be exported.\n    <span class=\"token key atrule\">required</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">output_directory_path_template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Directory path template to output files.\n    <span class=\"token key atrule\">required</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> output/<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>publish<span class=\"token punctuation\">|</span>date.to_string('%Y/%m')<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>slug<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">outputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">exported_count</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Number of exported files.\n<span class=\"token key atrule\">runs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">using</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> Dockerfile\n  <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.notion_auth_token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.notion_database_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.output_directory_path_template <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のアクションを、下記のようなワークフローを定義して利用しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> import\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0/10 * * * *'</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">import_markdown</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2.4.2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Export The Notion Database to local markdown files.\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> export\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> yucchiy/notion<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>markdown@v0.2.1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">notion_auth_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NOTION_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">notion_database_id</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NOTION_DATABASE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">output_directory_path_template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/pages/{{publish|date.to_string('%Y/%m')}}/{{slug}}\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit exported markdown files\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.export.outputs.exported_count <span class=\"token tag\">!=</span> '0'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add ./src/pages\n          git commit -m \"Import files from notion database\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Push markdown files\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> ad<span class=\"token punctuation\">-</span>m/github<span class=\"token punctuation\">-</span>push<span class=\"token punctuation\">-</span>action@master\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Custom GitHub Actionを、C#で実装する方法について紹介しました。</p>","excerpt":"「Notionでブログを書く」で紹介した通り、notion-to-markdownというアクションの処理はC#で実装しています。 この実装を題材に、C#製のCLIアプリケーションを用いてCustom GitHub Actionを作成する方法について紹介します。 実装に当たってMicrosoftのドキュメント「Tutorial: Create a GitHub Action with .NET」を参考にしています。（特に、C#を動かすためのDocker…","fields":{"slug":"/2022/05/implement-custom-github-action-with-csharp/"},"frontmatter":{"date":"May 30, 2022","type":"tech","tags":["C#","GitHub Actions"],"title":"C#でCustom GitHub Actionを書く","description":"C#でCustom GitHub Actionを実装する方法について、notion-to-markdownというツールの実装を交えて紹介します。","eyecatch":null}}},"pageContext":{"id":"d9fe1daa-a8e3-5c8a-9402-c8c9cbf4199b"}},"staticQueryHashes":["1480509143","3159585216"]}